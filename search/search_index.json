{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CWHQ Documentation","text":"<p>Welcome to the CodeWizardsHQ documentation page!</p> <p>This documentation is a reference for most of the libraries and languages we use in CodeWizardsHQ courses. It is not meant to be an exhaustive reference, but rather a handy tool that covers the basics. You'll find links to further reading throughout if you want to explore a topic in more detail.</p>"},{"location":"#usage","title":"Usage","text":"<p>Use the navigation menu on the left-hand side of the page to browse the available documentation. Each documentation section will have a table of contents on the right-hand side for easy browsing of the major topics contained in the section.</p> <p>You can also use the Search bar if you have a specific topic in mind.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you spot a typo or have a suggestion, you can file an issue here and the project maintainers will reach out to you.</p>"},{"location":"css/css/","title":"CSS Language","text":"<p>CSS (Cascading Stylesheets) is used to define the style of a webpage. Think of it like the choice of paint, wood, window curtains, etc. when building a house. When you visit a website, the CSS is what the gives the webpage its fancy design!</p> <p>We use CSS in the following courses at CWHQ:</p> Elementary Middle School High School Fundamental Programming Concepts Webpages with HTML &amp; CSS Fundamentals of Web Development Web Development For Kids - 1 Capstone 1 User Interface Development Web Development For Kids - 2 User Interface Development Capstone 1 Creating Websites with HTML/CSS Responsive Web Development APIs and Databases Responsive Websites with HTML/CSS Interactive JavaScript Professional Web App Development Interactive Websites with JavaScript Web Interfaces Modern CSS Frameworks Capstone 3 Capstone 2 Capstone 2 Mastering APIs Mastering MVC Framework Capstone 3 Object Relational Mapping DevOps and Software Engineering Capstone 3 <p>In this section of our documentation, you'll find references to most of the core CSS language features that we use in our CodeWizardsHQ courses.</p> <p>You'll also find many Further reading sections, which pull from these excellent CSS resources:</p> <ul> <li>MDN CSS Docs</li> <li>web.dev Learn CSS</li> <li>CSS Tricks</li> </ul>"},{"location":"css/css/#including-css-in-html-documents","title":"Including CSS In HTML Documents","text":"<p>In order for CSS style rules to apply to an HTML document, you must include them in the document in some way.</p>"},{"location":"css/css/#including-css-in-the-head","title":"Including CSS In The <code>&lt;head&gt;</code>","text":"<p>Generally, CSS is added in the <code>&lt;head&gt;</code> of an HTML document. You can link an external CSS file using a <code>&lt;link&gt;</code> tag, or you can write CSS directly in an HTML document using the <code>&lt;style&gt;</code> tag. Both methods are shown below.</p> <pre><code>/* style.css */\nh1 {\n    color: red;\n}\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Including CSS in HTML Documents&lt;/title&gt;\n        &lt;!-- This is an external stylesheet --&gt;\n        &lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;\n        &lt;style&gt;\n            p {\n                color: blue;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;h1&gt;This is red because of the CSS in style.css&lt;/h1&gt;\n        &lt;p&gt;This is blue because of the CSS in the style tag&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"css/css/#inline-css","title":"Inline CSS","text":"<p>You can also write CSS style rules directly in an HTML tag using the <code>style</code> attribute, but this is generally discouraged.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Including CSS in HTML Documents&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;h1 style=\"color: red;\"&gt;\n            This is red because of the CSS in this element's style attribute\n        &lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - Applying CSS to HTML</li> <li>CSS Tricks - The Second \"S\" In CSS</li> </ul>"},{"location":"css/css/#borders","title":"Borders","text":"<p>The <code>border</code> property can create a styled border for elements. Below are some border examples:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Borders&lt;/title&gt;\n\n        &lt;style&gt;\n            .box {\n                width: 150px;\n                height: 150px;\n                border: 10px solid yellowgreen;\n                display: inline-block;\n                margin: 10px;\n                margin-top: 100px;\n                background-color: rgba(176, 166, 181, 0.787);\n            }\n\n            .box-1 {\n                border: 10px dotted teal;\n            }\n            .box-2 {\n                border: 10px dashed violet;\n            }\n            .box-3 {\n                border: 10px groove cyan;\n            }\n\n            /* \n            border-radius property can be used to round edges\n            or make a complete circle for an element\n            */\n            .box-4 {\n                border-radius: 50%;\n            }\n            .box-5 {\n                border-radius: 10px;\n            }\n\n            /* \n            Below are some longhand border properties\n            */\n            .box-6 {\n                /* Border Style Longhand */\n                border-style: double;\n                /* Border Width Longhand */\n                border-width: 20px;\n                /* Border Color Longhand */\n                border-color: rgb(24, 237, 173);\n                /* Border Bottom Longhand */\n                border-bottom: 20px double green;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;div class=\"box box-1\"&gt;&lt;/div&gt;\n            &lt;div class=\"box box-2\"&gt;&lt;/div&gt;\n            &lt;div class=\"box box-3\"&gt;&lt;/div&gt;\n            &lt;div class=\"box box-4\"&gt;&lt;/div&gt;\n            &lt;div class=\"box box-5\"&gt;&lt;/div&gt;\n            &lt;div class=\"box box-6\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"css/css/#box-model","title":"Box Model","text":"<p>The box model is used by every HTML element. The box model has margin, border, padding, and content and is used to form a visual \"box\".</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Box Model&lt;/title&gt;\n        &lt;style&gt;\n            .box {\n                margin: auto;\n                border: 10px solid red;\n                padding: 20px;\n                text-align: center;\n                width: 300px;\n                height: 300px;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"box\"&gt;\n            &lt;p&gt;Content&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"css/css/#block-and-inline","title":"Block and Inline","text":"<p>The terms <code>block</code> and <code>inline</code> refer to two different types of boxes. The width and height properties can be used on elements with the <code>display</code> property set to <code>block</code> (which is also the default display property). If the value of an element is <code>inline</code>, the box will not break on a new line, and the width and height properties will be ignored.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Box Model&lt;/title&gt;\n        &lt;style&gt;\n            .box {\n                margin: auto;\n                border: 5px solid red;\n                padding: 20px;\n                text-align: center;\n                width: 300px;\n                height: 300px;\n            }\n            .inline-box {\n                display: inline;\n            }\n            .block-box {\n                display: inline-block;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"box\"&gt;\n            &lt;p&gt;Content&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"box\"&gt;\n            &lt;p&gt;Content&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"box inline-box\"&gt;\n            &lt;p&gt;Content&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"box inline-box\"&gt;\n            &lt;p&gt;Content&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"box block-box\"&gt;\n            &lt;p&gt;Content&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"box block-box\"&gt;\n            &lt;p&gt;Content&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"css/css/#longhand-properties","title":"Longhand Properties","text":"<p>Margin and Padding can also be used to create specified spacing using the longhand properties:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Box Model&lt;/title&gt;\n        &lt;style&gt;\n            .box {\n                border: 5px solid red;\n                padding: 20px;\n\n                text-align: center;\n                width: 200px;\n                height: 200px;\n                font-size: 30px;\n                /*  Margin Longhand Properties */\n                margin-top: 2px;\n                margin-bottom: 4px;\n                margin-left: 6px;\n                margin-right: 8px;\n                /*  Padding Longhand Properties */\n                padding-top: 2px;\n                padding-bottom: 4px;\n                padding-left: 6px;\n                padding-right: 8px;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"box\"&gt;\n            &lt;p&gt;Content&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - The Box Model</li> <li>web.dev - Box Model</li> <li>CSS Tricks - The CSS Box Model</li> </ul>"},{"location":"css/css/#comments","title":"Comments","text":"<p>In CSS you can create comments between <code>/* */</code> blocks. They can be single line or multiline.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;CSS Comments&lt;/title&gt;\n        &lt;style&gt;\n            /* This is a single line comment */\n\n            /*\n            This \n            spans \n            multiple lines\n            */\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Further Reading</p> <ul> <li>MDN - Comments</li> </ul>"},{"location":"css/css/#css-rule-basics","title":"CSS Rule Basics","text":"<p>CSS works by selecting one or more HTML elements and then applying styles to those HTML elements. The way to select elements can be as simple as writing the HTML tag name, targeting tags with a common class or id, or even targeting tags based on some state such as being hovered over.</p> <p>The basic syntax is:</p> <pre><code>selector {\n    property: value;\n    otherproperty: otherValue;\n    anotherproperty: value1 value2 value3;\n}\n</code></pre> <p>Notice that property/value pairs can be one-to-one or one-to-many.</p> <p>Here's an example of targeting a few elements and applying styles to them:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;CSS Rule Basics&lt;/title&gt;\n        &lt;style&gt;\n            #page-title {\n                color: green;\n                text-shadow: 20px 15px 4px black;\n            }\n\n            p {\n                color: blue;\n                text-decoration: underline;\n                border: 10px solid red;\n                padding: 24px;\n                font-size: 42px;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;h1 id=\"page-title\"&gt;This text is green and has a text shadow added.&lt;/h1&gt;\n        &lt;p&gt;\n            Each paragraph tag has the same styles because we targeted the \"p\"\n            selector.\n        &lt;/p&gt;\n        &lt;p&gt;See what I mean?&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"css/css/#dealing-with-overflow-issues","title":"Dealing with Overflow Issues","text":"<p>When you constrain the size of an HTML element and add content into it, there's a chance that the content can overflow. The <code>overflow</code> property gives you the ability to control how overflow issues are dealt with in an element with a constrained width and/or height.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Dealing With Overflow Issues&lt;/title&gt;\n\n        &lt;style&gt;\n            .box {\n                width: 200px;\n                height: 200px;\n                border: 1px solid black;\n                display: inline-block;\n            }\n\n            /*\n            *   The `overflow` property's `scroll` setting adds a scrollbar\n            *   to an element when the content overflows which allows them\n            *   to scroll through the content.\n            */\n            #box-2 {\n                overflow: scroll;\n            }\n\n            /*\n            *   The `overflow` property's `hidden` setting hides any content\n            *   that overflows an HTML element. \n            */\n            #box-3 {\n                overflow: hidden;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;!-- \n            This text will overflow outside of the box since we don't use \n            `overflow` to control it .\n        --&gt;\n        &lt;div id=\"box-1\" class=\"box\"&gt;\n            &lt;p&gt;\n                Bacon ipsum dolor amet kevin pancetta landjaeger beef doner,\n                turducken frankfurter burgdoggen spare ribs brisket chuck\n                sirloin. Picanha jowl meatloaf meatball sausage kevin\n                frankfurter buffalo ball tip strip steak jerky. Swine biltong\n                tenderloin, turducken short loin kevin filet mignon chislic pig\n                pork belly chicken meatball shank capicola. Sirloin turkey\n                frankfurter pig.\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;div id=\"box-2\" class=\"box\"&gt;\n            &lt;p&gt;\n                Bacon ipsum dolor amet kevin pancetta landjaeger beef doner,\n                turducken frankfurter burgdoggen spare ribs brisket chuck\n                sirloin. Picanha jowl meatloaf meatball sausage kevin\n                frankfurter buffalo ball tip strip steak jerky. Swine biltong\n                tenderloin, turducken short loin kevin filet mignon chislic pig\n                pork belly chicken meatball shank capicola. Sirloin turkey\n                frankfurter pig.\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;div id=\"box-3\" class=\"box\"&gt;\n            &lt;p&gt;\n                Bacon ipsum dolor amet kevin pancetta landjaeger beef doner,\n                turducken frankfurter burgdoggen spare ribs brisket chuck\n                sirloin. Picanha jowl meatloaf meatball sausage kevin\n                frankfurter buffalo ball tip strip steak jerky. Swine biltong\n                tenderloin, turducken short loin kevin filet mignon chislic pig\n                pork belly chicken meatball shank capicola. Sirloin turkey\n                frankfurter pig.\n            &lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - Overflowing Content</li> <li>web.dev - Overflow</li> <li>CSS Tricks - The CSS Overflow Property</li> </ul>"},{"location":"css/css/#inheritance","title":"Inheritance","text":"<p>Some CSS properties are passed on to children of HTML elements. For example, the <code>color</code> property will be passed to child elements. You can still override styles that are inherited by using a more specific selector for a child element.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;inheritance&lt;/title&gt;\n        &lt;style&gt;\n            div {\n                color: blue;\n                font-size: 32px;\n            }\n\n            .warning {\n                color: red;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;p&gt;This is blue because of inheritance!&lt;/p&gt;\n            &lt;p class=\"warning\"&gt;This is red because of specificity.&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - Understanding Inheritance</li> <li>web.dev - Inheritance</li> </ul>"},{"location":"css/css/#layouts","title":"Layouts","text":"<p>The following layout properties allow you position elements in the web page.</p>"},{"location":"css/css/#the-position-property","title":"The <code>Position</code> property","text":"<p>The position property allows you to position an element in the document. You may use <code>top</code>, <code>left</code>, <code>right</code>, <code>bottom</code> properties to position the element.</p>"},{"location":"css/css/#position-static","title":"Position <code>Static</code>","text":"<p>Default position property, can be moved with margin but will affect adjoining elements.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Layouts&lt;/title&gt;\n\n        &lt;style&gt;\n            .box {\n                width: 300px;\n                height: 200px;\n                margin: 10px;\n                display: inline-block;\n                border: 3px solid rgb(0, 204, 255);\n                background: rgba(65, 60, 198, 0.5);\n            }\n\n            #box-1 {\n                position: static;\n                margin-top: 50px;\n                margin-left: 100px;\n                background-color: rgba(11, 255, 113, 0.5);\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;h1&gt;position: static&lt;/h1&gt;\n            &lt;div id=\"box-1\" class=\"box static\"&gt;&lt;/div&gt;\n            &lt;div id=\"box-2\" class=\"box static\"&gt;&lt;/div&gt;\n            &lt;div id=\"box-3\" class=\"box static\"&gt;&lt;/div&gt;\n            &lt;div id=\"box-4\" class=\"box static\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"css/css/#position-relative","title":"Position <code>Relative</code>","text":"<p>Position relative changes the position of the element in respect to the adjoining elements. It overlaps over adjoining elements:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Layouts&lt;/title&gt;\n\n        &lt;style&gt;\n            .box {\n                width: 300px;\n                height: 200px;\n                margin: 10px;\n                display: inline-block;\n                border: 3px solid rgb(0, 204, 255);\n                background: rgba(65, 60, 198, 0.5);\n            }\n\n            #box-1 {\n                position: relative;\n                top: 100px;\n                left: 40px;\n                background-color: rgba(11, 255, 113, 0.5);\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;h1&gt;position: relative&lt;/h1&gt;\n            &lt;div id=\"box-1\" class=\"box relative\"&gt;&lt;/div&gt;\n            &lt;div id=\"box-2\" class=\"box relative\"&gt;&lt;/div&gt;\n            &lt;div id=\"box-3\" class=\"box relative\"&gt;&lt;/div&gt;\n            &lt;div id=\"box-4\" class=\"box relative\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"css/css/#position-absolute","title":"Position <code>Absolute</code>","text":"<p>Position absolute changes the element's position in relation to the whole page:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Layouts&lt;/title&gt;\n\n        &lt;style&gt;\n            .box {\n                width: 300px;\n                height: 200px;\n                margin: 10px;\n                display: inline-block;\n                border: 3px solid rgb(0, 204, 255);\n                background: rgba(65, 60, 198, 0.5);\n            }\n\n            #box-1 {\n                position: absolute;\n                top: 100px;\n                right: 40px;\n                background-color: rgba(11, 255, 113, 0.5);\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;h1&gt;position: absolute&lt;/h1&gt;\n            &lt;div id=\"box-1\" class=\"box absolute\"&gt;&lt;/div&gt;\n            &lt;div id=\"box-2\" class=\"box absolute\"&gt;&lt;/div&gt;\n            &lt;div id=\"box-3\" class=\"box absolute\"&gt;&lt;/div&gt;\n            &lt;div id=\"box-4\" class=\"box absolute\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"css/css/#position-absolute-inside-of-parent-element-with-position-relative","title":"Position <code>Absolute</code> inside of parent element with position <code>relative</code>","text":"<p>We can also give relative position the parent element, which will position the element in respect to the parent element rather than the whole page.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Layouts&lt;/title&gt;\n\n        &lt;style&gt;\n            .container {\n                width: 850px;\n                min-height: 400px;\n                border-radius: 15px;\n                padding: 20px;\n                margin: auto;\n                cursor: pointer;\n\n                /* Give position relative the parent element*/\n                position: relative;\n            }\n\n            .box {\n                width: 300px;\n                height: 200px;\n                margin: 10px;\n                display: inline-block;\n                border: 3px solid rgb(0, 204, 255);\n                background: rgba(65, 60, 198, 0.5);\n            }\n\n            #box-1 {\n                position: absolute;\n                left: 100px;\n                bottom: 100px;\n                background-color: rgba(11, 255, 113, 0.5);\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;h1&gt;position: absolute with relative parent&lt;/h1&gt;\n            &lt;div id=\"box-1\" class=\"box\"&gt;&lt;/div&gt;\n            &lt;div id=\"box-2\" class=\"box\"&gt;&lt;/div&gt;\n            &lt;div id=\"box-3\" class=\"box\"&gt;&lt;/div&gt;\n            &lt;div id=\"box-4\" class=\"box\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"css/css/#position-fixed","title":"Position <code>Fixed</code>","text":"<p>Position fixed will position the element in respect to the window and will not move it's position:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Layouts&lt;/title&gt;\n\n        &lt;style&gt;\n            .box {\n                width: 300px;\n                height: 200px;\n                margin: 10px;\n                border: 3px solid rgb(0, 204, 255);\n                background: rgba(65, 60, 198, 0.5);\n            }\n\n            #box-1 {\n                position: fixed;\n                top: 100px;\n                left: 100px;\n                background-color: rgba(11, 255, 113, 0.5);\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;h1&gt;position: fixed&lt;/h1&gt;\n            &lt;div id=\"box-1\" class=\"box fixed\"&gt;&lt;/div&gt;\n            &lt;div id=\"box-2\" class=\"box fixed\"&gt;&lt;/div&gt;\n            &lt;div id=\"box-3\" class=\"box fixed\"&gt;&lt;/div&gt;\n            &lt;div id=\"box-4\" class=\"box fixed\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - Positioning</li> <li>web.dev - Positioning</li> <li>CSS Tricks - Absolute, Relative, Fixed Positioning: How Do They Differ?</li> </ul>"},{"location":"css/css/#flexbox-layout","title":"Flexbox layout","text":"<p>CSS flexbox allows you to create a flexible layout:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Layouts&lt;/title&gt;\n\n        &lt;style&gt;\n            .container {\n                width: 850px;\n                min-height: 400px;\n                border-radius: 15px;\n                padding: 20px;\n                margin: auto;\n                cursor: pointer;\n\n                /* Set the display property to flex for the parent element */\n                display: flex;\n\n                /* Grid type:\n            Properties: row, row-reverse, column, column-reverse*/\n                flex-direction: row;\n\n                /* Avoid having all children elements in the same row:\n            Properties: no-wrap, wrap, wrap-reverse */\n                flex-wrap: wrap;\n\n                /* Justify Content defines the alignment of the flex-items:\n            Properties: flex-start, flex-end, center, space-between, space-around, space-evenly*/\n                justify-content: space-around;\n            }\n\n            .box {\n                width: 300px;\n                height: 200px;\n                margin: 10px;\n                border: 3px solid rgb(0, 204, 255);\n                background: rgba(65, 60, 198, 0.5);\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;h1&gt;Flexbox&lt;/h1&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;div id=\"box-1\" class=\"box\"&gt;&lt;/div&gt;\n            &lt;div id=\"box-2\" class=\"box\"&gt;&lt;/div&gt;\n            &lt;div id=\"box-3\" class=\"box\"&gt;&lt;/div&gt;\n            &lt;div id=\"box-4\" class=\"box\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - Flexbox</li> <li>CSS Tricks - A Complete Guide to Flexbox</li> <li>web.dev - Flexbox</li> </ul>"},{"location":"css/css/#responsive-design","title":"Responsive Design","text":"<p>You can use Media Queries to define styling based on the device type, such as device width. You may use the <code>@media</code> rule to make your websites responsive by creating conditions based on device breakpoints. The condition is created using the properties <code>min-width</code> and <code>max-width.</code></p> <p>Note</p> <p>Browsers by default zoom out the page to fit on the screen you open. For media queries to work, we don't want this zooming out. To disable this zooming out we need to use <code>&lt;meta&gt;</code> tag.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Responsive Design&lt;/title&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;\n\n        &lt;style&gt;\n            #insect {\n                height: 100%;\n                background-size: contain;\n                background-repeat: no-repeat;\n                background-position: bottom;\n                width: 100px;\n                margin: auto;\n                margin-top: -100px;\n                background-image: url(\"larve.png\");\n                transition: 1s all ease;\n            }\n\n            @media (min-width: 400px) and (max-width: 768px) {\n                #insect {\n                    width: 150px;\n                    background-image: url(\"caterpillar.png\");\n                }\n            }\n\n            @media (min-width: 768px) and (max-width: 1100px) {\n                #insect {\n                    width: 170px;\n                    background-image: url(\"butterfly1.png\");\n                }\n            }\n\n            @media (min-width: 1100px) {\n                #insect {\n                    width: 250px;\n                    background-image: url(\"butterfly2.png\");\n                }\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id=\"insect\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - Beginners Guide to Media Queries</li> <li>CSS Tricks - A Complete Guide to CSS Media Queries</li> </ul>"},{"location":"css/css/#selectors","title":"Selectors","text":"<p>CSS Selectors allow you to access HTML elements to style. Below are some of the common CSS selectors you may use.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Selectors&lt;/title&gt;\n        &lt;style&gt;\n            /* Element Selector*/\n            div {\n                border: 3px groove black;\n            }\n            /* Class Selector */\n            .object {\n                border-width: 10px;\n                border-color: blueviolet;\n            }\n            /* ID Selector  */\n            #heading {\n                color: red;\n            }\n            /* Element+class */\n            div.container {\n                box-shadow: 10px 10px 10px black;\n            }\n            /* Attribute Selector */\n            input[type=\"text\"] {\n                border: none;\n                border-bottom: 2px solid black;\n            }\n\n            /* Targeting Multiple Selectors */\n            em,\n            span {\n                color: rgb(252, 106, 206);\n            }\n\n            /* Combinators */\n\n            /* Descendent Combinator */\n            p em:hover {\n                font-size: 30px;\n            }\n            /* Adjacent Sibling Combinator */\n            li + li {\n                color: rgb(4, 255, 0);\n            }\n\n            /* Child Combinator */\n            .combinator &gt; p {\n                color: red;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;div class=\"object\"&gt;\n                &lt;h1 id=\"heading\"&gt;Hello!&lt;/h1&gt;\n                &lt;p&gt;Some text &lt;em&gt;goes here&lt;/em&gt;&lt;/p&gt;\n                &lt;span&gt;Hello&lt;/span&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"list\"&gt;\n                &lt;ol&gt;\n                    &lt;li&gt;One&lt;/li&gt;\n                    &lt;li&gt;Two&lt;/li&gt;\n                    &lt;li&gt;Three&lt;/li&gt;\n                &lt;/ol&gt;\n                &lt;input type=\"text\" placeholder=\"Name\" /&gt;\n                &lt;input type=\"submit\" value=\"Enter\" /&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"combinator\"&gt;\n                &lt;h2&gt;Heading 2&lt;/h2&gt;\n                &lt;p&gt;Some text &lt;em&gt;here&lt;/em&gt; yay!&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - CSS Selectors</li> <li>web.dev - Selectors</li> <li>CSS Tricks - Beginner Concepts: How CSS Selectors Work</li> </ul>"},{"location":"css/css/#specificity-and-the-cascade","title":"Specificity And The Cascade","text":"<p>When applying styles to HTML elements there are two principles, specificity and the cascade, that can influence which styles are applied to a given element.</p>"},{"location":"css/css/#specificity","title":"Specificity","text":"<p>Specificity is calculated by how you selected an element or group of HTML elements.</p> <p>For example, the element with the id <code>danger</code> below has red text, even though there's a style rule selecting all <code>&lt;p&gt;</code> elements and turning them blue:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Specificity and the Cascade&lt;/title&gt;\n        &lt;style&gt;\n            p {\n                color: blue;\n                font-size: 32px;\n            }\n\n            #danger {\n                color: red;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;p&gt;This is blue.&lt;/p&gt;\n        &lt;p id=\"danger\"&gt;This is red!&lt;/p&gt;\n        &lt;p&gt;This is also blue.&lt;/p&gt;\n        &lt;p&gt;But, we're all the same size.&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"css/css/#the-cascade","title":"The Cascade","text":"<p>The cascade applies to where in the CSS styles a style rule lies. If you are targeting a selector in two places, the one furthest down the page wins for any style rules that are conflicting.</p> <p>Note how there are no blue <code>&lt;p&gt;</code> tags in the example below because the second CSS rule overwrites the <code>color</code> property of the first:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Specificity and the Cascade&lt;/title&gt;\n        &lt;style&gt;\n            p {\n                color: blue;\n                font-size: 32px;\n            }\n\n            p {\n                color: red;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;p&gt;This is red, the blue color was overwritten!&lt;/p&gt;\n        &lt;p&gt;This is also red!&lt;/p&gt;\n        &lt;p&gt;But, we're all the same size.&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - Understanding the Cascade</li> <li>web.dev - The Cascade</li> <li>web.dev - Specificity</li> <li>CSS Tricks - Specifics on CSS Specificity</li> <li>CSS Tricks - The \"C\" in CSS: The Cascade</li> </ul>"},{"location":"css/css/#styling-elements-based-on-state","title":"Styling Elements Based on State","text":"<p>CSS allows you to change the styling of an element depending on its <code>state</code>. When an element is hovered over or visited, you can modify its styling.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Styling based on state&lt;/title&gt;\n        &lt;style&gt;\n            a:link {\n                color: red;\n            }\n            a:hover {\n                color: green;\n                font-size: 65px;\n            }\n            a:visited {\n                color: teal;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;a href=\"page2.html\"&gt; Link &lt;/a&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - Pseudo-classes</li> <li>MDN - Styling some links</li> <li>web.dev - Pseudo-classes</li> <li>CSS Tricks - Pseudo-class Selectors</li> </ul>"},{"location":"css/css/#styling-text","title":"Styling Text","text":"<p>Text styling can be one of the most enjoyable aspects of web development! To add styling to the text, you can use properties like <code>color</code>, <code>font-size</code>, and <code>font-family</code>.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Text Styling&lt;/title&gt;\n        &lt;link\n            href=\"https://fonts.googleapis.com/css2?family=Amatic+SC&amp;family=Chakra+Petch:wght@300&amp;display=swap\"\n            rel=\"stylesheet\"\n        /&gt;\n\n        &lt;style&gt;\n            body {\n                /* Changes the font style */\n                font-family: \"Amatic SC\", cursive;\n                /*Changes the alignment of text */\n                text-align: center;\n            }\n            h1 {\n                /* Changes the color of text */\n                color: olivedrab;\n                /* Changes the size of text */\n                font-size: 60px;\n                /* Adds shadow styling to text */\n                text-shadow: 10px 10px 10px greenyellow;\n            }\n            p {\n                text-align: left;\n                font-family: \"Chakra Petch\", sans-serif;\n                font-size: 20px;\n                /*Changes the height of text */\n                line-height: 25px;\n                width: 50%;\n                margin: auto;\n                padding: 10px;\n            }\n            span {\n                /* Adds decoration to text */\n                text-decoration: line-through;\n                text-decoration-color: red;\n                padding: 10px;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;h1&gt;Hello!&lt;/h1&gt;\n            &lt;h2&gt;Welcome to my website!&lt;/h2&gt;\n            &lt;img src=\"tacos.png\" /&gt;\n\n            &lt;p&gt;\n                Every day is taco ipsum tuesday. Fish tacos: lettuce or cabbage,\n                pico de gallo, avocado and a sour cream or citrus/mayonnaise\n                sauce, all placed on top of a corn or flour tortilla. Tacos,\n                again? This will be 5 times this week and it\u2019s only Tuesday. 50\n                cent tacos! I\u2019ll take 30. It\u2019s raining tacos, from out of the\n                sky, tacos, don\u2019t even ask why.\n            &lt;/p&gt;\n\n            &lt;p&gt;\n                Um, &lt;span&gt;Tabasco? &lt;/span&gt;No thanks, do you have any Cholula?\n                Shrimp tacos are tasty tacos! Does guac cost extra? Tacos Al\n                pastor/De Adobada are made of thin pork steaks seasoned with\n                adobo seasoning, then skewered and overlapped on one another on\n                a vertical rotisserie cooked and flame-broiled as it spins.\n                Carne asada on corn tortillas. Give me all the tacos,\n                immediately.\n            &lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - Fundamental Text and Font Styling</li> <li>web.dev - Text and Typography</li> </ul>"},{"location":"css/css/#values-and-units","title":"Values and Units","text":"<p>There are different types of values that CSS properties accept with varying units of measurement for those values.</p>"},{"location":"css/css/#size-units","title":"Size Units","text":"<p>When measuring size, we generally use <code>px</code> (pixels) or <code>%</code> (percentage):</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Measuring Size&lt;/title&gt;\n\n        &lt;style&gt;\n\n            /*\n            *   The `width` and `height` properties measure the size of the box, \n            *   so `px` is a good unit of measurement.\n            */\n            #red-box {\n                width: 200px;\n                height: 200px;\n                background-color: red;\n            }\n\n            /*\n            *   The `%` unit is nice when you want something sized relative\n            *   to something else. Since the #blue-box is inside the #red-box\n            *   this will build a blue box that is exactly half the width and \n            *   height of the red box.\n            */\n            #blue-box {\n                width: 50%;\n                height: 50%;\n                background-color: blue;\n            }\n\n            /*\n            *   The `%` unit also works well with the `border-radius` property\n            *   when you want to build a circle out of a `&lt;div&gt;`.\n            */\n            #green-circle {\n                width: 200px;\n                height: 200px;\n                border-radius: 50%;\n                background-color: green;\n            }\n\n            /*\n            *   The `font-size` property measures how big the font will\n            *   be, and this is also a size which makes sense in `px`.\n            */\n            #about-me {\n                font-size: 24px;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id=\"red-box\"&gt;\n            &lt;div id=\"blue-box\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"green-circle\"&gt;&lt;/div&gt;\n        &lt;p id=\"about-me\"&gt;I like to code, eat tacos, and read!&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"css/css/#color-units","title":"Color Units","text":"<p>Measuring color is generally done using a color keyword, hex value, or RGB value. The color keywords are easier to read but give you less control over the final color. The hex/RGB values are harder to read but give you many more options for coloring an element.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Measuring Color&lt;/title&gt;\n\n        &lt;style&gt;\n            /*\n            *   Using a color keyword like `red` makes it easy to read \n            *   which color an element will be.\n            */\n            #red-box {\n                width: 200px;\n                height: 200px;\n                background-color: red;\n            }\n\n            /*\n            *   The `rgb()` function allows you to express a color as\n            *   a mix of three numbers:\n            *\n            *   1. The amount of red in the color\n            *   2. The amount of green in the color\n            *   3. The amount of blue in the color\n            */\n            #blue-box {\n                width: 50%;\n                height: 50%;\n                background-color: rgb(54, 54, 233);\n            }\n               /*\n            *   The `rgba()` function allows you to express a color as\n            *   a mix of three numbers with the addition of Alpha value\n                which allows for the color to become transparent:\n            *   \n            *   1. The amount of red in the color\n            *   2. The amount of green in the color\n            *   3. The amount of blue in the color\n                4. Decimal value between 0 and 1\n            */\n            #pink-box {\n                width: 50%;\n                height: 50%;\n                background-color: rgba(54, 54, 233, 0.4);\n            }\n\n            /*\n            *   Hexadecimal values (Hex for short) can express the same\n            *   variations in color that `rgb()` values do, but in a more\n            *   concise notation.\n            */\n            #green-circle {\n                width: 200px;\n                height: 200px;\n                border-radius: 50%;\n                background-color: #40ff73;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id=\"red-box\"&gt;\n            &lt;div id=\"blue-box\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"pink-box\"&gt;&lt;/div&gt;\n        &lt;div id=\"green-circle\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"css/css/#time-units","title":"Time Units","text":"<p>For animations, you need to be able to measure the amount of time an animation should run. This uses the <code>s</code> (seconds) unit of measurement:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Measuring Time&lt;/title&gt;\n\n        &lt;style&gt;\n            /*\n            *   The `animation-duration` property is measured in seconds.\n            */\n            #red-box {\n                width: 200px;\n                height: 200px;\n                position: absolute;\n                background-color: red;\n                animation-name: backAndForth;\n                animation-duration: 3s;\n                animation-iteration-count: infinite;\n                animation-direction: alternate;\n            }\n\n            @keyframes backAndForth {\n                from {\n                    left: 0px;\n                }\n\n                to {\n                    left: 200px;\n                }\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id=\"red-box\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"css/css/#measurements-without-units","title":"Measurements Without Units","text":"<p>Some properties don't have a unit of measurement but instead use a regular number. The <code>opacity</code> property is one of the common properties you'll use that use a regular number instead of a unit.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Measurements With No Units&lt;/title&gt;\n\n        &lt;style&gt;\n            .box {\n                width: 200px;\n                height: 200px;\n                background-color: red;\n                margin: 12px;\n            }\n\n            /*\n            *   This will allow 25% of the background to shine through\n            *   the red box.\n            */\n            #box-1 {\n                opacity: 0.75;\n            }\n\n            /*\n            *   This will allow 50% of the background to shine through\n            *   the red box.\n            */\n            #box-2 {\n                opacity: 0.5;\n            }\n\n            /*\n            *   This will allow 75% of the background to shine through\n            *   the red box.\n            */\n            #box-3 {\n                opacity: 0.25;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id=\"box-1\" class=\"box\"&gt;&lt;/div&gt;\n        &lt;div id=\"box-2\" class=\"box\"&gt;&lt;/div&gt;\n        &lt;div id=\"box-3\" class=\"box\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - Values and Units</li> <li>web.dev - Sizing Units</li> <li>CSS Tricks - The Lengths of CSS</li> </ul>"},{"location":"css/css/#working-with-backgrounds","title":"Working with Backgrounds","text":"<p>HTML elements can have colors, images, or both as their backgrounds:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Working with Backgrounds&lt;/title&gt;\n\n        &lt;style&gt;\n            .box {\n                width: 200px;\n                height: 200px;\n                border: 1px solid black;\n                margin: 10px auto;\n            }\n\n            /*\n            *   The `background-color` property allows you to add a\n            *   color to the entire background of an element.\n            */\n            #box-1 {\n                background-color: red;\n            }\n\n            /*\n            *   The `background-image` property allows you to add an\n            *   image to the background. It will repeat by default if\n            *   it is smaller than the box it is contained in.\n            */\n            #box-2 {\n                background-image: url(taco.png);\n            }\n\n            /*\n            *   The `background-repeat` and `background-position` properties\n            *   give you more control over a background image in an element.\n            */\n            #box-3 {\n                background-image: url(hot-dog.jpeg);\n                background-repeat: no-repeat;\n                background-position: center;\n                background-color: blue;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id=\"box-1\" class=\"box\"&gt;&lt;/div&gt;\n        &lt;div id=\"box-2\" class=\"box\"&gt;&lt;/div&gt;\n        &lt;div id=\"box-3\" class=\"box\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - Backgrounds and Borders</li> <li>web.dev - Backgrounds</li> <li>CSS Tricks - Using Multiple Backgrounds</li> </ul>"},{"location":"css/css/#css-animations","title":"CSS Animations","text":"<p>CSS <code>animation</code> properties allow you to create animation on elements. </p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Animations&lt;/title&gt;\n\n        &lt;style&gt;\n            .animate {\n              width: 200px;\n              height: 200px;\n              margin: auto;\n              position: absolute;\n\n          }\n          #green-circle {\n              border-radius: 50%;\n              background-color: #40ff73;\n              box-shadow: inset -5px -5px 10px rgb(57, 57, 57);\n              /* shorthand animation property combines all 6 animation properties */\n              /* duration easing-function delay iteration-count direction name */\n              animation: 1s ease-in 1s infinite alternate bounce;\n\n          }\n          #red-box {\n              border-radius: 10%; \n              top: 100px;\n              left: 600px;\n              background-color: #ff1141;\n              box-shadow: inset 5px 5px 10px rgb(57, 57, 57);\n              background-image: linear-gradient(rgb(255, 173, 187), rgb(80, 255, 211));\n              /* longhand animation properties*/\n              animation-name: rotate_box;\n              animation-duration: 4s;\n              animation-iteration-count: infinite;\n              animation-direction: alternate-reverse;\n          }\n          /* @keyframes controls the steps of the animations */\n          @keyframes bounce {\n              from {\n                top: 0px;\n              }\n              to {\n                top: 400px;\n                box-shadow: inset -5px -5px 10px rgb(57, 57, 57), -5px 10px 20px black;\n              }\n          }\n\n          @keyframes rotate_box {\n              0% {\n                transform: rotate(0deg);\n              }\n\n              50% {\n                width: 150px;\n                height: 150px;   \n              }\n              100% {\n                  transform: rotate(180deg);\n                  background-image: linear-gradient( rgb(80, 255, 211), rgb(255, 173, 187));\n              }\n          }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;div class=\"animate\" id=\"red-box\"&gt;&lt;/div&gt;\n            &lt;div class=\"animate\" id=\"green-circle\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"html/html/","title":"HTML Language","text":"<p>HTML (HyperText Markup Language) is used to define the structure of a webpage. Think of it like the frame of a house. When you visit a website, an HTML page is what the browser parses to display all of the content on the page!</p> <p>We use HTML in the following courses at CWHQ:</p> Elementary Middle School High School Fundamental Programming Concepts Webpages with HTML &amp; CSS Fundamentals of Web Development Web Development For Kids - 1 Capstone 1 User Interface Development Web Development For Kids - 2 User Interface Development Capstone 1 Creating Websites with HTML/CSS Responsive Web Development APIs and Databases Responsive Websites with HTML/CSS Interactive JavaScript Professional Web App Development Interactive Websites with JavaScript Web Interfaces Modern CSS Frameworks Capstone 3 Capstone 2 Capstone 2 Mastering APIs Mastering MVC Framework Capstone 3 Object Relational Mapping DevOps and Software Engineering Capstone 3 <p>In this section of our documentation, you'll find references to most of the core HTML language features that we use in our CodeWizardsHQ courses.</p> <p>You'll also find many Further reading sections, which pull from this excellent HTML resource:</p> <ul> <li>MDN HTML Docs</li> </ul>"},{"location":"html/html/#basic-html-structure","title":"Basic HTML Structure","text":"<p>HTML documents have a standard basic form which looks like this:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;[INSERT TILE HERE]&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;!-- INSERT HTML CONTENT TAGS HERE --&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"html/html/#the-doctype-tag","title":"The <code>DOCTYPE</code> tag","text":"<p>The <code>DOCTYPE</code> is the first tag in an HTML document, and it's required to ensure the browser parses an HTML document correctly. If you leave it out, strange things can happen depending on the user's browser settings:</p> <pre><code>&lt;!DOCTYPE html&gt;\n</code></pre>"},{"location":"html/html/#the-html-tag","title":"The <code>&lt;html&gt;</code> tag","text":"<p>The <code>&lt;html&gt;</code> tag is used to hold the contents of an HTML document, which will consist of a <code>&lt;head&gt;</code> and a <code>&lt;body&gt;</code>. The HTML document ends at the <code>&lt;/html&gt;</code> tag.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;!-- Everything in here is part of the HTML document --&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"html/html/#the-head-tag","title":"The <code>&lt;head&gt;</code> tag","text":"<p>The <code>&lt;head&gt;</code> tag is used to hold information about the HTML document that shouldn't appear on the page (like the title, character encoding, etc.) and is also used to pull in external resources (like CSS or JavaScript).</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;!-- This is for information about the document or linking external resources --&gt;\n    &lt;/head&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"html/html/#the-title-tag","title":"The <code>&lt;title&gt;</code> tag","text":"<p>The <code>&lt;title&gt;</code> tag appears in the browser tab and should be included in all HTML documents.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;This appears in the browser tab&lt;/title&gt;\n    &lt;/head&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"html/html/#the-body-tag","title":"The <code>&lt;body&gt;</code> tag","text":"<p>The <code>&lt;body&gt;</code> tag holds all of the HTML content that will appear on the page. This is the content you want the user to see.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;This appears in the browser tab&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;h1&gt;This appears on the page&lt;/h1&gt;\n        &lt;p&gt;So does this&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - Anatomy of an HTML Document</li> </ul>"},{"location":"html/html/#common-additions-to-the-basic-html-structure","title":"Common Additions To The Basic HTML Structure","text":"<p>If you explore HTML documents on your favorite websites, you'll see that there are many variations on the basic HTML structure shown above. We'll discuss a few common additional tags that you'll see at CWHQ in this section, such as the <code>&lt;style&gt;</code>, <code>&lt;link&gt;</code>, <code>&lt;script&gt;</code>, and <code>&lt;meta&gt;</code> tags.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Common Additions To The Basic HTML Structure&lt;/title&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n        &lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;\n        &lt;script src=\"game-logic.js\"&gt;&lt;/script&gt;\n        &lt;style&gt;\n            h1 {\n                color: red;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;h1&gt;This appears on the page, and is red!&lt;/h1&gt;\n        &lt;p&gt;\n            This appears on the page and is black (the default color for text)\n        &lt;/p&gt;\n\n        &lt;script&gt;\n            var paragraphElement = document.createElement(\"p\");\n            paragraphElement.textContent = \"I can build HTML from JavaScript!\";\n\n            document.body.append(paragraphElement);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"html/html/#the-meta-tag","title":"The <code>&lt;meta&gt;</code> tag","text":"<p>The <code>&lt;meta&gt;</code> tag can be used to add different information about the document, such as the author, character encoding, whether it should be responsive to different screen sizes, etc. In the example below, we tell the browser that it should be responsive to different screen sizes using the <code>&lt;meta&gt;</code> tag:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Common Additions To The Basic HTML Structure&lt;/title&gt;\n        &lt;!-- Please take into consideration the device I'm being viewed on \n        for sizing things! --&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"html/html/#the-link-tag","title":"The <code>&lt;link&gt;</code> tag","text":"<p>The <code>&lt;link&gt;</code> tag is commonly used to include an external CSS stylesheet, either from your own filesystem or externally from somewhere like Google Fonts. In the example below, we include a stylesheet from our filesystem called <code>style.css</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Common Additions To The Basic HTML Structure&lt;/title&gt;\n        &lt;!-- Include all the CSS style rules from `style.css` in this \n        HTML document --&gt;\n        &lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"html/html/#the-script-tag","title":"The <code>&lt;script&gt;</code> tag","text":"<p>You can include a <code>&lt;script&gt;</code> tag in the <code>&lt;head&gt;</code> or at the end of the <code>&lt;body&gt;</code> in an HTML document. If you use the <code>src</code> attribute, the <code>&lt;script&gt;</code> tag pulls JavaScript data from an external file. If you don't use the <code>src</code> attribute, you write the JavaScript directly in the HTML document.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Common Additions To The Basic HTML Structure&lt;/title&gt;\n        &lt;!-- Please add the JavaScript code from `game-logic.js` into\n        this file --&gt;\n        &lt;script src=\"game-logic.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;!-- Add all HTML content here --&gt;\n\n        &lt;script&gt;\n            // This JavaScript logic can be written directly in the HTML file\n            var paragraphElement = document.createElement(\"p\");\n            paragraphElement.textContent = \"I can build HTML from JavaScript!\";\n\n            document.body.append(paragraphElement);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"html/html/#the-style-tag","title":"The <code>&lt;style&gt;</code> tag","text":"<p>The <code>&lt;style&gt;</code> tag can be used to add CSS directly in an HTML document instead of pulling it from an external file.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Common Additions To The Basic HTML Structure&lt;/title&gt;\n        &lt;!-- Please add these CSS styles to anything in the `&lt;body&gt;` that\n        I target with a CSS selector --&gt;\n        &lt;style&gt;\n            h1 {\n                color: red;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;h1&gt;This appears on the page, and is red!&lt;/h1&gt;\n        &lt;p&gt;\n            This appears on the page and is black (the default color for text)\n        &lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Further Reading</p> <ul> <li>MDN - Metadata in HTML</li> </ul>"},{"location":"html/html/#elements-give-text-meaning","title":"Elements Give Text Meaning","text":"<p>HTML elements (or tags) that you use in the <code>&lt;body&gt;</code> of an HTML document should be used to give text structure and meaning. Use the right tag for the right job!</p> <p>For example, the <code>&lt;p&gt;</code> tag is used to display generic text while the <code>&lt;h1&gt;</code> tag is used to display the top-level title or headline of your page. You use the <code>&lt;img&gt;</code> tag to display images.</p>"},{"location":"html/html/#well-structured-html","title":"Well-Structured HTML","text":"<p>If we were making a page about tacos and wanted to have a title, some text, and an image, this would be a good structure:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Tacos - Homepage&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;h1&gt;My Favorite Taco&lt;/h1&gt;\n        &lt;p&gt;\n            I think that all tacos are amazing, but my favorite is probably the\n            Carne Asada taco. It's filled with steak, and you can add\n            onions/cilantro/lime to the top. You can optionally add guacamole as\n            well, which I highly recommend!\n        &lt;/p&gt;\n        &lt;img src=\"taco.jpg\" /&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"html/html/#poorly-structured-html","title":"Poorly-Structured HTML","text":"<p>In contrast, we could make the same page like this:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Tacos - Homepage&lt;/title&gt;\n        &lt;style&gt;\n            p {\n                font-size: 42px;\n            }\n            h1 {\n                font-size: 16px;\n            }\n            #taco-image {\n                background-image: url(taco.jpg);\n                background-size: contain;\n                background-repeat: no-repeat;\n                width: 500px;\n                height: 500px;\n                display: block;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;p&gt;My Favorite Taco&lt;/p&gt;\n        &lt;h1&gt;\n            I think that all tacos are amazing, but my favorite is probably the\n            Carne Asada taco. It's filled with steak, and you can add\n            onions/cilantro/lime to the top. You can optionally add guacamole as\n            well, which I highly recommend!\n        &lt;/h1&gt;\n        &lt;span id=\"taco-image\"&gt;&lt;/span&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>This is not well-structured HTML because we're not using the right element for the right job anywhere! Instead, we're trying to use CSS to make the <code>&lt;p&gt;</code> tag big and the <code>&lt;h1&gt;</code> tag small, and the <code>&lt;span&gt;</code> is holding an image instead of an <code>&lt;img&gt;</code> tag. Why use all of that CSS when you could use the natural element for the job? As a rule, always structure your page with the correct tags first, and then you can add CSS to style them later.</p>"},{"location":"html/html/#two-broad-categories-of-elements","title":"Two Broad Categories Of Elements","text":"<p>HTML elements fall into two broad categories, block-level and inline-level. Block-level elements appear on their own lines, and inline-level elements do not.</p>"},{"location":"html/html/#block-level-elements","title":"Block-Level Elements","text":"<p>Some standard block elements are <code>&lt;p&gt;</code>, all of the heading tags (<code>&lt;h1&gt;</code> through <code>&lt;h6&gt;</code>), the <code>&lt;div&gt;</code>, <code>&lt;form&gt;</code> elements, and many more:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Block-Level Elements&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;h1&gt;All headings are block-level elements.&lt;/h1&gt;\n        &lt;p&gt;Paragraph tags too.&lt;/p&gt;\n        &lt;form&gt;\n            &lt;p&gt;Everything in this form is a single block&lt;/p&gt;\n            &lt;input placeholder=\"Enter your name\" /&gt;\n            &lt;button&gt;Submit&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"html/html/#inline-level-elements","title":"Inline-Level Elements","text":"<p>Some standard inline elements are <code>&lt;span&gt;</code>, <code>&lt;img&gt;</code>, <code>&lt;button&gt;</code>, and <code>&lt;input&gt;</code> elements, along with many others:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Inline-Level Elements&lt;/title&gt;\n        &lt;style&gt;\n            span {\n                color: red;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;h1&gt;All headings are block-level elements.&lt;/h1&gt;\n\n        &lt;p&gt;\n            The &lt;span&gt;span element is inline.&lt;/span&gt;We also added some CSS to\n            make it stand out.\n        &lt;/p&gt;\n\n        &lt;form&gt;\n            &lt;p&gt;\n                Everything in this form is a single block, but notice how the\n                input, image, and button are all on the same line.\n            &lt;/p&gt;\n            &lt;img src=\"taco.jpg\" /&gt;\n            &lt;input placeholder=\"Enter your name\" /&gt;\n            &lt;button&gt;Submit&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"html/html/#directory-navigation","title":"Directory Navigation","text":"<p>When linking external files like images, audio, video, or JavaScript/CSS, you need to understand where the asset is located in your project folder. Programmers generally call folders directories, and we'll use that term throughout this section.</p>"},{"location":"html/html/#example-directory-structure","title":"Example Directory Structure","text":"<p>Consider the following directory structure:</p> <pre><code>my-website\n\u251c\u2500\u2500 home\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 home.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 never-gonna-give-you-up.mp3\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 scripts\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 loader.js\n\u251c\u2500\u2500 images\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 profile-pic.jpg\n\u2514\u2500\u2500 style.css\n</code></pre> <p><code>my-website</code> is what's known as the root of this directory tree. To navigate to directories or files in this directory tree, you use a path, which is a series of directories/files separated by <code>/</code> characters.</p>"},{"location":"html/html/#examples-of-different-directory-paths","title":"Examples Of Different Directory Paths","text":"<p>There are a four common ways to navigate between directories:</p> <ol> <li>Downwards</li> <li>Upwards</li> <li>Upwards and Downwards</li> <li>Same Directory</li> </ol> <p>If we're thinking from <code>index.html</code> for all of these examples, then <code>loader.js</code> is downwards from that file.</p> <p>So, the path to <code>loader.js</code> from <code>index.html</code> is:</p> <pre><code>scripts/loader.js\n</code></pre> <p>You can also navigate upward using <code>../</code>.</p> <p>So, the path from <code>index.html</code> to <code>style.css</code> is:</p> <pre><code>../style.css\n</code></pre> <p>Navigating upwards and downwards combines the two techniques shown above.</p> <p>So, the path from <code>index.html</code> to <code>profile-pic.jpg</code> is:</p> <pre><code>../images/profile-pic.jpg\n</code></pre> <p>Finally, if the asset you want to include is in the same project folder, you don't need any <code>/</code> or <code>../</code>, you just reference the name of the asset.</p> <p>So, the path from <code>index.html</code> to <code>never-gonna-give-you-up.mp3</code> is:</p> <pre><code>never-gonna-give-you-up.mp3\n</code></pre> <p>Putting this all together, here's how we could include <code>loader.js</code>, <code>style.css</code>, <code>profile-pic.jpg</code>, and <code>never-gonna-give-you-up.mp3</code> in our <code>index.html</code> file:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Home&lt;/title&gt;\n        &lt;link href=\"../style.css\" rel=\"stylesheet\" /&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;h1&gt;Directory Navigation Example&lt;/h1&gt;\n            &lt;img src=\"../images/profile-pic.jpg\" /&gt;\n            &lt;audio src=\"never-gonna-give-you-up.mp3\" controls&gt;&lt;/audio&gt;\n        &lt;/div&gt;\n        &lt;script src=\"scripts/loader.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"html/html/#html-element-references","title":"HTML Element References","text":"<p>Below are some of the common HTML Elements you may use:</p> Element Description <code>&lt;html&gt;</code> Holds content of HTML Document <code>&lt;head&gt;</code> Holds information about the HTML Document <code>&lt;title&gt;</code> Title appears on browser tab <code>&lt;body&gt;</code> Holds all HTML Content <code>&lt;link&gt;</code> Link external resource like CSS stylesheet <code>&lt;meta&gt;</code> Holds metadata about document <code>&lt;style&gt;</code> Apply CSS styling to elements <code>&lt;h1&gt; - &lt;h6&gt;</code> 6 levels of section headings <code>&lt;div&gt;</code> Creates a division within the HTML Document <code>&lt;br&gt;</code> Line Break <code>&lt;ol&gt;</code> Defines an Ordered List <code>&lt;ul&gt;</code> Defines an Unordered List <code>&lt;li&gt;</code> Defines list items <code>&lt;p&gt;</code> Defines paragraphs in the document <code>&lt;a&gt;</code> Creates hyperlink to other webpages <code>&lt;audio&gt;</code> Add audio <code>&lt;img&gt;</code> Add images <code>&lt;video&gt;</code> Add video <code>&lt;iframe&gt;</code> Embeds other HTML pages in the current webpage <code>&lt;script&gt;</code> Embeds or refers to Javascript in the document <code>&lt;table&gt;</code> Create tables <code>&lt;form&gt;</code> Create a section for submitting a form <code>&lt;button&gt;</code> Adds a button used for interactivity <code>&lt;input&gt;</code> Creates an input field <code>&lt;select&gt;</code> Creates drop down menu <code>&lt;option&gt;</code> Defines an item within the select element"},{"location":"html/html/#attributes","title":"Attributes","text":"<p>HTML attributes allow you to provide additional information about each element. Here are a few examples of common attributes:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Attributes&lt;/title&gt;\n        &lt;link href=\"style.css\" rel=\"stylesheet\" /&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;h1 style=\"color: green;\"&gt;Tacos!!&lt;/h1&gt;\n\n            &lt;hr /&gt;\n            &lt;img src=\"tacos.png\" id=\"taco\" /&gt;\n            &lt;hr /&gt;\n\n            &lt;p contenteditable=\"true\"&gt;This paragraph can be edited!&lt;/p&gt;\n\n            &lt;a href=\"tacos.html\"&gt; Click here for more tacos! &lt;/a&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - Attributes</li> </ul>"},{"location":"html/html/#body-text","title":"Body Text","text":"<p>In the <code>&lt;body&gt;</code> of an HTML document, you can add elements that contain text which the user sees on the page. The <code>&lt;p&gt;</code> tag is a generic text element, but you can also use elements like <code>&lt;em&gt;</code>, <code>&lt;strong&gt;</code> and <code>&lt;cite&gt;</code> to give your body text meaning.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Body Text&lt;/title&gt;\n        &lt;link href=\"style.css\" rel=\"stylesheet\" /&gt;\n        &lt;style&gt;\n            em {\n                color: red;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;p&gt;\n               &lt;em&gt;Coding&lt;/em&gt; teaches children how to resolve complex problems by breaking them down into smaller problems. A mastery of this process, called decomposition, is an integral life skill that benefits students whether they pursue a profession in technology or in any other field. Making mistakes, testing work, and correcting errors give kids the confidence to move beyond the problem with resilience.\"\n            &lt;/p&gt;\n            &lt;p&gt;\n                 Learning to code is often described as tackling a new language and it may seem that this translation of symbols and information stems from the language processing part of the brain. &lt;strong&gt; Computer programming &lt;/strong&gt;is also thought to employ the same skills as learning complex math problems, thereby exercising the left hemisphere.\n             &lt;/p&gt;\n             &lt;p&gt;\n                 Read more\n                 &lt;cite&gt;&lt;a href=\"https://www.codewizardshq.com/coding-cognitive-development/\"&gt;4 Ways That Coding Fuels Cognitive Development&lt;/a&gt;&lt;cite&gt;\n             &lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - HTML Text Fundamentals</li> </ul>"},{"location":"html/html/#comments","title":"Comments","text":"<p>HTML comments allow us to write notes, hide content, and disable code in the event of a bug. They are not visible to viewers of your HTML page unless they view the page's source code.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Comments&lt;/title&gt;\n        &lt;link href=\"style.css\" rel=\"stylesheet\" /&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;!-- This is an important note! --&gt;\n\n            &lt;h1&gt;HTML Comments&lt;/h1&gt;\n\n            &lt;!-- &lt;p&gt; This tag is now \"turned off\" &lt;/p&gt; --&gt;\n\n            &lt;!-- You can also make \n            multi-line comments as well! \n            --&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - Comments</li> </ul>"},{"location":"html/html/#containers","title":"Containers","text":"<p>HTML containers allow you to divide your content into sections. The <code>&lt;div&gt;</code> element is a good illustration of how to divide two containers. They can use the class property to share styling, but they can also have their own styling and content.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Containers&lt;/title&gt;\n        &lt;link href=\"style.css\" rel=\"stylesheet\" /&gt;\n        &lt;style&gt;\n            .division {\n                display: inline-block;\n                text-align: center;\n            }\n            #team1 {\n                background-color: rgba(255, 0, 0, 0.466);\n            }\n            #team2 {\n                background-color: rgba(30, 0, 255, 0.425);\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;div class=\"division\" id=\"team1\"&gt;\n                &lt;h2&gt;Bob&lt;/h2&gt;\n                &lt;img src=\"monster1.png\" /&gt;\n                &lt;p&gt;Rank: 50&lt;/p&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"division\" id=\"team2\"&gt;\n                &lt;h2&gt;Jack&lt;/h2&gt;\n                &lt;img src=\"monster2.png\" /&gt;\n                &lt;p&gt;Rank: 100&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - Non-semantic Wrappers</li> </ul>"},{"location":"html/html/#forms-and-buttons","title":"Forms and Buttons","text":"<p>You can create a form section to submit information using the HTML <code>&lt;form&gt;</code> element. The <code>&lt;input&gt;</code> element is used within the form element, and the <code>type</code> attribute can be used to display different types of inputs. We are also using the <code>&lt;button&gt;</code> tag to submit the form. </p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Forms and Buttons&lt;/title&gt;\n        &lt;link href=\"style.css\" rel=\"stylesheet\" /&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;h2&gt;Contact&lt;/h2&gt;\n            &lt;form&gt;\n                &lt;input\n                    type=\"text\"\n                    placeholder=\"Enter Name\"\n                    id=\"name\"\n                    required\n                /&gt;\n                &lt;input\n                    type=\"email\"\n                    id=\"senderEmail\"\n                    placeholder=\"Enter Email\"\n                    required\n                /&gt;\n                &lt;input\n                    type=\"number\"\n                    id=\"senderNumber\"\n                    placeholder=\"Enter Number\"\n                    required\n                /&gt;\n                &lt;label&gt;Choose Programming Language&lt;/label&gt;\n                &lt;select&gt;\n                    &lt;option&gt;Javascript&lt;/option&gt;\n                    &lt;option&gt;Python&lt;/option&gt;\n                    &lt;option&gt;Java&lt;/option&gt;\n                &lt;/select&gt;\n                &lt;button&gt;Submit&lt;/button&gt;\n            &lt;/form&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - Forms</li> </ul>"},{"location":"html/html/#heading-elements","title":"Heading Elements","text":"<p>HTML headings allow you to define headings using section levels. <code>&lt;h1&gt;</code> Represents the highest level <code>&lt;h6&gt;</code> represents the lowest level.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Headings&lt;/title&gt;\n        &lt;link href=\"style.css\" rel=\"stylesheet\" /&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;div class=\"info\"&gt;\n                &lt;!-- Note: Using only one h1 is recommended --&gt;\n                &lt;h1&gt;Welcome to my page!&lt;/h1&gt;\n                &lt;h2&gt;Bob the &lt;em&gt;Epic&lt;/em&gt; programmer!&lt;/h2&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"section2\"&gt;\n                &lt;h3&gt;Favorite Programming Languages&lt;/h3&gt;\n                &lt;p&gt;Javascript&lt;/p&gt;\n                &lt;p&gt;Python&lt;/p&gt;\n\n                &lt;h4&gt;Favorite Games&lt;/h4&gt;\n                &lt;p&gt;Roblox&lt;/p&gt;\n                &lt;p&gt;Minecraft&lt;/p&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"projects\"&gt;\n                &lt;h5&gt;Python Project&lt;/h5&gt;\n                &lt;a href=\"pythonproject.html\"&gt;Link&lt;/a&gt;\n                &lt;h6&gt;Javascript Project&lt;/h6&gt;\n                &lt;a href=\"javascriptproject.html\"&gt;Link&lt;/a&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - Headings and Paragraphs</li> </ul>"},{"location":"html/html/#image-video-and-audio","title":"Image, Video and Audio","text":"<p>The <code>&lt;img&gt;</code>, <code>&lt;video&gt;</code>, <code>&lt;audio&gt;</code> elements can be used to embed specific media. The <code>src</code> attribute is used by all elements.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Image, Video and Audio&lt;/title&gt;\n        &lt;link href=\"style.css\" rel=\"stylesheet\" /&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;h1&gt;Taco Party!&lt;/h1&gt;\n\n            &lt;!-- This image is located in the child folder images --&gt;\n            &lt;img src=\"images/tacos.png\" /&gt;\n\n            &lt;!-- The Video Element uses additional attributes controls and poster --&gt;\n            &lt;video\n                src=\"videos/tacos.mp4\"\n                controls\n                poster=\"images/tacos.png\"\n            &gt;&lt;/video&gt;\n\n            &lt;!-- The Audio Element uses additional attributes controls, loop, autoplay --&gt;\n            &lt;audio\n                src=\"audio/never-gonna-give-you-up.mp3\"\n                controls\n                loop\n                autoplay\n            &gt;&lt;/audio&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - Images in HTML</li> <li>MDN - Video and Audio Content</li> </ul>"},{"location":"html/html/#line-break-elements","title":"Line Break Elements","text":"<p>For creating breaks in the content, use the line break <code>&lt;br&gt;</code> tag or the <code>&lt;hr&gt;</code> tag, which makes a horizontal line break.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Line Break&lt;/title&gt;\n        &lt;link href=\"style.css\" rel=\"stylesheet\" /&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;h1&gt; Line Break &lt;/h1&gt;\n\n            &lt;hr&gt;\n\n            &lt;img src=\"taco.jpg\" /&gt;\n\n            &lt;p&gt;  The line break &lt;br&gt; tag or the &lt;hr&gt; tag, which generates a horizontal line break, are two more useful single tag elements. &lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - The Line Break Element</li> </ul>"},{"location":"html/html/#links","title":"Links","text":"<p>HTML Links allow you to link to other webpages using <code>&lt;a&gt;</code> tag with the <code>href</code> attribute.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Links&lt;/title&gt;\n        &lt;link href=\"style.css\" rel=\"stylesheet\" /&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;!-- Inline vs Block Links --&gt;\n\n            &lt;!-- Inline --&gt;\n            &lt;a href=\"https://www.codewizardshq.com\"&gt; CodeWizardsHQ &lt;/a&gt;\n\n            &lt;!-- Block, makes the &lt;img&gt; tag clickable --&gt;\n            &lt;a href=\"https://www.codewizardshq.com\"&gt;\n                &lt;img src=\"cwhq.png\" id=\"cwhq\" /&gt;\n            &lt;/a&gt;\n\n            &lt;!-- \n                Document fragment by id, will jump to the section \n                of the document with the `summer` id \n            --&gt;\n            &lt;a href=\"#summer\"&gt;Check out our Program Section!&lt;/a&gt;\n            &lt;p id=\"summer\"&gt;Elementary, Middle School, High School&lt;/p&gt;\n\n            &lt;hr /&gt;\n            &lt;!-- Relative vs Absolute URLs --&gt;\n\n            &lt;!-- Relative URL --&gt;\n            &lt;a href=\"index/index.html\"\n                &gt;This will link us to a file within the same directory.&lt;/a\n            &gt;\n\n            &lt;!-- Absolute URL  --&gt;\n            &lt;a href=\"https://www.codewizardshq.com\"\n                &gt;This will link us to any web page using the absolute url.&lt;/a\n            &gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - Creating hyperlinks</li> </ul>"},{"location":"html/html/#list-elements","title":"List Elements","text":"<p>HTML lists allow you to make a structured list. Both list elements use the <code>&lt;li&gt;</code> tag to define each item.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Lists&lt;/title&gt;\n        &lt;link href=\"style.css\" rel=\"stylesheet\" /&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;!-- \n                This is an unordered list element. The items on this list \n                will be bulleted. \n            --&gt;\n            &lt;div class=\"list1\"&gt;\n                &lt;h1&gt;Favorite Foods&lt;/h1&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;Tacos&lt;/li&gt;\n                    &lt;li&gt;Pasta&lt;/li&gt;\n                    &lt;li&gt;Pizza&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/div&gt;\n\n            &lt;!-- \n                This is an ordered list element. The 'type' attribute can \n                be used to adjust the order of this list, which can be \n                either alphabetical or numerical.  \n            --&gt;\n            &lt;div class=\"list2\"&gt;\n                &lt;h1&gt;Favorite Snacks&lt;/h1&gt;\n                &lt;ol&gt;\n                    &lt;li&gt;Dark Chocolate&lt;/li&gt;\n                    &lt;li&gt;Sugar Cookies&lt;/li&gt;\n                    &lt;li&gt;BBQ Chips&lt;/li&gt;\n                &lt;/ol&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - Lists</li> </ul>"},{"location":"html/html/#nesting-elements","title":"Nesting Elements","text":"<p>Elements can be nested inside each other. This is most common with elements like the <code>&lt;div&gt;</code> and <code>&lt;form&gt;</code>, but you can also nest other tags, like adding content inside the <code>&lt;a&gt;</code> tag to make elements into links:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Nesting Elements&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;h2&gt;It's common to nest things inside of a div.&lt;/h2&gt;\n            &lt;p&gt;Especially when you want content to be grouped together.&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;form&gt;\n            &lt;p&gt;\n                Forms rely on input elements being nested inside them so the\n                information can be sent to a webserver\n            &lt;/p&gt;\n            &lt;input placeholder=\"Enter your name\" /&gt;\n            &lt;input placeholder=\"Enter your password\" /&gt;\n            &lt;button&gt;Login&lt;/button&gt;\n        &lt;/form&gt;\n\n        &lt;a href=\"https://www.example.com\"&gt;\n            &lt;p&gt;You can nest stuff inside of anchor tags to create links.&lt;/p&gt;\n            &lt;p&gt;\n                Click on anything in this green box to get taken to\n                www.example.com\n            &lt;/p&gt;\n            &lt;img src=\"taco.jpg\" /&gt;\n        &lt;/a&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"html/html/#single-tag-elements","title":"Single Tag Elements","text":"<p>Elements can also be single tag elements. There is no need for a closing tag for these tags because there is no content between them. The most common single tag elements are <code>&lt;img&gt;</code> and <code>&lt;link&gt;</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Single Tag Elements&lt;/title&gt;\n        &lt;link href=\"style.css\" rel=\"stylesheet\" /&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;h1&gt; Below is the img tag, which uses the src attribute to display the image &lt;/h1&gt;\n\n            &lt;hr&gt;\n\n            &lt;img src=\"taco.jpg\" /&gt;\n\n            &lt;p&gt; The line break &lt;br&gt; tag or the &lt;hr&gt; tag, which generates a horizontal line break, are two more useful single tag elements. &lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"html/html/#table","title":"Table","text":"<p>You can use the following table elements to create a structured table.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Tables&lt;/title&gt;\n        &lt;link href=\"style.css\" rel=\"stylesheet\" /&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;h1&gt;Tables&lt;/h1&gt;\n            &lt;table&gt;\n                &lt;!-- Table Row --&gt;\n                &lt;tr&gt;\n                    &lt;!-- Table Headers  --&gt;\n                    &lt;th&gt;Name&lt;/th&gt;\n                    &lt;th&gt;Subject&lt;/th&gt;\n                    &lt;th&gt;Grade&lt;/th&gt;\n                &lt;/tr&gt;\n\n                &lt;tr&gt;\n                    &lt;!-- Table Data --&gt;\n                    &lt;td&gt;Bob&lt;/td&gt;\n                    &lt;td&gt;Math&lt;/td&gt;\n                    &lt;td&gt;85&lt;/td&gt;\n                &lt;/tr&gt;\n\n                &lt;tr&gt;\n                    &lt;!-- Table Data --&gt;\n                    &lt;td&gt;Abigail&lt;/td&gt;\n                    &lt;td&gt;Programming&lt;/td&gt;\n                    &lt;td&gt;99&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/table&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - Table Basics</li> </ul>"},{"location":"javascript/browser-apis-and-jquery/","title":"Browser APIs and jQuery","text":"<p>JavaScript is the language that powers the interactive web! We use JavaScript as the primary language in these courses at CodeWizardsHQ:</p> Elementary Middle School High School Interactive Websites with JavaScript Interactive JavaScript Fundamentals of Web Development Capstone 3 Web Interfaces User Interface Development Capstone 2 Capstone 1 Mastering APIs APIs and Databases Capstone 3 Capstone 2 DevOps and Software Engineering Capstone 3 <p>In this section of our documentation, you'll find references on how to use the built-in browser APIs and the <code>jQuery</code> library to manipulate webpages.</p> <p>You'll also find many Further reading sections, which pull from these excellent JavaScript resources:</p> <ul> <li>MDN JavaScript Docs</li> <li>The Modern JavaScript Tutorial</li> <li>Eloquent JavaScript</li> <li>Learn jQuery</li> <li>jQuery API</li> </ul>"},{"location":"javascript/browser-apis-and-jquery/#adding-javascript-to-webpages","title":"Adding JavaScript to Webpages","text":"<p>JavaScript programs at CWHQ are all run in a web browser, and they need to be included in an HTML document in order to run in the browser. There are several ways to do this, which will be outlined below.</p>"},{"location":"javascript/browser-apis-and-jquery/#using-a-script-tag-in-the-body","title":"Using a <code>&lt;script&gt;</code> tag in the <code>&lt;body&gt;</code>","text":"<p>The <code>&lt;script&gt;</code> tag is used to insert JavaScript programs directly into an HTML page. You should make the <code>&lt;script&gt;</code> tag the last tag in the <code>&lt;body&gt;</code> of an HTML document:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Inserting JavaScript with a script tag in the body&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;h1&gt;This is HTML&lt;/h1&gt;\n        &lt;script&gt;\n            // Everything in here is JavaScript\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"javascript/browser-apis-and-jquery/#using-a-script-tag-in-the-head","title":"Using a <code>&lt;script&gt;</code> tag in the <code>&lt;head&gt;</code>","text":"<p>You can link an external JavaScript file to an HTML document using the <code>&lt;script&gt;</code> tag in the <code>&lt;head&gt;</code> of the document:</p> <p>my-awesome-script.js</p> <pre><code>console.log(\"Hello, world!\");\n</code></pre> <p>index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Inserting JavaScript with a script tag in the head&lt;/title&gt;\n        &lt;script src=\"my-awesome-script.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;h1&gt;This is HTML&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Further Reading</p> <ul> <li>MDN - Use JavaScript Within A Webpage</li> <li>The Modern JavaScript Tutorial - Hello World</li> <li>Eloquent JavaScript - HTML and JavaScript</li> </ul>"},{"location":"javascript/browser-apis-and-jquery/#adding-jquery-to-webpages","title":"Adding jQuery to Webpages","text":"<p>The <code>jQuery</code> library is not part of the core Browser APIs and must be loaded in the <code>&lt;head&gt;</code> of your HTML document. You can find the most recent version of the <code>jQuery</code> library on their website. Generally, you want the minified version of the library, as that has all the core functionality in a smaller payload (which improves browser load times).</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Adding jQuery to a webpage&lt;/title&gt;\n        &lt;script\n            src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n            integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;h1&gt;This is HTML&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Further Reading</p> <ul> <li>Using jQuery With A CDN</li> </ul>"},{"location":"javascript/browser-apis-and-jquery/#using-the-browsers-dev-tools","title":"Using The Browser's Dev Tools","text":"<p>When working with JavaScript, the developer tools (dev tools for short) are your best friend! You should spend some time reading the documentation for the dev tools in your browser of choice.</p> <p>We'll use Chrome in these examples, and they have excellent documentation here.</p>"},{"location":"javascript/browser-apis-and-jquery/#the-javascript-console","title":"The JavaScript console","text":"<p>Once you've opened the dev tools in your browser of choice (look up how to do it for your browser) you'll have access to a Console tab. You can write JavaScript code here to test things out:</p> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#modifying-the-dom-from-the-console","title":"Modifying the DOM from the console","text":"<p>You have access to the DOM on the page and can edit it from the Console tab, just like if you were in a JavaScript program:</p> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#debugging-errors-from-the-console","title":"Debugging errors from the console","text":"<p>If something is not working as you expect, you should open the Console tab in the dev tools and see if there are any errors. This can save you hours of debugging time if you learn to do it well!</p> <p>Often, you'll be given a link that opens the offending file and points at the exact line that caused the issue, as in this example:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Daniel's Homepage&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;h1&gt;\n            Daniel Schroeder - Code Wizard and Semi-Professional Pug Wrestler\n        &lt;/h1&gt;\n\n        &lt;!-- HTML abbreviated since it's not important --&gt;\n\n        &lt;script&gt;\n            function thisHasAnError() {\n                // uh oh, this will throw an error!\n                vra rightBehindThis;\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#testing-variables-and-functions-from-the-console","title":"Testing variables and functions from the console","text":"<p>You have access to any global variables and functions in the Console tab and can mess around with them to see if they are doing what you expect:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Daniel's Homepage&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;h1&gt;\n            Daniel Schroeder - Code Wizard and Semi-Professional Pug Wrestler\n        &lt;/h1&gt;\n\n        &lt;!-- HTML abbreviated since it's not important --&gt;\n\n        &lt;script&gt;\n            var myFavoriteFood = \"Tacos\";\n\n            function sayHello(name) {\n                console.log(\"Hello, \" + name);\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>Using the Chrome Devtools</li> </ul>"},{"location":"javascript/browser-apis-and-jquery/#adding-elements-to-a-webpage","title":"Adding Elements To A Webpage","text":"<p>jQuery has two methods to add elements to a webpage. One adds the element before the selected element and one adds it after.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Adding Elements To A Webpage&lt;/title&gt;\n        &lt;script\n            src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n            integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n        &lt;style&gt;\n            button {\n                margin: 48px auto;\n                font-size: 24px;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id=\"button-1-container\"&gt;\n            &lt;button id=\"button-1\"&gt;Button 1&lt;/button&gt;\n        &lt;/div&gt;\n\n        &lt;button onclick=\"addButtonBefore();\"&gt;\n            Add a button before button 1\n        &lt;/button&gt;\n        &lt;button onclick=\"addButtonAfter();\"&gt;Add a button after button 1&lt;/button&gt;\n\n        &lt;script&gt;\n            var button1Container = $(\"#button-1-container\");\n\n            function addButtonBefore() {\n                button1Container.prepend(\"&lt;button&gt;Before Button 1&lt;/button&gt;\");\n            }\n\n            function addButtonAfter() {\n                button1Container.append(\"&lt;button&gt;After Button 1&lt;/button&gt;\");\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#animations","title":"Animations","text":""},{"location":"javascript/browser-apis-and-jquery/#animate","title":"<code>animate()</code>","text":"<p>jQuery's <code>animate()</code> method allows us to create animations on CSS properties.</p> <p>Function signature:</p> <p><code>animate(properties, duration, callback)</code></p> <p>Parameters:</p> <ul> <li><code>properties</code> (<code>object</code>): The CSS properties to animate</li> <li><code>duration</code> (<code>number</code>): The duration of the animation in milliseconds (optional)</li> <li><code>callback</code> (<code>function</code>): The function to call once animation completes (optional)</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Animations&lt;/title&gt;\n        &lt;script\n            src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n            integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;div class=\"object\" id=\"one\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            function tinyFadeOut() {\n                var animateCSS = {\n                    opacity: 0,\n                };\n                $(\".object\").animate(animateCSS);\n            }\n\n            $(\".object\").click(tinyFadeOut);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#setting-an-animation-time","title":"Setting an animation time","text":"<p>You can optionally pass in the time (in milliseconds) that an animation should run as the second parameter to the <code>animate()</code> method:</p> <pre><code>function tinyFadeOut() {\n    var animateCSS = {\n        opacity: 0,\n    };\n    // Here we can control the duration of the animation\n    var animationTime = 5000; // 5 seconds\n\n    $(\".object\").animate(animateCSS, animationTime);\n}\n\n$(\".object\").click(tinyFadeOut);\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#running-a-function-when-the-animation-finishes","title":"Running a function when the animation finishes","text":"<p>You can optionally pass a function as the third argument to <code>animate()</code>. This function will run when the animation is complete:</p> <pre><code>function moveRight() {\n    var animateCSS = {\n        // Here we are adding 200px to the left property\n        left: \"+=200\",\n    };\n    var animationTime = 5000;\n    // Once the animation is complete, we run the callback function `moveLeft()`\n    $(\".object\").animate(animateCSS, animationTime, moveLeft);\n}\n\nfunction moveLeft() {\n    var animateCSS = {\n        // Here we are subtracting 200px to the left property\n        left: \"-=200\",\n    };\n    $(\".object\").animate(animateCSS);\n}\n\n$(\".object\").click(moveRight);\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>jQuery API - .animate()</li> <li>Learn jQuery - Custom Effects with .animate()</li> </ul>"},{"location":"javascript/browser-apis-and-jquery/#jquery-events","title":"jQuery Events","text":"<p>The following event methods handle events on our webpage. They all have a similar function signature (except the <code>on()</code> method):</p> <pre><code>$(\"cssSelector\").methodName(callbackFunction);\n</code></pre>"},{"location":"javascript/browser-apis-and-jquery/#change","title":"<code>change()</code>","text":"<p>The <code>change()</code> method will execute a function when the input value has changed.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;The Change Event&lt;/title&gt;\n        &lt;script\n            src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n            integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;button id=\"name\"&gt;Click&lt;/button&gt;\n            &lt;h1 id=\"heading\"&gt;Welcome!&lt;/h1&gt;\n            &lt;span class=\"material-icons-outlined\" id=\"wave\"&gt; waving_hand &lt;/span&gt;\n            &lt;form&gt;\n                &lt;input\n                    type=\"text\"\n                    placeholder=\"Enter Wizard Name\"\n                    id=\"wizardName\"\n                    autocomplete=\"off\"\n                /&gt;\n                &lt;input id=\"sub\" type=\"submit\" value=\"Submit\" /&gt;\n            &lt;/form&gt;\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            function vanishInput() {\n                $(\"form\").fadeOut();\n            }\n\n            /*\n             *   Run the `vanishInput()` function when any `&lt;input&gt;`\n             *   element in the `&lt;form&gt;` is changed.\n             */\n            $(\"form\").change(vanishInput);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#click","title":"<code>click()</code>","text":"<p>The <code>click()</code> method allows you to execute a function when element is clicked.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;The Click Event&lt;/title&gt;\n        &lt;script\n            src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n            integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;button id=\"name\"&gt;Click&lt;/button&gt;\n            &lt;h1 id=\"heading\"&gt;Welcome!&lt;/h1&gt;\n            &lt;span class=\"material-icons-outlined\" id=\"wave\"&gt; waving_hand &lt;/span&gt;\n\n            &lt;form&gt;\n                &lt;input\n                    type=\"text\"\n                    placeholder=\"Enter Wizard Name\"\n                    id=\"wizardName\"\n                    autocomplete=\"off\"\n                /&gt;\n                &lt;input id=\"sub\" type=\"submit\" value=\"Submit\" /&gt;\n            &lt;/form&gt;\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            function clickHeading() {\n                $(\"#heading\").show();\n                $(\"form\").show();\n            }\n\n            /*\n             *   When the button with the id of `name` is clicked,\n             *   the `clickHeading()` function will run.\n             */\n            $(\"#name\").click(clickHeading);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#hover","title":"<code>hover()</code>","text":"<p>The <code>hover()</code> method allows you to execute a function when the cursor hovers over an element.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;The Hover Event&lt;/title&gt;\n        &lt;script\n            src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n            integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;button id=\"name\"&gt;Click&lt;/button&gt;\n            &lt;h1 id=\"heading\"&gt;Welcome!&lt;/h1&gt;\n            &lt;span class=\"material-icons-outlined\" id=\"wave\"&gt; waving_hand &lt;/span&gt;\n\n            &lt;form&gt;\n                &lt;input\n                    type=\"text\"\n                    placeholder=\"Enter Wizard Name\"\n                    id=\"wizardName\"\n                    autocomplete=\"off\"\n                /&gt;\n                &lt;input id=\"sub\" type=\"submit\" value=\"Submit\" /&gt;\n            &lt;/form&gt;\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            function turnToGold() {\n                var headingCSS = {\n                    color: \"gold\",\n                };\n                $(\"#heading\").css(headingCss);\n            }\n\n            /*\n             *   When you hover over the element with the id of `#heading`,\n             *   call the `turnToGold()` function.\n             */\n            $(\"#heading\").hover(turnToGold);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#mousemove","title":"<code>mousemove()</code>","text":"<p>The <code>mousemove()</code> method allows you to execute a function when the mouse moves on top of the given element.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;The Mousemove Event&lt;/title&gt;\n        &lt;script\n            src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n            integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;button id=\"name\"&gt;Click&lt;/button&gt;\n            &lt;h1 id=\"heading\"&gt;Welcome!&lt;/h1&gt;\n            &lt;span class=\"material-icons-outlined\" id=\"wave\"&gt; waving_hand &lt;/span&gt;\n\n            &lt;form&gt;\n                &lt;input\n                    type=\"text\"\n                    placeholder=\"Enter Wizard Name\"\n                    id=\"wizardName\"\n                    autocomplete=\"off\"\n                /&gt;\n                &lt;input id=\"sub\" type=\"submit\" value=\"Submit\" /&gt;\n            &lt;/form&gt;\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            function changeLogo() {\n                var changeLogoCSS = {\n                    color: \"blue\",\n                };\n                $(\"#wave\").css(changeLogoCSS);\n            }\n\n            /*\n             *   When the mouse moves around the element with an\n             *   id of `#wave`, run the `changeLogo()` function.\n             */\n            $(\"#wave\").mousemove(changeLogo);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#mouseover","title":"<code>mouseover()</code>","text":"<p>The <code>mouseover()</code> method allows you to execute a function when the mouse is over the element.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;The Mouseover Event&lt;/title&gt;\n        &lt;script\n            src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n            integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;button id=\"name\"&gt;Click&lt;/button&gt;\n            &lt;h1 id=\"heading\"&gt;Welcome!&lt;/h1&gt;\n            &lt;span class=\"material-icons-outlined\" id=\"wave\"&gt; waving_hand &lt;/span&gt;\n\n            &lt;form&gt;\n                &lt;input\n                    type=\"text\"\n                    placeholder=\"Enter Wizard Name\"\n                    id=\"wizardName\"\n                    autocomplete=\"off\"\n                /&gt;\n                &lt;input id=\"sub\" type=\"submit\" value=\"Submit\" /&gt;\n            &lt;/form&gt;\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            function changeLogo() {\n                var changeLogoCSS = {\n                    fontSize: \"100px\",\n                };\n                $(\"#wave\").animate(changeLogoCSS, \"2s\");\n            }\n\n            /*\n             *   When the mouse moves over the element with an\n             *   id of `#wave`, run the `changeLogo()` function.\n             */\n            $(\"#wave\").mouseover(changeLogo);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#submit","title":"<code>submit()</code>","text":"<p>The <code>submit()</code> method allows you to submit form values.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Submitting Form Values&lt;/title&gt;\n        &lt;script\n            src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n            integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;button id=\"name\"&gt;Click&lt;/button&gt;\n            &lt;h1 id=\"heading\"&gt;Welcome!&lt;/h1&gt;\n            &lt;span class=\"material-icons-outlined\" id=\"wave\"&gt; waving_hand &lt;/span&gt;\n\n            &lt;form&gt;\n                &lt;input\n                    type=\"text\"\n                    placeholder=\"Enter Wizard Name\"\n                    id=\"wizardName\"\n                    autocomplete=\"off\"\n                /&gt;\n                &lt;input id=\"sub\" type=\"submit\" value=\"Submit\" /&gt;\n            &lt;/form&gt;\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            function submitWizardName(event) {\n                event.preventDefault();\n                var wizardName = $(\"#wizardName\").val();\n                $(\"#heading\").text(`Welcome ${wizardName}!`);\n            }\n\n            /*\n             *   When the `&lt;form&gt;` is submitted, run the\n             *   the `submitWizardName()` function.\n             */\n            $(\"form\").submit(submitWizardName);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#on","title":"<code>on()</code>","text":"<p>The <code>on()</code> method allows you to run any event on an element.</p> <p>Syntax:</p> <pre><code>$(\"cssSelector\").on(\"eventName\", callbackFunction);\n</code></pre> <p>Example Output:</p> <pre><code>function clickedBody() {\n    alert(\"You clicked on the body!\");\n}\n\n$(\"body\").on(\"click\", clickedBody);\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#off","title":"<code>off()</code>","text":"<p>To remove any events from an element use the <code>off()</code> method</p> <pre><code>function removeEvent() {\n    $(\"body\").off(\"click\");\n    alert(\"Click has been deactivated!\");\n}\n\n// setTimeout() will call removeEvent() after 5000 milliseconds(5 seconds)\nsetTimeout(removeEvent, 5000);\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>Learn jQuery - Events</li> </ul>"},{"location":"javascript/browser-apis-and-jquery/#getting-and-setting-an-elements-content","title":"Getting And Setting An Element's Content","text":""},{"location":"javascript/browser-apis-and-jquery/#elementtextcontent","title":"<code>element.textContent</code>","text":"<p>The <code>textContent</code> property sets or returns the text content of an element.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Changing The Text Of An Element&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;div class=\"object\" id=\"one\"&gt;One&lt;/div&gt;\n            &lt;div class=\"object\" id=\"two\"&gt;Two&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;script&gt;\n            function changeText() {\n                var element = document.querySelector(\"#one\");\n                /*\n                 * Here we are setting the text content of the element with the\n                 * id `one` to the new text.\n                 */\n                element.textContent = \"New Text\";\n            }\n\n            changeText();\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#elementtext","title":"<code>$(element).text()</code>","text":"<p>jQuery's <code>text()</code> method allows you to get or set the text of an HTML element.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Setting The Text Of An Element&lt;/title&gt;\n        &lt;script\n            src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n            integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;div class=\"container\"&gt;\n                &lt;div class=\"object\" id=\"one\"&gt;&lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;form&gt;\n                &lt;input\n                    type=\"text\"\n                    placeholder=\"Enter Wizard Name\"\n                    id=\"wizardName\"\n                    autocomplete=\"off\"\n                /&gt;\n                &lt;input id=\"sub\" type=\"submit\" value=\"Submit\" /&gt;\n            &lt;/form&gt;\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            function submitName(event) {\n                event.preventDefault();\n                var wizardName = $(\"#wizardName\").val();\n                /*\n                 * Here we are setting the text of element with the\n                 * ID `one` to the value of the input text in the `&lt;input&gt;`.\n                 */\n                $(\"#one\").text(`Welcome ${wizardName}!`);\n            }\n\n            $(\"form\").submit(submitName);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#elementinnerhtml","title":"<code>element.innerHtml</code>","text":"<p>The <code>innerHtml</code> property sets or returns the HTML of an element.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Changing The HTML Of An Element&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;div class=\"container\"&gt;\n                &lt;div class=\"object\" id=\"one\"&gt;One&lt;/div&gt;\n                &lt;div class=\"object\" id=\"two\"&gt;Two&lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;script&gt;\n            // Here we are adding an HTML element to the existing .container element\n            var element3 = document.querySelector(\".container\");\n            element3.innerHTML += \"&lt;div class='object'&gt;Three&lt;/div&gt;\";\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#elementhtml","title":"<code>$(element).html()</code>","text":"<p>jQuery's <code>html()</code> method allows you to change the <code>innerHTML</code> of an element.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Changing The HTML Of An Element&lt;/title&gt;\n        &lt;script\n            src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n            integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n\n        &lt;style&gt;\n            #one {\n                color: blue;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;div class=\"container\"&gt;\n                &lt;div class=\"object\" id=\"one\"&gt;One&lt;/div&gt;\n                &lt;div class=\"object\" id=\"two\"&gt;Two&lt;/div&gt;\n                &lt;button id=\"change-html-button\"&gt;Submit&lt;/button&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;script&gt;\n            function changeHTML() {\n                /*\n                 * Here we are returning the HTML of the element with the\n                 * ID `one` and replacing the HTML of the element with the\n                 * id `two`.\n                 */\n                var newContent = $(\"#one\").html();\n                $(\"#two\").html(newContent);\n            }\n\n            $(\"#change-html-button\").click(changeHTML);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#elementvalue","title":"<code>element.value</code>","text":"<p>When using <code>&lt;form&gt;</code> elements like <code>&lt;input&gt;</code> and <code>&lt;textarea&gt;</code>, the <code>element.value</code> property gives you the text inside the element. You can also use this to set the value of a <code>&lt;form&gt;</code> element's text.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Getting The Value Of A Form Element&lt;/title&gt;\n        &lt;style&gt;\n            form {\n                width: 256px;\n                margin: 100px auto;\n            }\n\n            #greeting {\n                text-align: center;\n                margin-top: 12px;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;form&gt;\n            &lt;input type=\"text\" id=\"username\" /&gt;\n            &lt;button&gt;Register&lt;/button&gt;\n            &lt;div id=\"greeting\"&gt;&lt;/div&gt;\n        &lt;/form&gt;\n\n        &lt;script&gt;\n            var usernameElement = document.querySelector(\"#username\");\n            var formElement = document.querySelector(\"form\");\n            var greetingElement = document.querySelector(\"#greeting\");\n\n            formElement.addEventListener(\"submit\", registerUser);\n\n            function registerUser(event) {\n                event.preventDefault();\n                var username = usernameElement.value;\n                greetingElement.textContent = `Greetings ${username}!`;\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#elementval","title":"<code>$(element).val()</code>","text":"<p>jQuery's <code>.val()</code> method allows you to get or set the value of a <code>&lt;form&gt;</code> element such as an <code>&lt;input&gt;</code> or <code>&lt;textarea&gt;</code>.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Getting The Value Of A Form Element&lt;/title&gt;\n        &lt;script\n            src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n            integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n        &lt;style&gt;\n            form {\n                width: 256px;\n                margin: 100px auto;\n            }\n\n            #greeting {\n                text-align: center;\n                margin-top: 12px;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;form&gt;\n            &lt;input type=\"text\" id=\"username\" /&gt;\n            &lt;button&gt;Register&lt;/button&gt;\n            &lt;div id=\"greeting\"&gt;&lt;/div&gt;\n        &lt;/form&gt;\n\n        &lt;script&gt;\n            $(\"form\").on(\"submit\", registerUser);\n\n            function registerUser(event) {\n                event.preventDefault();\n                var username = $(\"#username\").val();\n                $(\"#greeting\").text(`Greetings ${username}!`);\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - textContent</li> <li>MDN - innerHTML</li> <li>MDN - HTMLDataElement.value</li> <li>Eloquent JavaScript - Node Properties</li> <li>Learn jQuery - Manipulating Elements</li> <li>jQuery API - text</li> <li>jQuery API - html</li> <li>jQuery API - val</li> </ul>"},{"location":"javascript/browser-apis-and-jquery/#getting-and-setting-attributes","title":"Getting and Setting Attributes","text":""},{"location":"javascript/browser-apis-and-jquery/#getattribute","title":"<code>getAttribute()</code>","text":"<p>The <code>getAttribute()</code> function allows you to access the attribute of an element</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Getting Attributes&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;div class=\"object\" id=\"one\"&gt;&lt;/div&gt;\n            &lt;img class=\"object\" id=\"two\" src=\"\" /&gt;\n            &lt;input type=\"text\" placeholder=\"Dog Name\" id=\"three\" /&gt;\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            var element = document.querySelector(\"#three\");\n\n            var elementAttribute = element.getAttribute(\"type\");\n            console.log(\"The input type is \" + elementAttribute);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Example Output:</p> <pre><code>The input type is text\n</code></pre>"},{"location":"javascript/browser-apis-and-jquery/#setattribute","title":"<code>setAttribute()</code>","text":"<p>The <code>setAttribute()</code> function allows you to set or update the attribute of an element</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Setting Attributes&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;div class=\"object\" id=\"one\"&gt;&lt;/div&gt;\n            &lt;img class=\"object\" id=\"two\" src=\"\" /&gt;\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            var imageElement = document.getElementById(\"two\");\n            imageElement.setAttribute(\"src\", \"dog.png\");\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Example Output:</p> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#attr","title":"<code>attr()</code>","text":"<p>jQuery's <code>attr()</code> function allows you access or add the attribute to an element</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Working With Attributes&lt;/title&gt;\n        &lt;script\n            src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n            integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;img class=\"object\" id=\"one\" src=\"\" /&gt;\n            &lt;img class=\"object\" id=\"two\" src=\"\" /&gt;\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            function clickedPicture(event) {\n                var clicked = event.target;\n\n                // Here we are grabbing the id attribute of the clicked image\n                var id = $(clicked).attr(\"id\");\n\n                if (id == \"one\") {\n                    $(\"#one\").attr(\"src\", \"dog.jpg\");\n                } else if (id == \"two\") {\n                    $(\"#two\").attr(\"src\", \"cat.jpg\");\n                }\n            }\n            $(\".object\").click(clickedPicture);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#using-attributes-as-properties","title":"Using attributes as properties","text":"<p>When you select an element from the DOM, there are many properties that live on the element. These can be accessed with dot notation (.), and some common attributes (like <code>style</code>, <code>id</code>, and <code>src</code>) are easy to get and set as a property.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Setting Attributes Through Element Properties&lt;/title&gt;\n        &lt;script\n            src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n            integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;img class=\"object\" id=\"one\" src=\"\" /&gt;\n            &lt;img class=\"object\" id=\"two\" src=\"\" /&gt;\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            var imageOne = document.getElementById(\"one\");\n            var imageTwo = document.getElementById(\"two\");\n\n            function clickedPicture(event) {\n                var clicked = event.target;\n\n                // Here we are grabbing the id attribute of the clicked image\n                var id = clicked.id;\n\n                if (id == \"one\") {\n                    // We can use the `src` attribute directly\n                    imageOne.src = \"dog.jpg\";\n                } else if (id == \"two\") {\n                    imageTwo.src = \"cat.jpg\";\n                }\n            }\n\n            $(\".object\").click(clickedPicture);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - getAttribute</li> <li>MDN - setAttribute</li> <li>The Modern JavaScript Tutorial - Attributes and Properties</li> <li>Eloquent JavaScript - Attributes</li> </ul>"},{"location":"javascript/browser-apis-and-jquery/#getting-the-size-and-position-of-an-element","title":"Getting the size and position of an element","text":"<p>The following properties return the size and position of an element:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Size &amp; Position&lt;/title&gt;\n        &lt;script\n            src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n            integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n        &lt;style&gt;\n            #one {\n                width: 300px;\n                height: 200px;\n                position: absolute;\n                left: 250px;\n                top: 100px;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;div class=\"object\" id=\"one\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            var element = document.querySelector(\"#one\");\n\n            // The offsetWidth property returns an integer value for an element's width.\n            var elementWidth = element.offsetWidth;\n            console.log(` Element width: ${elementWidth}px`);\n\n            // The offsetHeight property returns an integer value for an element's height.\n            var elementHeight = element.offsetHeight;\n            console.log(` Element height: ${elementHeight}px`);\n\n            // The offsetLeft property returns an integer value for an element's left position.\n            var elementLeft = element.offsetLeft;\n            console.log(` Element left position: ${elementLeft}px`);\n\n            // The offsetTop property returns an integer value for an element's top position.\n            var elementTop = element.offsetTop;\n            console.log(` Element top position: ${elementTop}px`);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Example Output:</p> <pre><code> Element width: 300px\n Element height: 200px\n Element left position: 250px\n Element top position: 100px\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>The Modern JavaScript Tutorial - Element Size and Scrolling</li> <li>Eloquent JavaScript - Layout</li> </ul>"},{"location":"javascript/browser-apis-and-jquery/#hiding-and-showing-elements","title":"Hiding and Showing Elements","text":"<p>jQuery has a few different methods for hiding/showing elements. Depending on your needs, you may want the element to fade in/out or not.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hiding and Showing Elements&lt;/title&gt;\n        &lt;script\n            src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n            integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n        &lt;style&gt;\n            button {\n                margin: 48px auto;\n                font-size: 24px;\n            }\n\n            #button-1 {\n                position: fixed;\n                top: 100px;\n                left: 400px;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;button id=\"button-1\"&gt;Button 1&lt;/button&gt;\n\n        &lt;button onclick=\"hideButton1();\"&gt;Hide Button 1&lt;/button&gt;\n        &lt;button onclick=\"showButton1();\"&gt;Show Button 1&lt;/button&gt;\n        &lt;button onclick=\"fadeOutButton1();\"&gt;Fade Out Button 1&lt;/button&gt;\n        &lt;button onclick=\"fadeInButton1();\"&gt;Fade In Button 1&lt;/button&gt;\n\n        &lt;script&gt;\n            var button1 = $(\"#button-1\");\n\n            function hideButton1() {\n                button1.hide();\n            }\n\n            function showButton1() {\n                button1.show();\n            }\n\n            function fadeOutButton1() {\n                button1.fadeOut();\n            }\n\n            function fadeInButton1() {\n                button1.fadeIn();\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#saving-items-in-localstorage","title":"Saving Items In localStorage","text":"<p>Web browsers allow you to save information in <code>localStorage</code>. This data will exist between page loads as long as the user doesn't clear the browser's cookies.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Adding Elements To A Webpage&lt;/title&gt;\n        &lt;script\n            src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n            integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;form&gt;\n            &lt;label for=\"username\"&gt;\n                Please enter your username:\n                &lt;input type=\"text\" id=\"username\" name=\"username\" /&gt;\n            &lt;/label&gt;\n            &lt;button type=\"submit\"&gt;Save Username&lt;/button&gt;\n        &lt;/form&gt;\n\n        &lt;div id=\"previous-users-container\"&gt;&lt;/div&gt;\n\n        &lt;script&gt;\n            $(\"form\").submit(saveUsername);\n\n            function saveUsername(event) {\n                event.preventDefault();\n\n                var username = $(\"#username\").val();\n                var nextUserNumber = localStorage.length;\n\n                localStorage.setItem(`userNumber-${nextUserNumber}`, username);\n\n                showPreviousUsers();\n            }\n\n            function showPreviousUsers() {\n                $(\"#previous-users-container\").html(\"\");\n                for (var i = 0; i &lt; localStorage.length; i++) {\n                    var username = localStorage.getItem(`userNumber-${i}`);\n                    $(\"#previous-users-container\").append(`&lt;p&gt;${username}&lt;/p&gt;`);\n                }\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#selecting-elements-from-html-documents","title":"Selecting Elements From HTML Documents","text":"<p>The <code>document</code> object allows you to interact with HTML documents from a JavaScript program. The most important thing you'll use the <code>document</code> object for is querying an HTML document for an element or elements. There are several methods to do this using the native <code>document</code> object. <code>jQuery</code> also provides a way to query HTML documents, and we'll cover both methods below.</p>"},{"location":"javascript/browser-apis-and-jquery/#getting-an-element-by-id","title":"Getting an element by <code>id</code>","text":"<p>The <code>document.getElementById()</code> method allows you to select an HTML element by it's <code>id</code> attribute:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Daniel's Homepage&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;!-- This is the element we'll grab from our JavaScript program --&gt;\n        &lt;h1 id=\"page-title\"&gt;\n            Daniel Schroeder - Code Wizard and Semi-Professional Pug Wrestler\n        &lt;/h1&gt;\n\n        &lt;!-- HTML abbreviated since it's not important --&gt;\n\n        &lt;script&gt;\n            // Get the #page-title element and store it in a variable\n            var pageTitleElement = document.getElementById(\"page-title\");\n            // Change the font color of the #page-title element\n            pageTitleElement.style.color = \"blue\";\n\n            // Can also do everything in one line\n            document.getElementById(\"page-title\").style.color = \"blue\";\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#getting-an-element-by-class-name","title":"Getting an element by <code>class name</code>","text":"<p>The <code>document.getElementsByClassName()</code> method allows you to return the selected HTML elements by it's class attribute:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Home&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;div class=\"object\"&gt;&lt;/div&gt;\n            &lt;div class=\"object\"&gt;&lt;/div&gt;\n            &lt;div class=\"object\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;script&gt;\n            // Return all elements with the class name of `object`\n            var allObjects = document.getElementsByClassName(\"object\");\n\n            // changeBackground() will change the background color of the clicked box\n            function changeBackgroundColor(event) {\n                box = event.currentTarget;\n                box.style.backgroundColor = \"#003566\";\n            }\n            // Here we are looping through each element and attaching an onclick event\n            for (var object of allObjects) {\n                object.onclick = changeBackgroundColor;\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#getting-an-element-by-tag-name","title":"Getting an element by <code>tag name</code>","text":"<p>The <code>document.getElementsByTagName()</code> method allows you to return the selected HTML elements by it's tag name:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Home&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;div class=\"object\"&gt;&lt;/div&gt;\n            &lt;div class=\"object\"&gt;&lt;/div&gt;\n            &lt;div class=\"object\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            // Return all elements with class name `object`\n            var allObjects = document.getElementsByTagName(\"div\");\n\n            // Add border color to all `&lt;div&gt;` tags\n            for (var object of allObjects) {\n                object.style.borderColor = \"#ffd60a\";\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#queryselector","title":"<code>querySelector()</code>","text":"<p>The <code>document.querySelector()</code> method allows you to return the first element with the given name:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Home&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;div class=\"object\"&gt;&lt;/div&gt;\n            &lt;div class=\"object\"&gt;&lt;/div&gt;\n            &lt;div class=\"object\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;script&gt;\n            // Return the first element with the class name of `object`\n            var firstElement = document.querySelector(\".object\");\n\n            /*\n             * Add color to the border of the first element with\n             * the class name `object`\n             */\n            firstElement.style.borderColor = \"red\";\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#queryselectorall","title":"<code>querySelectorAll()</code>","text":"<p>The <code>document.querySelectorAll()</code> method allows you to return a list of all elements with the given attribute:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Home&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;div class=\"object\"&gt;&lt;/div&gt;\n            &lt;div class=\"object\"&gt;&lt;/div&gt;\n            &lt;div class=\"object\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;script&gt;\n            // Return all elements with the class name of `object`\n            var allObjects = document.querySelectorAll(\".object\");\n\n            // Here we are looping through each element to change the `borderWidth`\n            for (var object of allObjects) {\n                object.style.borderWidth = \"20px\";\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#getting-elements-with-jquery","title":"Getting elements with <code>jQuery</code>","text":"<p>The <code>jQuery</code> library allows you to select elements with the <code>$()</code> function. You can add any valid CSS selector as the argument.</p> <p>Here, we use the <code>id</code> attribute to select a single element:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Daniel's Homepage&lt;/title&gt;\n        &lt;!-- Must include the jQuery library in the &lt;head&gt; --&gt;\n        &lt;script\n            src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n            integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;!-- This is the element we'll grab from our JavaScript program --&gt;\n        &lt;h1 id=\"page-title\"&gt;\n            Daniel Schroeder - Code Wizard and Semi-Professional Pug Wrestler\n        &lt;/h1&gt;\n\n        &lt;!-- HTML abbreviated since it's not important --&gt;\n\n        &lt;script&gt;\n            // Get the #page-title element and store it in a variable\n            var pageTitleElement = $(\"#page-title\");\n            // Change the font color of the #page-title element\n            pageTitleElement.attr(\"style\", \"color: blue\");\n\n            // Can also do everything in one line\n            $(\"#page-title\").attr(\"style\", \"color: blue\");\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>You can select multiple elements as well. For example, elements that all share the same <code>class</code> can be edited together like this:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Daniel's Homepage&lt;/title&gt;\n        &lt;!-- Must include the jQuery library in the &lt;head&gt; --&gt;\n        &lt;script\n            src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n            integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;!-- Other HTML abbreviated since it's not important --&gt;\n\n        &lt;div&gt;\n            &lt;h2&gt;About me&lt;/h2&gt;\n            &lt;!-- We'll grab these elements from JavaScript --&gt;\n            &lt;p class=\"likes\"&gt;I like to code&lt;/p&gt;\n            &lt;p class=\"likes\"&gt;I like tacos&lt;/p&gt;\n            &lt;p class=\"likes\"&gt;I like pugs&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            // Get the .likes elements and store them in a variable\n            var likesElements = $(\".likes\");\n            // Change the font color of all the .likes elements\n            likesElements.attr(\"style\", \"color: red\");\n\n            // Can also do everything in one line\n            $(\".likes\").attr(\"style\", \"color: red\");\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>The Modern JavaScript Tutorial - Searching DOM Elements</li> <li>Eloquent JavaScript - Finding Elements</li> <li>Learn jQuery - Selecting Elements</li> </ul>"},{"location":"javascript/browser-apis-and-jquery/#styling-dom-nodes","title":"Styling DOM Nodes","text":""},{"location":"javascript/browser-apis-and-jquery/#elementstyle","title":"<code>element.style</code>","text":"<p>The <code>style</code> property allows you to set or adjust an element's CSS styles from JavaScript.</p> <p>Note</p> <p>JavaScript syntax for accessing style properties differs from CSS syntax.</p> CSS Javascript background-color: blue; backgroundColor = \"blue\"; background-image: url(\"taco.png\"); backgroundImage = \"url(taco.png)\"; font-size: 40px; fontSize = \"40px\"; <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Changing An Element's Style&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;div class=\"object\" id=\"one\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            var element = document.getElementById(\"one\");\n\n            function changeStyle() {\n                element.style.borderColor = \"blue\";\n                element.style.backgroundImage =\n                    \"linear-gradient(blue,gold,black)\";\n            }\n\n            element.onclick = changeStyle;\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#elementcss","title":"<code>$(element).css()</code>","text":"<p>jQuery's <code>css()</code> method allows you to set or return the style of an element</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Changing An Element's Style&lt;/title&gt;\n        &lt;script\n            src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n            integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;div class=\"object\" id=\"one\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            function changeStyle() {\n                var boxCSS = {\n                    borderColor: \"blue\",\n                    backgroundImage: \"linear-gradient(black,blue,gold)\",\n                };\n                $(\".object\").css(boxCSS);\n            }\n\n            $(\".object\").click(changeStyle);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#elementaddclass-and-elementremoveclass","title":"<code>$(element).addClass()</code> and <code>$(element).removeClass()</code>","text":"<p>jQuery also has two methods for adding/removing classes on an element. These can be easier to use than other methods of styling DOM nodes from JavaScript since you can write the CSS in it's own file.</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Adding and Removing Classes&lt;/title&gt;\n        &lt;script\n            src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n            integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n        &lt;style&gt;\n            button {\n                margin: 48px auto;\n                font-size: 24px;\n            }\n\n            #button-1 {\n                position: fixed;\n                top: 100px;\n                left: 300px;\n            }\n\n            .red {\n                color: red;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;button id=\"button-1\"&gt;Button 1&lt;/button&gt;\n\n        &lt;button onclick=\"addRedClass();\"&gt;Add \".red\" class to button 1&lt;/button&gt;\n        &lt;button onclick=\"removeRedClass();\"&gt;\n            Remove \".red\" class from button 1\n        &lt;/button&gt;\n\n        &lt;script&gt;\n            var button1 = $(\"#button-1\");\n\n            function addRedClass() {\n                button1.addClass(\"red\");\n            }\n\n            function removeRedClass() {\n                button1.removeClass(\"red\");\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Further Reading</p> <ul> <li>MDN - style</li> <li>jQuery API - .css()</li> </ul>"},{"location":"javascript/browser-apis-and-jquery/#timers","title":"Timers","text":"<p>There are two <code>timer</code> functions that allow us to execute code at a later time.</p>"},{"location":"javascript/browser-apis-and-jquery/#settimeout","title":"<code>setTimeout()</code>","text":"<p>The <code>setTimeout()</code> function will execute a callback function after waiting for some amount time.</p> <p>Function signature:</p> <pre><code>var timeoutID = setTimeout(callbackFunction, milliseconds);\n</code></pre> <p>Parameters:</p> <ul> <li><code>callbackFunction</code> (<code>function</code>): The function you want to run after the given interval.</li> <li><code>milliseconds</code> (<code>number</code>): The amount of time before the <code>callbackFunction</code> should run.</li> </ul> <p>Returns:</p> <ul> <li>A numeric ID representing the eventual execution of the <code>callbackFunction</code>.</li> </ul> <p>Example usage:</p> <pre><code>function addCat() {\n    var catImage = document.getElementById(\"cat\");\n    catImage.style.opacity = 1;\n}\n\n// Execute the `addCat()` function after 10,000 milliseconds (10 seconds).\nsetTimeout(addCat, 10000);\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#setinterval","title":"<code>setInterval()</code>","text":"<p>The <code>setInterval()</code> function will execute a given callback function repeatedly over a set time interval.</p> <p>Function signature:</p> <pre><code>var intervalID = setInterval(callbackFunction, milliseconds);\n</code></pre> <p>Parameters:</p> <ul> <li><code>callbackFunction</code> (<code>function</code>): The function to run every given <code>milliseconds</code>.</li> <li><code>milliseconds</code> (<code>number</code>): The amount of time between each execution of <code>callbackFunction</code>.</li> </ul> <p>Returns:</p> <ul> <li>A numeric ID representing the interval executing the <code>callbackFunction</code>.</li> </ul> <p>Example Usage:</p> <pre><code>var likes = 0;\n\nfunction increaseCatLikes() {\n    likes++;\n    document.getElementById(\"likes\").textContent = likes;\n}\n\n// Execute the `increaseCatLikes()` function every 5,000 milliseconds (5 seconds).\nsetInterval(increaseCatLikes, 5000);\n</code></pre> <p></p>"},{"location":"javascript/browser-apis-and-jquery/#cleartimeout","title":"<code>clearTimeout()</code>","text":"<p>If you need to cancel execution of a callback function setup by <code>setTimeout()</code> or <code>setInterval()</code> use <code>clearTimeout()</code>. This function will require an <code>intervalID</code> parameter for the timeout or interval you are trying to clear.</p> <p>Function signature:</p> <pre><code>clearTimeout(intervalID);\n</code></pre> <p>Parameters:</p> <ul> <li><code>intervalID</code> (<code>number</code>): The interval ID returned from <code>setTimeout()</code> or <code>setInterval()</code>.</li> </ul> <p>Example usage:</p> <p>Here's how you can cancel a function that <code>setTimeout()</code> is going to execute:</p> <pre><code>function addCat() {\n    var catImage = document.getElementById(\"cat\");\n    catImage.style.opacity = 1;\n}\n\n// Execute the `addCat()` function after 10,000 milliseconds (10 seconds).\nvar catTimeoutID = setTimeout(addCat, 10000);\n\n/*\n *   This function could be run by another part of the script to cancel\n *   the execution fo the `addCat()` function. It would only work if the\n *   time interval (10 seconds) hand't already passed.\n */\nfunction stopAddCat() {\n    clearTimeout(catTimeoutID);\n}\n</code></pre> <p>Here's how you can cancel a function that <code>setInterval()</code> is running:</p> <pre><code>var likes = 0;\n\nfunction increaseCatLikes() {\n    likes++;\n    document.getElementById(\"likes\").textContent = likes;\n\n    if (likes == 20) {\n        alert(\"Interval cleared\");\n        // `clearInterval()` will stop executing `catLikes()` after 20 likes.\n        clearInterval(catIntervalID);\n    }\n}\n\nvar catIntervalID = setInterval(increaseCatLikes, 5000);\n</code></pre> <p>Further Reading</p> <ul> <li>The Modern JavaScript Tutorial - Scheduling</li> <li>Eloquent JavaScript - Timers</li> <li>MDN - setTimeout</li> <li>MDN - setInterval</li> </ul>"},{"location":"javascript/browser-apis-and-jquery/#play-pause-media","title":"Play / Pause Media","text":"<p>Javascript <code>play()</code> and <code>pause()</code> functions allow you to control media on your webpage.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Audio&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;img id=\"taco\" src=\"tacos.png\" /&gt;\n            &lt;audio\n                id=\"audio\"\n                src=\"audio/never-gonna-give-you-up.mp3\"\n                preload\n            &gt;&lt;/audio&gt;\n            &lt;button id=\"btn\" style=\"opacity: 0;\"&gt;Stop&lt;/button&gt;\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            var taco = document.getElementById(\"taco\");\n            var audio = document.getElementById(\"audio\");\n            var btn = document.getElementById(\"btn\");\n\n            function play() {\n                // currentTime property controls the playback position in seconds.\n                audio.currentTime = 0;\n                audio.play();\n                btn.style.opacity = 1;\n            }\n            function pause() {\n                audio.pause();\n            }\n\n            taco.onclick = play;\n            btn.onclick = pause;\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"javascript/browser-apis-and-jquery/#event-object","title":"Event Object","text":"<p>On a clicked element, we can access several properties, including the <code>target</code> property, by using the <code>event</code> object. This allows us to return the clicked element's HTML: </p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Event&lt;/title&gt;\n        &lt;style&gt;\n              #red-box {\n              width: 200px;\n              height: 200px;\n              margin: auto;\n              border-radius: 10%; \n              background-color: #ff1141;\n              box-shadow: inset -5px -5px 10px rgb(57, 57, 57);\n              background-image: linear-gradient(rgb(255, 173, 187), rgb(80, 255, 211));\n          }  \n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;h1&gt;Class name: &lt;/h1&gt;\n            &lt;div class=\"box\" id=\"red-box\"&gt;&lt;/div&gt;\n\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            var box = document.querySelector('.box')\n            var heading = document.querySelector('h1')\n\n            function clickedElement(event) {\n                // here we are accessing the clicked element\n                var clickedBox = event.target;\n                console.log(clickedBox)\n                /* here we changing the text \n                to show the class name of the clicked box \n                */\n                heading.textContent += clickedBox.className\n            }\n            box.onclick = clickedElement;\n\n\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/javascript-language/","title":"JavaScript Language","text":"<p>JavaScript is the language that powers the interactive web! We use JavaScript as the primary language in these courses at CodeWizardsHQ:</p> Elementary Middle School High School Interactive Websites with JavaScript Interactive JavaScript Fundamentals of Web Development Capstone 3 Web Interfaces User Interface Development Capstone 2 Capstone 1 Mastering APIs APIs and Databases Capstone 3 Capstone 2 DevOps and Software Engineering Capstone 3 <p>In this section of our documentation, you'll find references to most of the core JavaScript language features that we use in our CodeWizardsHQ courses.</p> <p>You'll also find many Further reading sections, which pull from these excellent JavaScript resources:</p> <ul> <li>MDN JavaScript Docs</li> <li>The Modern JavaScript Tutorial</li> <li>Eloquent JavaScript</li> </ul>"},{"location":"javascript/javascript-language/#comments","title":"Comments","text":"<p>Programmers use comments to make notes in their source code for themselves or other programmers that will read their code later. They can also be used to \"deactivate\" lines of code that you don't want to run while you're working on a program.</p>"},{"location":"javascript/javascript-language/#single-line-comments","title":"Single Line Comments","text":"<p>Single line comments are denoted by the <code>//</code> characters. You can put them above or to the right of the line of code they reference:</p> <pre><code>// Validate the user is logged in and redirect them to the appropriate page.\nif (isLoggedIn(user)) {\n    redirectToHomepage();\n} else {\n    redirectToLogin();\n}\n\nvar minHeight = 60; // This is measured in inches, not feet!\n</code></pre>"},{"location":"javascript/javascript-language/#deactivating-code","title":"Deactivating Code","text":"<p>You can deactivate sections of code with comments:</p> <pre><code>if (age &lt; 18) {\n    // Turning this off for now\n    // prompt_user();\n    redirectToKidZone();\n} else {\n    loginUser();\n}\n</code></pre>"},{"location":"javascript/javascript-language/#multiline-comments","title":"Multiline Comments","text":"<p>Multiline comments start with <code>/*</code> and end with <code>*/</code></p> <pre><code>/*\nThis calculates the hypotenuse of a right triangle when given the sides\nof the right triangle. It's the Pythagorean Theorem. The ** is how you\nwrite exponents in JavaScript, and fractional exponents are like roots,\nso 0.5 is the square root.\n*/\nvar hypotenuse = (sideA ** 2 + sideB ** 2) ** 0.5;\n</code></pre> <p>Many programmers prefer to put <code>*</code> on each line of a multiline comment and indent a bit for clarity:</p> <pre><code>/*\n *   This calculates the hypotenuse of a right triangle when given the sides\n *   of the right triangle. It's the Pythagorean Theorem. The ** is how you\n *   write exponents in JavaScript, and fractional exponents are like roots,\n *   so 0.5 is the square root.\n */\nvar hypotenuse = (sideA ** 2 + sideB ** 2) ** 0.5;\n</code></pre> <p>Further Reading</p> <ul> <li>MDN - JavaScript Basics: Comments</li> <li>Eloquent JavaScript - Comments</li> <li>The Modern JavaScript Tutorial - Comments</li> </ul>"},{"location":"javascript/javascript-language/#conditional-statements","title":"Conditional Statements","text":"<p>Conditional statements allow you to run a block of code when a boolean condition is true.</p>"},{"location":"javascript/javascript-language/#if","title":"<code>if</code>","text":"<p>The <code>if</code> statement is the simplest form of conditional statement. If the expression to the right of the <code>if</code> keyword is <code>true</code>, the code block will execute:</p> <pre><code>var isHungry = true;\n\nif (isHungry) {\n    console.log(\"You should eat!\");\n}\n</code></pre> <p>Example Output:</p> <pre><code>You should eat!\n</code></pre> <p>Usually, a conditional expression uses comparison operators to generate a <code>boolean</code> result:</p> <pre><code>var age = 19;\n\nif (age &gt;= 18) {\n    console.log(\"You are legally an adult, congrats!\");\n}\n</code></pre> <p>Example Output:</p> <pre><code>You are legally an adult, congrats!\n</code></pre>"},{"location":"javascript/javascript-language/#else-if","title":"<code>else if</code>","text":"<p>The <code>else if</code> conditional statement is used to group logically related conditional statements together. The first conditional expression that evaluates to <code>true</code> will run:</p> <pre><code>var favoriteFood = \"Tacos\";\n\nif (favoriteFood == \"Sushi\") {\n    console.log(\"We're going out for Japanese food to night!\");\n} else if (favoriteFood == \"Pasta\") {\n    console.log(\"How about we eat some Italian food tonight?\");\n} else if (favoriteFood == \"Tacos\") {\n    console.log(\"Time for some Mexican food!\");\n} else if (favoriteFood == \"Samosa\") {\n    console.log(\"Let's eat Indian food tonight!\");\n}\n</code></pre> <p>Example Output:</p> <pre><code>Time for some Mexican food!\n</code></pre>"},{"location":"javascript/javascript-language/#else","title":"<code>else</code>","text":"<p>The <code>else</code> conditional statement runs when all other conditional statements in a group are <code>false</code>. You can think of it as the default option:</p> <pre><code>var favoriteFood = \"Hot Dogs with Cream Cheese\";\n\nif (favoriteFood == \"Sushi\") {\n    console.log(\"We're going out for Japanese food to night!\");\n} else if (favoriteFood == \"Pasta\") {\n    console.log(\"How about we eat some Italian food tonight?\");\n} else if (favoriteFood == \"Tacos\") {\n    console.log(\"Time for some Mexican food!\");\n} else if (favoriteFood == \"Samosa\") {\n    console.log(\"Let's eat Indian food tonight!\");\n} else {\n    console.log(\"I don't know what that favorite food is!\");\n}\n</code></pre> <pre><code>I don't know what that favorite food is!\n</code></pre>"},{"location":"javascript/javascript-language/#comparison-operators","title":"<code>Comparison Operators</code>","text":"<p>Here are the comparison operators that you can use in conditional expressions to generate a <code>boolean</code> value:</p> Operator Description <code>&gt;</code> Greater-than <code>&gt;=</code> Greater-than or equal-to <code>&lt;</code> Less-than <code>&lt;=</code> Less-than or equal-to <code>==</code> Equal-to <code>!=</code> Not equal-to"},{"location":"javascript/javascript-language/#complex-conditional-statements","title":"<code>Complex Conditional Statements</code>","text":"<p>Complex conditional statements involve combining more than one conditional expression with logical operators:</p> <pre><code>var age = 15;\nvar heightInFeet = 4.6;\n\nif (age &gt;= 13 &amp;&amp; heightInFeet &gt; 5) {\n    console.log(\"You may ride the roller coaster.\");\n} else {\n    console.log(\"You may NOT ride the roller coaster.\");\n}\n</code></pre> <p>Example Output:</p> <pre><code>You may NOT ride the roller coaster.\n</code></pre> <p>You can string as many logical operators together as you want to build more complex conditional statements. Note that it's often easier to read and reason about if you surround each major section with parentheses, as in the example below:</p> <pre><code>var isHungry = false;\nvar isThirsty = true;\n\nvar foodAmount = 10;\nvar drinkAmount = 0;\n\nif ((isHungry &amp;&amp; foodAmount &gt; 0) || (isThirsty &amp;&amp; drinkAmount &gt; 0)) {\n    enterKitchen();\n} else {\n    playVideoGames();\n}\n</code></pre>"},{"location":"javascript/javascript-language/#logical-operators","title":"<code>Logical Operators</code>","text":"<p>Logical operators allow you to combine multiple conditional expressions in a single conditional statement:</p> Operator Description <code>&amp;&amp;</code> (and) <code>true</code> when both conditional expressions are <code>true</code> <code>||</code> (or) <code>true</code> when either conditional expression is <code>true</code> <code>!</code> (not) Reverses the value of a conditional expression"},{"location":"javascript/javascript-language/#using-the-operator","title":"Using the <code>&amp;&amp;</code> operator","text":"<p>The <code>&amp;&amp;</code> (and) operator evaluates to <code>true</code> when both conditional expressions are <code>true</code>:</p> <pre><code>var age = 15;\nvar heightInFeet = 5.2;\n\nif (age &gt;= 13 &amp;&amp; heightInFeet &gt; 5) {\n    console.log(\"You may ride the roller coaster.\");\n} else {\n    console.log(\"You may NOT ride the roller coaster.\");\n}\n</code></pre> <p>Example Output:</p> <pre><code>You may ride the roller coaster.\n</code></pre>"},{"location":"javascript/javascript-language/#using-the-operator_1","title":"Using the <code>||</code> operator","text":"<p>The <code>||</code> (or) operator evaluates to <code>true</code> when either conditional expression is <code>true</code>:</p> <pre><code>var isHungry = true;\nvar isThirsty = false;\n\nif (isHungry || isThirsty) {\n    console.log(\"You should go to the kitchen.\");\n} else {\n    console.log(\"Do whatever, you're good!\");\n}\n</code></pre> <p>Example Output:</p> <pre><code>You should go to the kitchen.\n</code></pre>"},{"location":"javascript/javascript-language/#using-the-operator_2","title":"Using the <code>!</code> operator","text":"<p>The <code>!</code> (not) operator reverses a conditional expression:</p> <pre><code>var isTired = true;\n\nif (!isTired) {\n    console.log(\"Let's go outside and play.\");\n} else {\n    console.log(\"Let's take a nap.\");\n}\n</code></pre> <p>Example Output:</p> <pre><code>Let's take a nap.\n</code></pre>"},{"location":"javascript/javascript-language/#nested-conditional-statements","title":"Nested Conditional Statements","text":"<p>Conditional statements can be nested inside other conditional statements. Use indentation to make the nesting obvious at a glance:</p> <pre><code>var role = \"admin\";\n\nif (role == \"admin\" || role == \"developer\") {\n    console.log(\"You can see the secret stuff in this app.\");\n    if (role == \"admin\") {\n        console.log(\"You can also see the SUPER secret stuff in this app.\");\n    }\n}\n</code></pre> <p>Example Output:</p> <pre><code>You can see the secret stuff in this app.\nYou can also see the SUPER secret stuff in this app.\n</code></pre> <p>Further Reading</p> <ul> <li>MDN - JavaScript Building Blocks: Conditionals</li> <li>Eloquent JavaScript - Conditional Execution</li> <li>The Modern JavaScript Tutorial - Conditional Branching</li> </ul>"},{"location":"javascript/javascript-language/#data-types","title":"Data Types","text":"<p>Every value has a data type in JavaScript. The data type determines what kinds of operations you can perform on the value.</p>"},{"location":"javascript/javascript-language/#boolean","title":"<code>boolean</code>","text":"<p>The <code>boolean</code> data type represents a <code>true</code> or a <code>false</code> value:</p> <pre><code>var isHungry = true;\nvar isThirsty = false;\n</code></pre>"},{"location":"javascript/javascript-language/#generating-boolean-values-in-a-conditional-statement","title":"Generating <code>boolean</code> values in a conditional statement","text":"<p>You normally won't use a <code>boolean</code> directly, but instead will generate a <code>boolean</code> in a conditional statement:</p> <pre><code>var age = 19;\n\n// This generates `true`\nif (age &gt;= 18) {\n    console.log(\"You are an adult!\");\n}\n\n// This generates `false`\nif (age &lt; 18) {\n    console.log(\"You are a child.\");\n}\n</code></pre>"},{"location":"javascript/javascript-language/#truthy-and-falsy-values","title":"Truthy and falsy values","text":"<p>Booleans are not the only values that can be True/False. Every value in JavaScript is either truthy or falsy, which means they can be used in conditional statements without a boolean comparison operation. Empty strings and the number 0 are falsy, and all other strings and numbers are truthy.</p> <p>Here's an example of a falsy value:</p> <pre><code>var username = \"\";\n\nif (username) {\n    console.log(`Hello, ${username}!`);\n} else {\n    console.log(\"The username is blank\");\n}\n</code></pre> <p>Example Output:</p> <pre><code>The username is blank\n</code></pre> <p>Here's an example of a truthy value:</p> <pre><code>var numBananas = 2;\n\nif (numBananas) {\n    console.log(\"We have bananas!\");\n} else {\n    console.log(\"We have no bananas!\");\n}\n</code></pre> <p>Example Output:</p> <pre><code>We have bananas!\n</code></pre>"},{"location":"javascript/javascript-language/#number","title":"<code>number</code>","text":"<p>The <code>number</code> data type represents any number:</p> <pre><code>var totalCost = 29.99;\nvar numBananas = 2;\n</code></pre>"},{"location":"javascript/javascript-language/#converting-string-to-number","title":"Converting <code>string</code> to <code>number</code>","text":"<p>You can use the <code>parseInt()</code> function to convert a <code>string</code> to an integer <code>number</code>:</p> <pre><code>var age = parseInt(\"13\");\nconsole.log(age); // 13\n</code></pre> <p>This is often combined with the <code>prompt()</code> function when you prompt the user for a numeric data type:</p> <pre><code>var age = parseInt(prompt(\"How old are you? \"));\n</code></pre> <p>The <code>parseFloat()</code> function works the same way, except the <code>number</code> will be a decimal number:</p> <pre><code>var heightInInches = parseFloat(\"60.5\");\nconsole.log(heightInInches); // 60.5\n</code></pre> <p>Instead of <code>parseInt()</code> or <code>parseFloat()</code>, you can use the <code>+</code> operator to convert a <code>string</code> to a <code>number</code>:</p> <pre><code>var age = +\"13\";\nconsole.log(age); // 13\n\nvar heightInInches = +\"60.5\";\nconsole.log(heightInInches); // 60.5\n</code></pre>"},{"location":"javascript/javascript-language/#string","title":"<code>string</code>","text":"<p>The <code>string</code> data type represents a text value:</p> <pre><code>var name = \"Daniel\";\n</code></pre>"},{"location":"javascript/javascript-language/#string-concatenation","title":"String concatenation","text":"<p>If you need to combine a variable and a <code>string</code>, you can use the <code>+</code> operator. This technique is called string concatenation:</p> <pre><code>var name = \"Daniel\";\nvar greeting = \"Hello, \" + name;\n\nconsole.log(greeting); // Hello, Daniel\n</code></pre>"},{"location":"javascript/javascript-language/#string-interpolation","title":"String interpolation","text":"<p>Another way to combine a variable and a <code>string</code> is using <code>template-literal</code> strings. This technique is called string interpolation, and it is the preferred way to combine variables and <code>strings</code>. Note that the string must be surrounded by backtick quotes, which are usually near the 1 key on your keyboard:</p> <pre><code>var name = \"Daniel\";\nvar age = 35;\n\nconsole.log(`I'm ${name} and I'm ${age} years old.`);\n</code></pre> <p>Example Output:</p> <pre><code>I'm Daniel and I'm 35 years old.\n</code></pre>"},{"location":"javascript/javascript-language/#multiline-strings","title":"Multiline strings","text":"<p>Template literal strings allow you to write large blocks of text in a single <code>console.log()</code> statement:</p> <pre><code>var menu = `\n    Welcome to Dan's Taco Stand!\n\n    Tacos       $2\n    Burritos    $5\n    Nachos      $3\n\n    Place your order by clicking *Order Now*\n`;\n\nconsole.log(menu);\n</code></pre> <p>Example Output:</p> <pre><code>    Welcome to Dan's Taco Stand!\n\n    Tacos       $2\n    Burritos    $5\n    Nachos      $3\n\n    Place your order by clicking *Order Now*\n</code></pre>"},{"location":"javascript/javascript-language/#getting-the-number-of-characters-in-a-str","title":"Getting the number of characters in a <code>str</code>","text":"<p>You can use the <code>string.length</code> property to get the number of characters in a <code>string</code>:</p> <pre><code>var name = \"Daniel\";\n\nname.length; // 6\n</code></pre>"},{"location":"javascript/javascript-language/#checking-if-a-string-ends-with-a-set-of-characters","title":"Checking if a <code>string</code> ends with a set of characters","text":"<p>The <code>string.endsWith()</code> method lets you check if a <code>string</code> ends with a given pattern:</p> <pre><code>var emailAddresses = [\"djs@cwhq.com\", \"alecg@auburn.edu\", \"samh@bridges.com\"];\n\nfor (var emailAddress of emailAddresses) {\n    if (emailAddress.endsWith(\".edu\")) {\n        console.log(`${emailAddress} is a school address`);\n    } else if (emailAddress.endsWith(\"cwhq.com\")) {\n        console.log(`${emailAddress} is a CWHQ employee address`);\n    } else {\n        console.log(`I don't know what ${emailAddress} is for`);\n    }\n}\n</code></pre> <p>Example Output:</p> <pre><code>djs@cwhq.com is a CWHQ employee address\nalecg@auburn.edu is a school address\nI don't know what sam@bridges.com is for\n</code></pre>"},{"location":"javascript/javascript-language/#sanitizing-user-input","title":"Sanitizing user input","text":"<p>User's do strange things, but using <code>string.toLowerCase()</code> and <code>string.trim()</code> can help your program to validate <code>string</code> data types.</p> <p><code>string.toLowerCase()</code> makes a <code>string</code> lowercase:</p> <pre><code>// Imagine a user entered \"Pizza\" with an uppercase P\nvar favoriteFood = \"Pizza\";\n\nif (favoriteFood.toLowerCase() == \"pizza\") {\n    console.log(\"That's my favorite food!\");\n}\n</code></pre> <p>Example Output:</p> <pre><code>That's my favorite food!\n</code></pre> <p><code>string.trim()</code> removes leading or trailing whitespace from a <code>string</code>:</p> <pre><code>// Imagine a user entered \" pizza\" with a leading space character\nvar favoriteFood = \" pizza\";\n\nif (favoriteFood.trim() == \"pizza\") {\n    console.log(\"That's my favorite food!\");\n}\n</code></pre> <p>Example Output:</p> <pre><code>That's my favorite food!\n</code></pre> <p>You can chain these methods together to sanitize a <code>string</code> completely:</p> <pre><code>// What a mess! Extra spaces before/after and odd capitalization\nvar favoriteFood = \" PIzZa  \";\n\nif (favoriteFood.trim().toLowerCase() == \"pizza\") {\n    console.log(\"That's my favorite food!\");\n}\n</code></pre> <p>Example Output:</p> <pre><code>That's my favorite food!\n</code></pre> <p>Further Reading</p> <ul> <li>MDN - JavaScript Data Types and Data Structures</li> <li>The Modern JavaScript Tutorial - Data Types</li> <li>Eloquent JavaScript - Values, Types, and Operators</li> <li>MDN - Truthy</li> <li>MDN - Falsy</li> <li>MDN - JavaScript Reference: Template Literals</li> <li>MDN - JavaScript Reference: String.prototype.trim()</li> <li>MDN - JavaScript Reference: String.prototype.toLowerCase()</li> </ul>"},{"location":"javascript/javascript-language/#data-structures","title":"Data Structures","text":"<p>Data structures allow you to efficiently store and access groups of items. Think of them like different storage containers you may use around the house.</p>"},{"location":"javascript/javascript-language/#array","title":"<code>array</code>","text":"<p>The <code>array</code> data structure is used to store data in ordered slots. It is known as mutable sequence type, which means it can be modified after creation.</p> <p>Usually, the items in a <code>array</code> are homogeneous, which means they represent a group of similar items of the same data type:</p> <pre><code>var names = [\"alecg\", \"danielj\", \"dimas\"];\nvar menuPrices = [4.5, 5.75, 3.0];\nvar ids = [184, 294, 832, 98, 4];\n</code></pre> <p>You can write an <code>array</code> on multiple lines if you want. The trailing comma is recommended but not required:</p> <pre><code>var foods = [\"tacos\", \"pizza\", \"nachos\", \"ice cream\", \"asparagus\"];\n</code></pre>"},{"location":"javascript/javascript-language/#accessing-items-in-an-array","title":"Accessing items in an <code>array</code>","text":"<p>You can access individual items in an <code>array</code> using the <code>[]</code> characters and the index number of the item. The index numbers start at 0:</p> <pre><code>var names = [\"alecg\", \"danielj\", \"dimas\"];\n\nconsole.log(names[0]); // alecg\nconsole.log(names[1]); // danielj\nconsole.log(names[2]); // dimas\n</code></pre>"},{"location":"javascript/javascript-language/#adding-an-item-to-an-array","title":"Adding an item to an <code>array</code>","text":"<p>To add an item to an <code>array</code> after it has been created, you can use the <code>array.push()</code> method. The <code>array.push()</code> method adds the item to the end of the <code>array</code>:</p> <pre><code>var names = [\"alecg\", \"danielj\", \"dimas\"];\n\nnames.push(\"samh\");\n\nconsole.log(names); // ['alecg', 'danielj', 'dimas', 'samh'];\n</code></pre>"},{"location":"javascript/javascript-language/#updating-an-item-in-an-array","title":"Updating an item in an <code>array</code>","text":"<p>To update an <code>array</code> item, replace the value at the index:</p> <pre><code>var names = [\"alecg\", \"danielj\", \"dimas\"];\n\nnames[1] = \"django\";\n\nconsole.log(names); // ['alecg', 'django', 'dimas']\n</code></pre>"},{"location":"javascript/javascript-language/#removing-an-item-from-an-array","title":"Removing an item from an <code>array</code>","text":"<p>To remove an item from an <code>array</code>, you can use the <code>array.splice()</code> method. You tell <code>array.splice</code> the index number to start removing items from and the number of items to remove:</p> <pre><code>array.splice(indexToRemove, numItemsToRemove);\n</code></pre> <p>Here's an example that removes the first item from an <code>array</code>:</p> <pre><code>var names = [\"alecg\", \"danielj\", \"dimas\"];\n\nnames.splice(0, 1);\n\nconsole.log(names); // ['danielj', 'dimas']\n</code></pre> <p>If you want to remove an item from the end of an <code>array</code>, use the <code>array.pop()</code> method:</p> <pre><code>var names = [\"alecg\", \"danielj\", \"dimas\"];\n\nnames.pop();\n\nconsole.log(names); // ['alecg', 'danielj'];\n</code></pre>"},{"location":"javascript/javascript-language/#looping-through-an-array","title":"Looping through an <code>array</code>","text":"<p>To loop through the items in an <code>array</code>, use a <code>for...of</code> loop. Note the convention of using the plural <code>names</code> for the <code>array</code> and the singular <code>name</code> for the loop-iteration variable:</p> <pre><code>var names = [\"alecg\", \"danielj\", \"dimas\"];\n\nconsole.log(\"This documentation is brought to you by:\");\nfor (var name of names) {\n    console.log(name);\n}\n</code></pre> <p>Example Output:</p> <pre><code>This documentation is brought to you by:\nalecg\ndanielj\ndimas\n</code></pre> <p>You can also loop through an array using a traditional <code>for</code> loop if you need to use the index number of each item for something:</p> <pre><code>var names = [\"alecg\", \"danielj\", \"dimas\"];\n\nconsole.log(\"This documentation is brought to you by:\");\nfor (var i = 0; i &lt; names.length; i++) {\n    console.log(names[i]);\n}\n</code></pre> <p>Example Output:</p> <pre><code>This documentation is brought to you by:\nalecg\ndanielj\ndimas\n</code></pre>"},{"location":"javascript/javascript-language/#getting-the-number-of-items-in-an-array","title":"Getting the number of items in an <code>array</code>","text":"<p>To get the number of items in an <code>array</code>, use the <code>array.length()</code> method:</p> <pre><code>var names = [\"alecg\", \"danielj\", \"dimas\"];\n\nvar numNames = names.length;\n\nconsole.log(numNames); // 3\n</code></pre>"},{"location":"javascript/javascript-language/#checking-if-an-item-is-contained-in-an-array","title":"Checking if an item is contained in an <code>array</code>","text":"<p>To check if an item is contained in an <code>array</code>, use the <code>array.includes()</code> method:</p> <pre><code>var names = [\"alecg\", \"danielj\", \"dimas\"];\n\nconsole.log(names.includes(\"alecg\")); // True\nconsole.log(names.includes(\"samh\")); // False\n</code></pre> <p>Further Reading</p> <ul> <li>MDN - The JavaScript Reference - Array</li> <li>Eloquent JavaScript - Data Structures: Objects and Arrays</li> <li>The Modern JavaScript Tutorial - Arrays</li> <li>MDN - The JavaScript Reference - Array.push()</li> <li>MDN - The JavaScript Reference - Array.pop()</li> <li>MDN - The JavaScript Reference - Array.splice()</li> <li>MDN - The JavaScript Reference - Array.includes()</li> </ul>"},{"location":"javascript/javascript-language/#object","title":"<code>object</code>","text":"<p>The <code>object</code> data structure is used to store data in key/value pairs.</p> <pre><code>var staff = {\n    danielj: \"Curriculum Developer\",\n    alecg: \"Curriculum Instructor\",\n    dimas: \"Designer\",\n};\n</code></pre> <p>You can use strings for the keys as well, but we'll follow the above form in these docs:</p> <pre><code>var staff = {\n    danielj: \"Curriculum Developer\",\n    alecg: \"Curriculum Instructor\",\n    dimas: \"Designer\",\n};\n</code></pre>"},{"location":"javascript/javascript-language/#accessing-items-in-an-object","title":"Accessing items in an <code>object</code>","text":"<p>You have to know the key to access an individual item in an <code>object</code>:</p> <pre><code>var staff = {\n    danielj: \"Curriculum Developer\",\n    alecg: \"Curriculum Instructor\",\n    dimas: \"Designer\",\n};\n\nvar danielJob = staff.danielj;\nconsole.log(`Daniel is a ${danielJob}.`);  // Daniel is a Curriculum Developer.\n\nvar alecJob = staff.alecg;\nconsole.log(`Alec is a ${alecJob}.`);  // Alec is a Curriculum Instructor.\n\nvar dimaJob = staff.dimas.;\nconsole.log(`Dima is a ${dimaJob}.`);  // Dima is a Designer.\n</code></pre>"},{"location":"javascript/javascript-language/#adding-an-item-to-an-object","title":"Adding an item to an <code>object</code>","text":"<p>You can add an item to an <code>object</code> by providing the key/value pair (it's the same syntax as updating an item):</p> <pre><code>var staff = {\n    danielj: \"Curriculum Developer\",\n    alecg: \"Curriculum Instructor\",\n    dimas: \"Designer\",\n};\n\nstaff.django = \"Director Of Pug Snorts\";\n\nconsole.log(staff); // {danielj: 'Curriculum Developer', alecg: 'Curriculum Instructor', dimas: 'Designer', django: 'Director Of Pug Snorts'}\n</code></pre>"},{"location":"javascript/javascript-language/#updating-an-item-in-an-object","title":"Updating an item in an <code>object</code>","text":"<p>To update an item in an <code>object</code>, you must know the key:</p> <pre><code>var staff = {\n    danielj: \"Curriculum Developer\",\n    alecg: \"Curriculum Instructor\",\n    dimas: \"Designer\",\n};\n\nstaff.danielj = \"Burrito Taste-Tester\";\n\nconsole.log(staff); // {danielj: 'Burrito Taste-Tester', alecg: 'Curriculum Instructor', dimas: 'Designer'}\n</code></pre>"},{"location":"javascript/javascript-language/#removing-an-item-from-an-object","title":"Removing an item from an <code>object</code>","text":"<p>To remove an item from an <code>object</code>, use the <code>delete</code> operator:</p> <pre><code>var staff = {\n    danielj: \"Curriculum Developer\",\n    alecg: \"Curriculum Instructor\",\n    dimas: \"Designer\",\n};\n\ndelete staff.danielj;\n\nconsole.log(staff); // {alecg: 'Curriculum Instructor', dimas: 'Designer'}\n</code></pre>"},{"location":"javascript/javascript-language/#looping-through-an-object","title":"Looping through an <code>object</code>","text":"<p>To loop through an <code>object</code>, you use the <code>for...in</code> loop like this:</p> <pre><code>var staff = {\n    danielj: \"Curriculum Developer\",\n    alecg: \"Curriculum Instructor\",\n    dimas: \"Designer\",\n};\n\nfor (var key in staff) {\n    // Note the [] used to access the value in the object\n    console.log(`${key} is a ${staff[key]}.`);\n}\n</code></pre> <p>Example Output:</p> <pre><code>danielj is a Curriculum Developer.\nalecg is a Curriculum Instructor.\ndimas is a Designer.\n</code></pre>"},{"location":"javascript/javascript-language/#getting-the-keys-from-an-object","title":"Getting the keys from an <code>object</code>","text":"<p>If you need to get all of the keys from an <code>object</code>, use the <code>object.keys()</code> method. Note that the keys will be returned as an <code>array</code>:</p> <pre><code>var staff = {\n    danielj: \"Curriculum Developer\",\n    alecg: \"Curriculum Instructor\",\n    dimas: \"Designer\",\n};\n\nvar names = staff.keys();\n\nconsole.log(`Here are all the names in the staff object: ${names}`);\n</code></pre> <p>Example Output:</p> <pre><code>Here are all the names in the staff object: ['danielj', 'alecg', 'dimas']\n</code></pre>"},{"location":"javascript/javascript-language/#getting-the-values-from-an-object","title":"Getting the values from an <code>object</code>","text":"<p>If you need to get all of the values from an <code>object</code>, use the <code>object.values()</code> method. Note, the values will be returned as an <code>array</code>:</p> <pre><code>var staff = {\n    danielj: \"Curriculum Developer\",\n    alecg: \"Curriculum Instructor\",\n    dimas: \"Designer\",\n};\n\nvar jobs = staff.values();\n\nconsole.log(`Here are all the jobs in the staff object: ${jobs}`);\n</code></pre> <p>Example Output:</p> <pre><code>Here are all the jobs in the staff object: ['Curriculum Developer', 'Curriculum Instructor', 'Designer']\n</code></pre>"},{"location":"javascript/javascript-language/#getting-the-number-of-items-in-an-object","title":"Getting the number of items in an <code>object</code>","text":"<p>You can get the keys from an <code>object</code> and then use the <code>array.length</code> method to get the number of items in an <code>object</code>:</p> <pre><code>var staff = {\n    danielj: \"Curriculum Developer\",\n    alecg: \"Curriculum Instructor\",\n    dimas: \"Designer\",\n};\n\nvar numberOfStaff = staff.keys().length;\n\nconsole.log(`We have ${numberOfStaff} people on our staff.`); // We have 3 people on our staff.\n</code></pre> <p>Further Reading</p> <ul> <li>MDN - The JavaScript Reference - Object</li> <li>Eloquent JavaScript - Objects and Arrays</li> <li>The Modern JavaScript Tutorial - Objects</li> <li>MDN - The JavaScript Reference - for...in</li> <li>MDN - The JavaScript Reference - Object.values()</li> <li>MDN - The JavaScript Reference - Object.keys()</li> <li>MDN - The JavaScript Reference - delete operator</li> </ul>"},{"location":"javascript/javascript-language/#functions","title":"Functions","text":"<p>Functions allow you to group related statements together to perform a task. They help to implement the D.R.Y.(Don't Repeat Yourself) principle because they reduce unnecessary repetition.</p>"},{"location":"javascript/javascript-language/#built-in-functions","title":"Built-in functions","text":"<p>JavaScript comes with many built-in functions. We'll cover some of the most common that you'll see in CodeWizardsHQ courses below.</p>"},{"location":"javascript/javascript-language/#parsefloat","title":"<code>parseFloat()</code>","text":"<p>The <code>parseFloat()</code> function converts data to a <code>number</code> data type with a decimal point:</p> <pre><code>var pi = parseFloat(\"3.14\");\n\nconsole.log(pi); // 3.14\ntypeof pi; // 'number\n\nvar two = parseFloat(2);\n\nconsole.log(two); // 2.0\ntypeof two; // 'number'\n</code></pre>"},{"location":"javascript/javascript-language/#prompt","title":"<code>prompt()</code>","text":"<p>The <code>prompt()</code> function allows you to prompt a user. The user's response is returned as a <code>string</code>, which you can store in a variable:</p> <pre><code>var name = prompt(\"What is your name? \");\nconsole.log(`Nice to meet you, ${name}!`);\n</code></pre> <p>Example Output:</p> <pre><code>What is your name? Daniel\nNice to meet you, Daniel!\n</code></pre>"},{"location":"javascript/javascript-language/#alert","title":"<code>alert()</code>","text":"<p>The <code>alert()</code> function allows you to alert a user with a message box.</p> <pre><code>function sayHi() {\n    alert(\"Welcome to my page!\");\n}\nsayHi();\n</code></pre> <p></p>"},{"location":"javascript/javascript-language/#confirm","title":"<code>confirm()</code>","text":"<p>The <code>confirm()</code> function allows you create a popup message for the user to confirm or cancel. This function returns <code>true</code> if the user has click ok.</p> <pre><code>var wizardName = prompt(\"Enter name\");\nvar nameConfirm = confirm(`Confirm ${wizardName}?`);\n\nif (nameConfirm) {\n    document.getElementById(\"name\").innerHTML = `Welcome ${wizardName}!`;\n} else {\n    document.getElementById(\"name\").innerHTML = `Cancelled`;\n}\n</code></pre> <p></p> <p></p>"},{"location":"javascript/javascript-language/#parseint","title":"<code>parseInt()</code>","text":"<p>The <code>parseInt()</code> function converts data to a <code>number</code> data type without a decimal point:</p> <pre><code>var intPI = parseInt(3.14);\n\nconsole.log(intPI); // 3\ntypeof intPI; // 'number'\n\nvar meaningOfLife = parseInt(\"42\");\n\nconsole.log(meaningOfLife); // 42\ntypeof meaningOfLife; // 'number'\n</code></pre>"},{"location":"javascript/javascript-language/#consolelog","title":"<code>console.log()</code>","text":"<p>The <code>console.log()</code> function displays text in the developer console:</p> <pre><code>console.log(\"Hello, world!\"); // Hello, world!\n</code></pre>"},{"location":"javascript/javascript-language/#using-special-characters-with-consolelog","title":"Using special characters with <code>console.log()</code>","text":"<p>You can use special characters such as <code>\\n</code> and <code>\\t</code> to format the text a bit. The <code>\\n</code> adds a newline (like hitting enter on your keyboard) and the <code>\\t</code> adds a tab:</p> <pre><code>console.log(\"Line 1\\nLine 2\\nLine 3\\n\");\nconsole.log(\"\\tThis is tabbed over\\n\\tThis too.\");\n</code></pre> <p>Example Output:</p> <pre><code>Line 1\nLine 2\nLine 3\n\n        This is tabbed over\n        This too.\n</code></pre> <p>Further Reading</p> <ul> <li>MDN - Web APIs: console.log()</li> <li>MDN - The JavaScript Reference: parseInt()</li> <li>MDN - The JavaScript Reference: parseFloat()</li> <li>MDN - The JavaScript Reference: window.prompt()</li> </ul>"},{"location":"javascript/javascript-language/#user-defined-functions","title":"User-defined functions","text":"<p>You define a function using the <code>function</code> keyword. Functions definitions can go anywhere in your file, but it helps to keep them all organized in a single area for readability:</p> <pre><code>function sayHello() {\n    console.log(\"Hello!\");\n}\n</code></pre>"},{"location":"javascript/javascript-language/#calling-a-function","title":"Calling a function","text":"<p>Defining a function does not run the statements in the body of the function. To run a function, you call it like this:</p> <pre><code>function sayHello() {\n    console.log(\"Hello!\");\n}\n\nsayHello(); // Hello!\n</code></pre>"},{"location":"javascript/javascript-language/#adding-parameters-to-a-function","title":"Adding parameters to a function","text":"<p>When you define a function, you can add parameters that the function caller should pass in. Parameters are like variables, but the value of the variable is set by the function caller, not the function definer:</p> <pre><code>function sayHello(name) {\n    console.log(`Hello, ${name}!`);\n}\n</code></pre>"},{"location":"javascript/javascript-language/#passing-arguments-to-a-function","title":"Passing arguments to a function","text":"<p>If a function accepts parameters, you need to pass them in when you call the function. The values you pass to the function are called the arguments to the function:</p> <pre><code>function sayHello(name) {\n    console.log(`Hello, ${name}!`);\n}\n\nsayHello(\"Daniel\"); // Hello, Daniel!\n</code></pre>"},{"location":"javascript/javascript-language/#returning-a-value-from-a-function","title":"Returning a value from a function","text":"<p>You can return a value from a function by using the <code>return</code> keyword:</p> <pre><code>function add(number1, number2) {\n    var total = number1 + number2;\n    return total;\n}\n</code></pre>"},{"location":"javascript/javascript-language/#capturing-a-functions-return-value","title":"Capturing a function's return value","text":"<p>If a function returns a value, you can capture it in a variable:</p> <pre><code>function add(number1, number2) {\n    var total = number1 + number2;\n    return total;\n}\n\nvar total = add(2, 3);\nconsole.log(total); // 5\n</code></pre> <p>You can also use the value immediately in another function, like <code>console.log()</code> or as part of a <code>template-literal</code> string:</p> <pre><code>function add(number1, number2) {\n    var total = number1 + number2;\n    return total;\n}\n\nconsole.log(add(2, 3)); // 5\nconsole.log(`2 + 3 = ${add(2, 3)}`); // 2 + 3 = 5\n</code></pre>"},{"location":"javascript/javascript-language/#indentation-in-functions","title":"Indentation in functions","text":"<p>Indentation is not required in JavaScript, but you should do it for readability. If you have another statement inside your function that also requires indentation (like a conditional statement or loop), you should also indent the body of that statement:</p> <pre><code>function sayHello(name) {\n    console.log(`Hello, ${name}!`);\n    if (name == \"Daniel\") {\n        console.log(\"That's a cool name!\");\n    } else {\n        console.log(\"Nice to meet you!\");\n    }\n}\n\nsayHello(\"Daniel\");\nsayHello(\"Alec\");\n</code></pre> <p>Example Output:</p> <pre><code>Hello, Daniel!\nThat's a cool name!\n\nHello, Alec!\nNice to meet you!\n</code></pre>"},{"location":"javascript/javascript-language/#using-an-early-return-statement-to-exit-a-function","title":"Using an early <code>return</code> statement to exit a function","text":"<p>A <code>return</code> statement can be used to exit a function. This is normally used when you want to verify (with a conditional statement) that some preconditions are valid before continuing to execute a function body:</p> <pre><code>function greetCodewizard(name) {\n    var staff = [\"danielj\", \"alecg\", \"dimas\"];\n    if (!staff.includes(name)) {\n        console.log(\"I don't know you!\");\n        return;\n    }\n    console.log(`Hello, ${name}!`);\n}\n\ngreetCodewizard(\"danielj\"); // Hello, danielj!\ngreetCodewizard(\"django\"); // I don't know you!\n</code></pre> <p>Further Reading</p> <ul> <li>MDN - JavaScript Building Blocks: Functions</li> <li>EloquentJavaScript - Functions</li> <li>The Modern JavaScript Tutorial - Functions</li> </ul>"},{"location":"javascript/javascript-language/#loops","title":"Loops","text":"<p>If you need to repeat something in your programs, you'll need to use one of JavaScript's looping mechanisms.</p>"},{"location":"javascript/javascript-language/#for","title":"<code>for</code>","text":"<p>JavaScript's <code>for</code> loop is one of the more complicated pieces of syntax in the language. The header of the <code>for</code> loop controls how many times the loop runs, and it consists of three parts:</p> <pre><code>// header\nfor (counter; loopContinuationCondition; incrementOrDecrement) {\n    // body\n}\n</code></pre> <p>The <code>counter</code> is a variable that will hold a number representing the current loop iteration (usually). The <code>loopContinuationCondition</code> is a <code>boolean</code> condition that determines whether the loop should continue. The <code>incrementOrDecrement</code> is a statement that modifies the <code>counter</code> after each loop completes.</p> <p>To see all three elements in action, consider this <code>for</code> loop, which loops 3 times and prints \"Hello\" to the console three times:</p> <pre><code>for (var counter = 0; counter &lt; 3; counter++) {\n    console.log(\"Hello\");\n}\n</code></pre> <p>Example Output:</p> <pre><code>Hello\nHello\nHello\n</code></pre> <p>Generally, the <code>counter</code> is called <code>i</code>. This is a shorthand that many programmers use, and you'll see it in many courses at CWHQ. The name of the variable is completely up to the programmer:</p> <pre><code>for (var i = 0; i &lt; 3; i++) {\n    console.log(\"Hello\");\n}\n</code></pre> <p>Example Output:</p> <pre><code>Hello\nHello\nHello\n</code></pre>"},{"location":"javascript/javascript-language/#counter-controlled-repetition-with-the-for-loop","title":"Counter-controlled repetition with the <code>for</code> loop","text":"<p>A <code>for</code> loop is used to loop a certain number of times (called counter-controlled repetition). You generally perform some action in the body of a <code>for</code> loop:</p> <pre><code>for (var i = 0; i &lt; 3; i++) {\n    console.log(`${i} taco`);\n}\n</code></pre> <p>Example Output:</p> <pre><code>0 taco\n1 taco\n2 taco\n</code></pre> <p>You can use a <code>for</code> loop to loop over an <code>array</code>, but the <code>for...of</code> loop is easier:</p> <pre><code>var fruits = [\"apple\", \"banana\", \"cherry\"];\n\nfor (var i = 0; i &lt; fruits.length; i++) {\n    console.log(`Index number: ${i}  Fruit: ${fruits[i]}`);\n}\n</code></pre> <p>Example Output:</p> <pre><code>Index number: 0  Fruit: apple\nIndex number: 1  Fruit: banana\nIndex number: 2  Fruit: cherry\n</code></pre>"},{"location":"javascript/javascript-language/#looping-through-arrays-with-the-forof-loop","title":"Looping through <code>arrays</code> with the <code>for...of</code> loop","text":"<p>The <code>for...of</code> loop is the easiest way to loop through the items in an <code>array</code>. Note the convention of a plural <code>array</code> name (fruits) and a singular loop-iteration variable (fruit):</p> <pre><code>var fruits = [\"apple\", \"banana\", \"cherry\"];\n\nfor (var fruit of fruits) {\n    console.log(fruit);\n}\n</code></pre> <p>Example Output:</p> <pre><code>apple\nbanana\ncherry\n</code></pre>"},{"location":"javascript/javascript-language/#searching-for-a-value-in-a-forof-loop","title":"Searching for a value in a <code>for...of</code> loop","text":"<p>You can use a conditional statement inside a <code>for...of</code> loop to search for a particular item in an <code>array</code> and then do something:</p> <pre><code>var fruits = [\"orange\", \"banana\", \"cherry\", \"apple\"];\n\nfor (var fruit of fruits) {\n    if (fruit == \"orange\") {\n        console.log(`${fruit} is the best fruit`);\n    }\n}\n</code></pre> <p>Example Output:</p> <pre><code>orange is the best fruit\n</code></pre>"},{"location":"javascript/javascript-language/#finding-a-value-in-a-forof-loop-to-use-after-the-loop-finishes","title":"Finding a value in a <code>for...of</code> loop to use after the loop finishes","text":"<p>You can store an item from the <code>for...of</code> loop for later use by creating a variable before the <code>for...of</code> loop with some default value.</p> <pre><code>var fruits = [\"orange\", \"banana\", \"cherry\", \"apple\"];\n\nvar bestFruit;\n\nfor (var fruit of fruits) {\n    if (fruit == \"orange\") {\n        bestFruit = fruit;\n    }\n}\n\n// The best fruit is orange.\nconsole.log(`The best fruit is ${bestFruit}.`);\n</code></pre>"},{"location":"javascript/javascript-language/#creating-a-new-array-in-a-forof-loop","title":"Creating a new <code>array</code> in a <code>for...of</code> loop","text":"<p>Often, you'll want to loop through an <code>array</code> and build a new <code>array</code> from the contents of the original <code>array</code>. This technique is called mapping, and it's a common thing to do with <code>arrays</code> and <code>for...of</code> loops:</p> <pre><code>var prices = [10, 12, 5, 8];\nvar discounted_prices = [];\n\nfor (var price of prices) {\n    discounted_price = price - price * 0.1;\n    discounted_prices.push(discounted_price);\n}\n\n// Here are your discounted prices: [9, 10.8, 4.5, 7.2]\nconsole.log(`Here are your discounted prices: ${discounted_prices}`);\n</code></pre>"},{"location":"javascript/javascript-language/#looping-through-objects-with-the-forin-loop","title":"Looping through <code>objects</code> with the <code>for...in</code> loop","text":"<p>The <code>for...in</code> loop is the easiest way to loop through the items in an <code>object</code>. The <code>prop</code> variable name is a convention, it represents each key (property) of the <code>object</code>:</p> <pre><code>var users = {\n    danielj: \"Admin\",\n    django: \"Support Staff\",\n    samh: \"Platform Developer\",\n};\n\nfor (var prop in users) {\n    console.log(`Username: ${prop} Role: ${users[prop]}`);\n}\n</code></pre> <p>Example Output:</p> <pre><code>Username: danielj Role: Admin\nUsername: django Role: Support Staff\nUsername: samh Role: Platform Developer\n</code></pre> <p>Further Reading</p> <ul> <li>MDN - JavaScript Reference - for</li> <li>MDN - JavaScript Reference - for...of</li> <li>MDN - JavaScript Reference - for...in</li> <li>Eloquent JavaScript - for loops</li> <li>The Modern JavaScript Tutorial - The \"for\" loop</li> </ul>"},{"location":"javascript/javascript-language/#while","title":"<code>while</code>","text":"<p>A <code>while</code> loop is generally used to perform indefinite repetition (when you don't know how many times you want to loop).</p> <p>For example, you can use a <code>while</code> loop to ask a user something until they answer correctly:</p> <pre><code>var keepLooping = true; // This variable controls whether we loop or not.\n\nwhile (keepLooping) {\n    var userGuess = prompt(\"What is the meaning of life? \");\n\n    if (userGuess == \"42\") {\n        console.log(\"That's correct!\");\n        keepLooping = false; // Stops the loop.\n    } else {\n        console.log(\"That's incorrect! Please try again.\");\n    }\n}\n</code></pre> <p>Example Output:</p> <pre><code>What is the meaning of life? To make money\nThat's incorrect! Please try again.\nWhat is the meaning of life? To eat tacos\nThat's incorrect! Please try again.\nWhat is the meaning of life? 42\nThat's correct!\n</code></pre>"},{"location":"javascript/javascript-language/#using-break-to-exit-a-loop","title":"Using <code>break</code> to exit a loop","text":"<p>You can also use a <code>break</code> statement instead of using a variable to control how many times an indefinite <code>while</code> loop runs:</p> <pre><code>while (true) {\n    userGuess = prompt(\"What is the meaning of life? \");\n\n    if (userGuess == \"42\") {\n        console.log(\"That's correct!\");\n        break; // Stops the loop.\n    } else {\n        console.log(\"That's incorrect! Please try again.\");\n    }\n}\n</code></pre> <p>Example Output:</p> <pre><code>What is the meaning of life? To make money\nThat's incorrect! Please try again.\nWhat is the meaning of life? To eat tacos\nThat's incorrect! Please try again.\nWhat is the meaning of life? 42\nThat's correct!\n</code></pre>"},{"location":"javascript/javascript-language/#counter-controlled-repetition","title":"Counter-controlled repetition","text":"<p>You can use a <code>while</code> loop to perform counter-controlled repetition as well, but the <code>for</code> loop is generally preferred for this:</p> <pre><code>var counter = 0;\n\nwhile (counter &lt; 5) {\n    console.log(counter);\n    counter++; // If you forget this, you'll have an infinite loop!\n}\n</code></pre> <p>Example Output:</p> <pre><code>0\n1\n2\n3\n4\n</code></pre> <p>Further Reading</p> <ul> <li>MDN - JavaScript Reference: while</li> <li>Eloquent JavaScript - while and do loops</li> <li>The Modern JavaScript Tutorial - The \"while\" loop</li> </ul>"},{"location":"javascript/javascript-language/#math-operations","title":"Math Operations","text":"<p>JavaScript can perform most mathematical operations with ease. There are standard operators for all of the arithmetic operations and the <code>Math</code> object has access to many more operations for things like Trigonometry.</p>"},{"location":"javascript/javascript-language/#arithmetic-operators","title":"Arithmetic Operators","text":"<p>The four basic arithmetic operations (addition, subtraction, multiplication, division) are similar to how you would use them with calculator:</p> <pre><code>var total = 8 + 2;\nvar difference = 8 - 2;\nvar product = 8 * 2;\nvar quotient = 8 / 2;\n\nconsole.log(`8 + 2 = ${total}`); // 8 + 2 = 10\nconsole.log(`8 - 2 = ${difference}`); // 8 - 2 = 6\nconsole.log(`8 * 2 = ${product}`); // 8 * 2 = 16\nconsole.log(`8 / 2 = ${quotient}`); // 8 / 2 = 4\n</code></pre>"},{"location":"javascript/javascript-language/#other-operators","title":"Other Operators","text":"<p>There are a few other common operators that JavaScript provides for common math operations.</p>"},{"location":"javascript/javascript-language/#modulo","title":"Modulo","text":"<p>The modulo operator (<code>%</code>) returns the remainder after division:</p> <pre><code>10 % 3; // 1\n</code></pre>"},{"location":"javascript/javascript-language/#power","title":"Power","text":"<p>The power operator (<code>**</code>) multiplies a number by itself a given number of times:</p> <pre><code>3 ** 2; // 9\n</code></pre> <p>Further Reading</p> <ul> <li>MDN - The JavaScript Guide: Arithmetic Operators</li> <li>Eloquent JavaScript - Arithmetic</li> <li>The Modern JavaScript Tutorial - Basic operators, maths</li> </ul>"},{"location":"javascript/javascript-language/#the-math-object","title":"The <code>Math</code> object","text":"<p>JavaScript's <code>Math</code> object can be used to gain access to certain constants (such as PI), to perform trig calculations, or to get random numbers, among other things.</p>"},{"location":"javascript/javascript-language/#getting-random-numbers-with-mathrandom","title":"Getting random numbers with <code>Math.random()</code>","text":"<p>The <code>Math.random()</code> method returns a random decimal number between 0 and 1:</p> <pre><code>var randomNumber = Math.random();\nconsole.log(randomNumber); // 0.1524438866958424\n</code></pre> <p>If you'd like to get a random whole number between a <code>min</code> and <code>max</code>, this helper function is useful:</p> <pre><code>function random(min, max) {\n    var num = Math.floor(Math.random() * (max - min + 1)) + min;\n    return num;\n}\n\nvar randomNumber = random(1, 10);\nconsole.log(randomNumber); // 9\n</code></pre>"},{"location":"javascript/javascript-language/#rounding-numbers","title":"Rounding numbers","text":"<p>To round a number down, use <code>Math.floor()</code>:</p> <pre><code>var roundedNumber = Math.floor(4.6);\nconsole.log(roundedNumber); // 4\n</code></pre> <p>To round a number up, use <code>Math.ceil()</code>:</p> <pre><code>var roundedNumber = Math.ceil(4.2);\nconsole.log(roundedNumber); // 5\n</code></pre> <p>To round a number to the nearest integer, use <code>Math.round()</code>:</p> <pre><code>var roundedNumber = Math.round(4.4);\nconsole.log(roundedNumber); // 4\n\nroundedNumber = Math.round(4.5);\nconsole.log(roundedNumber); // 5\n</code></pre> <p>Further Reading</p> <ul> <li>MDN - The JavaScript Reference: Math</li> </ul>"},{"location":"javascript/javascript-language/#using-this","title":"Using <code>this</code>","text":"<p>In JavaScript, you can use the <code>this</code> keyword to get a reference to an element when an event is triggered (like a click event).</p> <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Using \"this\" in JavaScript&lt;/title&gt;\n        &lt;style&gt;\n            button {\n                display: block;\n                margin: 48px auto;\n                font-size: 24px;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;button id=\"my-button\" onclick=\"changeButtonText(this);\"&gt;\n            Original Button Text\n        &lt;/button&gt;\n\n        &lt;script&gt;\n            function changeButtonText(element) {\n                element.textContent = \"Updated Button Text\";\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"javascript/javascript-language/#variables","title":"Variables","text":"<p>Variables assign a name to a value. The naming convention in JavaScript is to use camelCase for variable names.</p>"},{"location":"javascript/javascript-language/#creating-a-variable","title":"Creating a variable","text":"<p>You create a variable using the <code>var</code> keyword:</p> <pre><code>var myVariable;\n</code></pre> <p>Usually, you create a variable and assign a value to the variable the assignment operator (<code>=</code>) at once:</p> <pre><code>var myName = \"Daniel\";\nvar myAge = 35;\n</code></pre>"},{"location":"javascript/javascript-language/#updating-a-numeric-variable","title":"Updating a numeric variable","text":"<p>You can update the value stored in a numeric variable like this:</p> <pre><code>var score = 0;\nscore = score + 1; // 0 + 1\n\nconsole.log(score); // 1\n\nscore = score + 1; // 1 + 1\n\nconsole.log(score); // 2\n</code></pre> <p>The same works for decreasing the value of a numeric variable:</p> <pre><code>var score = 3;\nscore = score - 1; // 3 - 1\n\nconsole.log(score); // 2\n\nscore = score - 1; // 2 - 1\n\nconsole.log(score); // 1\n</code></pre> <p>There is a shorthand notation for increasing and decreasing the value of a numeric variable:</p> <pre><code>var score = 0;\nscore += 1; // 0 + 1\n\nconsole.log(score); // 1\n\nscore += 1; // 1 + 1\n\nconsole.log(score); // 2\n\nscore -= 1; // 2 - 1\n\nconsole.log(score); // 1\n\nscore -= 1; // 1 - 1\n\nconsole.log(score); // 0\n</code></pre> <p>For an even more compact notation, you can use <code>++</code> or <code>--</code> to increase/decrease the value of a numeric variable:</p> <pre><code>var score = 0;\nscore++; // 0 + 1\n\nconsole.log(score); // 1\n\nscore++; // 1 + 1\n\nconsole.log(score); // 2\n\nscore--; // 2 - 1\n\nconsole.log(score); // 1\n\nscore--; // 1 - 1\n\nconsole.log(score); // 0\n</code></pre>"},{"location":"javascript/javascript-language/#global-vs-local-variables","title":"Global vs. local variables","text":"<p>Any variable created outside of function definition is considered a <code>global</code> variable:</p> <pre><code>// This is a global variable.\nvar score = 0;\n\nfunction updateScore() {\n    score = score + 1; // 1\n}\n\nconsole.log(score); // 0\n\nupdateScore(); // Changes the global `score` variable\n\nconsole.log(score); // 1\n</code></pre> <p>Updates to <code>global</code> variables affect the variable throughout the program. If you want a variable to exist only inside of a function, you can make it local to the function by creating the variable (with the <code>var</code> keyword) inside the function:</p> <pre><code>// This is a global variable.\nvar score = 0;\n\nfunction updateScore() {\n    // This is a local variable, it only exists within `updateScore()`\n    var score = 1;\n}\n\nconsole.log(score); // 0\n\nupdateScore(); // Doesn't change the global `score` variable\n\nconsole.log(score); // 0\n</code></pre> <p>Further Reading</p> <ul> <li>MDN - JavaScript First Steps - Variables</li> <li>Eloquent JavaScript - Bindings</li> <li>The Modern JavaScript Tutorial - Variables</li> </ul>"},{"location":"python/python-language/","title":"Python Language","text":"<p>Python is a beginner-friendly language that we use in these courses in the core CodeWizardsHQ curriculum:</p> Elementary Middle School High School Intro to Text-Based Programming Introduction to Programming with Python Intro to Python Capstone 1 Beyond Basics with Python Capstone 1 Progamming Fundamentals with Python Capstone 1 APIs and Databases Logic with Python Intro to Databases Professional Web App Development Modular Programming with Python Mastering APIs Capstone 2 Capstone 2 Mastering Databases Mastering MVC Frameworks Python Game Development Capstone 3 Object Relational Mapping DevOps and SoftwareEngineering Capstone 3 <p>In addition to those courses, Python is used in all courses of the Python Language Track.</p> <p>In this section of our documentation, you'll find references to most of the core Python language features and built-in functions that we use in our CodeWizardsHQ courses.</p> <p>You'll also find many Further reading sections, which pull from these excellent Python resources:</p> <ul> <li>Python.org Documentation</li> <li>RealPython.com</li> <li>Think Python</li> </ul>"},{"location":"python/python-language/#comments","title":"Comments","text":"<p>Programmers use comments to make notes in their source code for themselves or other programmers that will read their code later. They can also be used to \"deactivate\" lines of code that you don't want to run while you're working on a program.</p>"},{"location":"python/python-language/#single-line-comments","title":"Single Line Comments","text":"<p>Single line comments begin with the <code>#</code> character. You can put them above or to the right of the line of code they reference:</p> <pre><code># Validate the user is logged in and redirect them to the appropriate page.\nif is_logged_in(user):\n    redirect_to_homepage()\nelse:\n    redirect_to_login()\n\n\nMIN_HEIGHT = 60  # This is measured in inches, not feet!\n</code></pre>"},{"location":"python/python-language/#deactivating-code","title":"Deactivating Code","text":"<p>You can deactivate sections of code with comments:</p> <pre><code>if age &lt; 18:\n    # Turning this off for now\n    # prompt_user()\n    redirect_to_kid_zone()\nelse:\n    login_user()\n</code></pre>"},{"location":"python/python-language/#multiline-comments","title":"Multiline Comments","text":"<p>You can use multiline strings if you want to make a multiline comment:</p> <pre><code>\"\"\"\nThis calculates the hypotenuse of a right triangle when given the sides\nof the right triangle. It's the Pythagorean Theorem. The ** is how you\nwrite exponents in Python, and fractional exponents are like roots,\nso 0.5 is the square root.\n\"\"\"\nhypotenuse = ((side_a ** 2) + (side_b ** 2)) ** 0.5\n</code></pre> <p>Further Reading</p> <ul> <li>The Python Tutorial</li> <li>Real Python - Writing Comments in Python</li> <li>Think Python - Comments</li> </ul>"},{"location":"python/python-language/#conditional-statements","title":"Conditional Statements","text":"<p>Conditional statements allow you to run a block of code when a boolean condition is true.</p>"},{"location":"python/python-language/#if","title":"<code>if</code>","text":"<p>The <code>if</code> statement is the simplest form of conditional statement. If the expression to the right of the <code>if</code> keyword is <code>True</code>, the indented code block will execute:</p> <pre><code>is_hungry = True\n\nif is_hungry:\n    print(\"You should eat!\")\n</code></pre> <p>Example Output:</p> <pre><code>You should eat!\n</code></pre> <p>Usually, a conditional expression uses comparison operators to generate a <code>bool</code> result:</p> <pre><code>age = 19\n\nif age &gt;= 18:\n    print(\"You are legally an adult, congrats!\")\n</code></pre> <p>Example Output:</p> <pre><code>You are legally an adult, congrats!\n</code></pre>"},{"location":"python/python-language/#elif","title":"<code>elif</code>","text":"<p>The <code>elif</code> conditional statement is used to group logically related conditional statements together. The first conditional expression that evaluates to <code>True</code> will run:</p> <pre><code>favorite_food = \"Tacos\"\n\nif favorite_food == \"Sushi\":\n    print(\"We're going out for Japanese food to night!\")\nelif favorite_food == \"Pasta\":\n    print(\"How about we eat some Italian food tonight?\")\nelif favorite_food == \"Tacos\":\n    print(\"Time for some Mexican food!\")\nelif favorite_food == \"Samosa\":\n    print(\"Let's eat Indian food tonight!\")\n</code></pre> <p>Example Output:</p> <pre><code>Time for some Mexican food!\n</code></pre>"},{"location":"python/python-language/#else","title":"<code>else</code>","text":"<p>The <code>else</code> conditional statement runs when all other conditional statements in a group are <code>False</code>. You can think of it as the default option:</p> <pre><code>favorite_food = \"Hot Dogs with Cream Cheese\"\n\nif favorite_food == \"Sushi\":\n    print(\"We're going out for Japanese food to night!\")\nelif favorite_food == \"Pasta\":\n    print(\"How about we eat some Italian food tonight?\")\nelif favorite_food == \"Tacos\":\n    print(\"Time for some Mexican food!\")\nelif favorite_food == \"Samosa\":\n    print(\"Let's eat Indian food tonight!\")\nelse:\n    print(\"I don't know what that favorite_food is!\")\n</code></pre> <pre><code>I don't know what that favorite_food is!\n</code></pre>"},{"location":"python/python-language/#comparison-operators","title":"<code>Comparison Operators</code>","text":"<p>Here are the comparison operators that you can use in conditional expressions to generate a <code>bool</code> value:</p> Operator Description <code>&gt;</code> Greater-than <code>&gt;=</code> Greater-than or equal-to <code>&lt;</code> Less-than <code>&lt;=</code> Less-than or equal-to <code>==</code> Equal-to <code>!=</code> Not equal-to"},{"location":"python/python-language/#complex-conditional-statements","title":"<code>Complex Conditional Statements</code>","text":"<p>Complex conditional statements involve combining more than one conditional expression with logical operators:</p> <pre><code>age = 15\nheight_in_feet = 4.6\n\nif age &gt;= 13 and height_in_feet &gt; 5:\n    print(\"You may ride the roller coaster.\")\nelse:\n    print(\"You may NOT ride the roller coaster.\")\n</code></pre> <p>Example Output:</p> <pre><code>You may NOT ride the roller coaster.\n</code></pre> <p>You can string as many logical operators together as you want to build more complex conditional statements:</p> <pre><code>is_hungry = False\nis_thirsty = True\n\nfood_amount = 10\ndrink_amount = 0\n\nif is_hungry and food_amount &gt; 0 or is_thirsty and drink_amount &gt; 0:\n    enter_kitchen()\nelse:\n    play_video_games()\n</code></pre>"},{"location":"python/python-language/#formatting-complex-conditional-statements","title":"Formatting complex conditional statements","text":"<p>With a large complex conditional statement, it's often easier to read and reason about if you enclose the conditional expression in parentheses and split the statements across multiple lines:</p> <pre><code>is_hungry = False\nis_thirsty = True\n\nfood_amount = 10\ndrink_amount = 0\n\nif (\n    is_hungry  and food_amount  &gt; 0 or\n    is_thirsty and drink_amount &gt; 0\n):\n    enter_kitchen()\nelse:\n    play_video_games()\n</code></pre>"},{"location":"python/python-language/#logical-operators","title":"<code>Logical Operators</code>","text":"<p>Logical operators allow you to combine multiple conditional expressions in a single conditional statement:</p> Operator Description <code>and</code> <code>True</code> when both conditional expressions are <code>True</code> <code>or</code> <code>True</code> when either conditional expression is <code>True</code> <code>not</code> Reverses the value of a conditional expression"},{"location":"python/python-language/#using-the-and-operator","title":"Using the <code>and</code> operator","text":"<p>The <code>and</code> operator evaluates to <code>True</code> when both conditional expressions are <code>True</code>:</p> <pre><code>age = 15\nheight_in_feet = 5.2\n\nif age &gt;= 13 and height_in_feet &gt; 5:\n    print(\"You may ride the roller coaster.\")\nelse:\n    print(\"You may NOT ride the roller coaster.\")\n</code></pre> <p>Example Output:</p> <pre><code>You may ride the roller coaster.\n</code></pre>"},{"location":"python/python-language/#using-the-or-operator","title":"Using the <code>or</code> operator","text":"<p>The <code>or</code> operator evaluates to <code>True</code> when either conditional expression is <code>True</code>:</p> <pre><code>is_hungry = True\nis_thirsty = False\n\nif is_hungry or is_thirsty:\n    print(\"You should go to the kitchen.\")\nelse:\n    print(\"Do whatever, you're good!\")\n</code></pre> <p>Example Output:</p> <pre><code>You should go to the kitchen.\n</code></pre>"},{"location":"python/python-language/#using-the-not-operator","title":"Using the <code>not</code> operator","text":"<p>The <code>not</code> operator reverses a conditional expression:</p> <pre><code>is_tired = True\n\nif not is_tired:\n    print(\"Let's go outside and play.\")\nelse:\n    print(\"Let's take a nap.\")\n</code></pre> <p>Example Output:</p> <pre><code>Let's take a nap.\n</code></pre>"},{"location":"python/python-language/#nested-conditional-statements","title":"Nested Conditional Statements","text":"<p>Conditional statements can be nested inside other conditional statements. You just have to follow the same indentation rules for each nested conditional block:</p> <pre><code>role = \"admin\"\n\nif role == \"admin\" or role == \"developer\":\n    print(\"You can see the secret stuff in this app.\")\n    if role == \"admin\":\n        print(\"You can also see the SUPER secret stuff in this app.\")\n</code></pre> <p>Example Output:</p> <pre><code>You can see the secret stuff in this app.\nYou can also see the SUPER secret stuff in this app.\n</code></pre> <p>Further Reading</p> <ul> <li>Real Python - Conditional Statements in Python</li> <li>Real Python - Using the <code>not</code> Boolean Operator in Python</li> <li>Real Python - Using the <code>and</code> Boolean Operator in Python</li> <li>Real Python - How to use the Python <code>or</code> Operator </li> <li>The Python Library Reference - Boolean Operations</li> <li>The Python Library Reference - Boolean Values</li> <li>The Python Library Reference - Comparisons</li> <li>The Python Library Reference - Truth Value Testing</li> <li>The Python Tutorial - <code>if</code> Statements</li> <li>Think Python - Conditionals and Recursion</li> </ul>"},{"location":"python/python-language/#data-types","title":"Data Types","text":"<p>Every value has a data type in Python. The data type determines what kinds of operations you can perform on the value. For example, you can't perform arithmetic between values that aren't numeric data types.</p>"},{"location":"python/python-language/#bool","title":"<code>bool</code>","text":"<p>The <code>bool</code> data type represents a <code>True</code> or a <code>False</code> value:</p> <pre><code>is_hungry = True\nis_thirsty = False\n</code></pre>"},{"location":"python/python-language/#generating-bool-in-a-conditional-statement","title":"Generating <code>bool</code> in a conditional statement","text":"<p>You normally won't use a <code>bool</code> directly, but instead will generate a <code>bool</code> in a conditional statement:</p> <pre><code>age = 19\n\n# This generates `True`\nif age &gt;= 18:\n    print(\"You are an adult!\")\n\n\n# This generates `False`\nif age &lt; 18:\n    print(\"You are a child.\")\n</code></pre>"},{"location":"python/python-language/#truthy-and-falsy-values","title":"Truthy and falsy values","text":"<p>Booleans are not the only values that can be True/False. Every value in Python is either truthy or falsy, which means they can be used in conditional statements without a boolean comparison operation. Empty strings and the number 0 are falsy, and all other strings and numbers are truthy.</p> <p>Here's an example of a falsy value:</p> <pre><code>username = \"\"\n\nif username:\n    print(f\"Hello, {username}!\")\nelse:\n    print(\"The username is blank\")\n</code></pre> <p>Example Output:</p> <pre><code>The username is blank\n</code></pre> <p>Here's an example of a truthy value:</p> <pre><code>num_bananas = 2\n\nif num_bananas:\n    print(\"We have bananas!\")\nelse:\n    print(\"We have no bananas!\")\n</code></pre> <p>Example Output:</p> <pre><code>We have bananas!\n</code></pre>"},{"location":"python/python-language/#float","title":"<code>float</code>","text":"<p>The <code>float</code> data type represents a decimal number:</p> <pre><code>total_cost = 29.99\n</code></pre>"},{"location":"python/python-language/#int","title":"<code>int</code>","text":"<p>The <code>int</code> data type represents a whole number:</p> <pre><code>num_tacos_eaten = 12\n</code></pre>"},{"location":"python/python-language/#converting-str-to-int","title":"Converting <code>str</code> to <code>int</code>","text":"<p>You can use the <code>int()</code> function to convert a <code>str</code> to an <code>int</code>:</p> <pre><code>age = int(\"13\")\n</code></pre> <p>This is often combined with the <code>input()</code> function when you prompt the user for a numeric data type:</p> <pre><code>age = int(input(\"How old are you? \"))\n</code></pre>"},{"location":"python/python-language/#str","title":"<code>str</code>","text":"<p>The <code>str</code> data type represents a text value:</p> <pre><code>name = \"Daniel\"\n</code></pre>"},{"location":"python/python-language/#string-concatenation","title":"String concatenation","text":"<p>If you need to combine a variable and a <code>str</code>, you can use the <code>+</code> operator. This technique is called string concatenation:</p> <pre><code>name = \"Daniel\"\ngreeting = \"Hello, \" + name\n\nprint(greeting) # Hello, Daniel\n</code></pre>"},{"location":"python/python-language/#string-interpolation","title":"String interpolation","text":"<p>Another way to combine a variable and a <code>str</code> is using <code>f-strings</code>. This technique is called string interpolation, and it is the preferred way to combine variables and <code>str</code>:</p> <pre><code>name = \"Daniel\"\nage = 35\n\nprint(f\"I'm {name} and I'm {age} years old.\")\n</code></pre> <p>Example Output:</p> <pre><code>I'm Daniel and I'm 35 years old.\n</code></pre> <p>You can also use multiline f-strings if you have a large block of text that you want to insert variables into:</p> <pre><code>name = \"Brandon\"\nplanet_name = \"Krypton\"\nnumber = \"250\"\nanimal = \"Zebra\"\n\nstory = f\"\"\"\nHello, my name is astronaut {name}, and I am on my way to planet\n{planet_name}. I will be gone for {number} days. Please take care of my\n{animal} for me.\n\"\"\"\n\nprint(story)\n</code></pre> <p>Example Output:</p> <pre><code>Hello, my name is astronaut Brandon, and I am on my way to planet\nKrypton. I will be gone for 250 days. Please take care of my\nZebra for me.\n</code></pre>"},{"location":"python/python-language/#multiline-strings","title":"Multiline strings","text":"<p>Multiline strings allow you to write large blocks of text in a single <code>print()</code> statement:</p> <pre><code>menu = \"\"\"\n    Welcome to Dan's Taco Stand!\n\n    Tacos       $2\n    Burritos    $5\n    Nachos      $3\n\n    Place your order by clicking *Order Now*\n\"\"\"\n\nprint(menu)\n</code></pre> <p>Example Output:</p> <pre><code>    Welcome to Dan's Taco Stand!\n\n    Tacos       $2\n    Burritos    $5\n    Nachos      $3\n\n    Place your order by clicking *Order Now*\n</code></pre>"},{"location":"python/python-language/#removing-the-intial-newline-of-a-multiline-string","title":"<code>Removing the intial newline of a multiline string</code>","text":"<p>You can remove the initial newline from a multiline string using the <code>\\</code> character:</p> <pre><code>options = \"\"\"\\\n    (1) View All Contacts (2) View Contact\n    (3) Add Contact (4) Update Contact\n    (5) Remove Contact (6) Exit\n\"\"\"\n\nprint(options)\n</code></pre> <p>Example Output:</p> <pre><code>    (1) View All Contacts (2) View Contact\n    (3) Add Contact (4) Update Contact\n    (5) Remove Contact (6) Exit\n</code></pre>"},{"location":"python/python-language/#raw-strings","title":"Raw strings","text":"<p>Raw strings (<code>str</code> prefaced with an <code>r</code>) tell Python to not interpret special <code>str</code> characters. You use them in CWHQ courses to print ASCII art and ensure it formats correctly.</p> <p>Generally, <code>r</code> strings will also be multiline strings, but this isn't required:</p> <pre><code>mr_nibbles = r\"\"\"\n        |\\---/|\n        | o_o |\n         \\_^_/\n\"\"\"\n\nprint(mr_nibbles)\n</code></pre> <p>Example Output:</p> <pre><code>        |\\---/|\n        | o_o |\n         \\_^_/\n</code></pre>"},{"location":"python/python-language/#getting-the-number-of-characters-in-a-str","title":"Getting the number of characters in a <code>str</code>","text":"<p>You can use the <code>len()</code> function to get the number of characters in a <code>str</code>:</p> <pre><code>name = \"Daniel\"\n\nlen(name)  # 6\n</code></pre>"},{"location":"python/python-language/#checking-if-a-str-ends-with-a-set-of-characters","title":"Checking if a <code>str</code> ends with a set of characters","text":"<p>The <code>str.endswith()</code> method lets you check if a <code>str</code> ends with a given pattern:</p> <pre><code>email_addresses = [\"djs@cwhq.com\", \"alecg@auburn.edu\", \"samh@bridges.com\"]\n\nfor email_address in email_addresses:\n    if email_address.endswith(\".edu\"):\n        print(f\"{email_address} is a school address\")\n    elif email_address.endswith(\"cwhq.com\"):\n        print(f\"{email_address} is a CWHQ employee address\")\n    else:\n        print(f\"I don't know what {email_address} is for\")\n</code></pre> <p>Example Output:</p> <pre><code>djs@cwhq.com is a CWHQ employee address\nalecg@auburn.edu is a school address\nI don't know what sam@bridges.com is for\n</code></pre>"},{"location":"python/python-language/#sanitizing-user-input","title":"Sanitizing user input","text":"<p>User's do strange things, but using <code>str.lower()</code> and <code>str.strip()</code> can help your program to validate <code>str</code> data types.</p> <p><code>str.lower()</code> makes a <code>str</code> lowercase:</p> <pre><code># Imagine a user entered \"Pizza\" with an uppercase P\nfavorite_food = \"Pizza\"\n\nif favorite_food.lower() == \"pizza\":\n    print(\"That's my favorite food!\")\n</code></pre> <p>Example Output:</p> <pre><code>That's my favorite food!\n</code></pre> <p><code>str.strip()</code> removes leading or trailing whitespace from a <code>str</code>:</p> <pre><code># Imagine a user entered \" pizza\" with a leading space character\nfavorite_food = \" pizza\"\n\nif favorite_food.strip() == \"pizza\":\n    print(\"That's my favorite food!\")\n</code></pre> <p>Example Output:</p> <pre><code>That's my favorite food!\n</code></pre> <p>You can chain these methods together to sanitize a <code>str</code> completely:</p> <pre><code># What a mess! Extra spaces before/after and odd capitalization\nfavorite_food = \" PIzZa  \"\n\nif favorite_food.strip().lower() == \"pizza\":\n    print(\"That's my favorite food!\")\n</code></pre> <p>Example Output:</p> <pre><code>That's my favorite food!\n</code></pre>"},{"location":"python/python-language/#string-multiplication","title":"String Multiplication","text":"<p>You can multiply a <code>str</code> by a number if you want to make copies of a <code>str</code>:</p> <pre><code>num_hamburgers = 3\n\u201c\ud83c\udf54\u201d * num_hamburgers\n</code></pre> <p>Example Output:</p> <pre><code>\ud83c\udf54\ud83c\udf54\ud83c\udf54\n</code></pre>"},{"location":"python/python-language/#splitting-strings","title":"Splitting strings","text":"<p>You can split strings into a <code>list</code> based on a separator string using the <code>str.split()</code> method. The separator is not included in the results:</p> <pre><code>sentence = \"I love coding so much!\"\n\n# splitting on spaces makes a list of words\nwords = sentence.split(\" \")\n\nprint(words) # [\"I\", \"love\", \"coding\", \"so\", \"much!\"]\n\n\n# splitting on a longer separator\nwords2 = sentence.split(\"love\")\n\nprint(words2) [\"I \", \" coding so much!\"]\n</code></pre>"},{"location":"python/python-language/#none","title":"<code>None</code>","text":"<p>The <code>None</code> data type represents the absence of a value. It is the default return value for any function without an explicit <code>return</code> statement:</p> <pre><code>def say_hi():\n    print(\"Hello\")\n    # Nothing is returned here...\n\n\n# Nothing is returned from `say_hi()`, so `return_value` holds `None`\nreturn_value = say_hi()\nprint(return_value)  # None\n</code></pre> <p>If you use a <code>return</code> statement to exit a function early, but don't explicitly provide a value for the <code>return</code> statement, <code>None</code> is also returned.</p> <pre><code>def divide(numerator, denominator):\n    if denominator == 0:\n        print(\"You can't divide by 0!\")\n        # Implicitly returns `None`\n        return\n\n    return numerator / denominator\n\n\nquotient = divide(3, 0)\nprint(quotient)  # None\n</code></pre> <p>Further Reading</p> <ul> <li>The Python Library Reference - Text Sequence Type</li> <li>The Python Library Reference - Numeric Types</li> <li>The Python Tutorial - Strings</li> <li>Think Python - Values and Types</li> <li>Think Python - Strings</li> <li>Real Python - Python 3's f-Strings</li> <li>Real Python - Strings and Character Data in Python</li> </ul>"},{"location":"python/python-language/#data-structures","title":"Data Structures","text":"<p>Data structures allow you to efficiently store and access groups of items. Think of them like different storage containers you may use around the house.</p>"},{"location":"python/python-language/#list","title":"<code>list</code>","text":"<p>The <code>list</code> data structure is used to store data in ordered slots. It is known as mutable sequence type, which means it can be modified after creation.</p> <p>Usually, the items in a <code>list</code> are homogeneous, which means they represent a group of similar items of the same data type:</p> <pre><code>names = [\"alecg\", \"danielj\", \"dimas\"]\nmenu_prices = [4.50, 5.75, 3.00]\nids = [184, 294, 832, 98, 4]\n</code></pre> <p>You can write a list on multiple lines if you want. The trailing comma is recommended but not required:</p> <pre><code>foods = [\n    \"tacos\",\n    \"pizza\",\n    \"nachos\",\n    \"ice cream\",\n    \"asparagus\",\n]\n</code></pre>"},{"location":"python/python-language/#accessing-items-in-a-list","title":"Accessing items in a <code>list</code>","text":"<p>You can access individual items in a <code>list</code> using the <code>[]</code> characters and the index number of the item. The index numbers start at 0:</p> <pre><code>names = [\"alecg\", \"danielj\", \"dimas\"]\n\nprint(names[0])  # alecg\nprint(names[1])  # danielj\nprint(names[2])  # dimas\n</code></pre>"},{"location":"python/python-language/#adding-an-item-to-a-list","title":"Adding an item to a <code>list</code>","text":"<p>To add an item to a <code>list</code> after it has been created, you can use the <code>list.append()</code> method. The <code>list.append()</code> method adds the item to the end of the list:</p> <pre><code>names = [\"alecg\", \"danielj\", \"dimas\"]\n\nnames.append(\"samh\")\n\nprint(names)  # ['alecg', 'danielj', 'dimas', 'samh']\n</code></pre>"},{"location":"python/python-language/#updating-an-item-in-a-list","title":"Updating an item in a <code>list</code>","text":"<p>To update a <code>list</code> item, replace the value at the index:</p> <pre><code>names = [\"alecg\", \"danielj\", \"dimas\"]\n\nnames[1] = \"django\"\n\nprint(names)  # ['alecg', 'django', 'dimas']\n</code></pre>"},{"location":"python/python-language/#removing-an-item-from-a-list","title":"Removing an item from a <code>list</code>","text":"<p>To remove an item from a <code>list</code>, you can use the <code>list.remove()</code> method:</p> <pre><code>names = [\"alecg\", \"danielj\", \"dimas\"]\n\nnames.remove(\"alecg\")\n\nprint(names)  # ['danielj', 'dimas']\n</code></pre> <p>If you want to remove an item from a <code>list</code> by its index number, use the <code>list.pop()</code> method:</p> <pre><code>names = [\"alecg\", \"danielj\", \"dimas\"]\n\nnames.pop(0)\n\nprint(names)  # ['danielj', 'dimas']\n</code></pre>"},{"location":"python/python-language/#looping-through-a-list","title":"Looping through a <code>list</code>","text":"<p>To loop through the items in a <code>list</code>, use a <code>for</code> loop. Note the convention of using the plural <code>names</code> for the <code>list</code> and the singular <code>name</code> for the loop-iteration variable:</p> <pre><code>names = [\"alecg\", \"danielj\", \"dimas\"]\n\nprint(\"This documentation is brought to you by:\")\nfor name in names:\n    print(name)\n</code></pre> <p>Example Output:</p> <pre><code>This documentation is brought to you by:\nalecg\ndanielj\ndimas\n</code></pre>"},{"location":"python/python-language/#getting-the-number-of-items-in-a-list","title":"Getting the number of items in a <code>list</code>","text":"<p>To get the number of items in a <code>list</code>, use the <code>len()</code> function:</p> <pre><code>names = [\"alecg\", \"danielj\", \"dimas\"]\n\nnum_names = len(names)\n\nprint(num_names)  # 3\n</code></pre>"},{"location":"python/python-language/#checking-if-an-item-is-contained-in-a-list","title":"Checking if an item is contained in a <code>list</code>","text":"<p>To check if an item is contained in a <code>list</code>, use the <code>in</code> operator:</p> <pre><code>names = [\"alecg\", \"danielj\", \"dimas\"]\n\n\"alecg\" in names  # True\n\"samh\" in names   # False\n</code></pre> <p>The <code>in</code> operator is generally used as part of a conditional statement:</p> <pre><code>names = [\"alecg\", \"danielj\", \"dimas\"]\n\nif \"alecg\" in names:\n    print(\"alecg is in the 'names' list\")\nelse:\n    print(\"alecg is NOT in the 'names' list\")\n\nif \"samh\" in names:\n    print(\"samh is in the 'names' list\")\nelse:\n    print(\"samh is NOT in the 'names' list\")\n</code></pre> <p>Example Output:</p> <pre><code>alecg is in the 'names' list\nsamh is NOT in the 'names' list\n</code></pre>"},{"location":"python/python-language/#sorting-a-list","title":"Sorting a <code>list</code>","text":"<p>To sort the values in a list, use the <code>.sort()</code> method. The sort is in-place, which means it reorders the original list instead of making a copy:</p> <pre><code>names = [\"danielj\", \"alecg\", \"dimas\"]\nnames.sort()\n\nprint(names)  # ['alecg', 'danielj', 'dimas']\n</code></pre> <p>You can pass keyword arguments to the <code>list.sort()</code> method to customize the way the <code>list</code> is sorted.</p> <p>For example, the <code>key</code> argument can be a function to run on each item of the <code>list</code> before sorting:</p> <pre><code>names = [\"Danielj\", \"alecg\", \"Dimas\"]\nnames.sort()\n\n# Notice how these aren't sorted correctly? Uppercase letters are \"smaller\"\n# than lowercase letters in the sorting algorithm that `sort()` uses!\nprint(names)  # ['Danielj', 'Dimas', 'alecg']\n\nnames.sort(key=str.lower)\n\n# Now, everything is sorted correctly, and the original values haven't been\n# changed. `sort()` only uses the `key` function during the sorting process.\nprint(names)  # ['alecg', 'Danielj', 'Dimas']\n</code></pre> <p>The <code>reverse</code> keyword argument of <code>list.sort()</code> is used to sort from high-to-low instead of low-to-high. It expects a <code>bool</code> value:</p> <pre><code>names = [\"danielj\", \"alecg\", \"dimas\"]\nnames.sort(reverse=True)\n\nprint(names)  # ['dimas', 'danielj', 'alecg']\n</code></pre> <p>To see an alternative way of sorting, look up the built in <code>sorted()</code> function.</p> <p>Further Reading</p> <ul> <li>The Python Library Reference - Common Sequence Operations</li> <li>The Python Library Reference - Mutable Sequence Types</li> <li>The Python Library Reference - <code>len()</code></li> <li>The Python Tutorial - Lists</li> <li>Think Python - Lists</li> </ul>"},{"location":"python/python-language/#dict","title":"<code>dict</code>","text":"<p>The <code>dict</code> data structure is used to store data in key/value pairs:</p> <pre><code>staff = {\n    \"danielj\": \"Curriculum Developer\",\n    \"alecg\": \"Curriculum Instructor\",\n    \"dimas\": \"Designer\",\n}\n</code></pre> <p>You can use the <code>dict()</code> function to build a <code>dict</code> as well, note that the keys are keyword arguments:</p> <pre><code>staff = dict(\n    danielj=\"Curriculum Developer\",\n    alecg=\"Curriculum Instructor\",\n    dimas=\"Designer\",\n)\n</code></pre>"},{"location":"python/python-language/#accessing-items-in-a-dict","title":"Accessing items in a <code>dict</code>","text":"<p>You have to know the key to access an individual item in a <code>dict</code>:</p> <pre><code>staff = {\n    \"danielj\": \"Curriculum Developer\",\n    \"alecg\": \"Curriculum Instructor\",\n    \"dimas\": \"Designer\",\n}\n\ndaniel_job = staff[\"danielj\"]\nprint(f\"Daniel is a {daniel_job}.\")  # Daniel is a Curriculum Developer.\n\nalec_job = staff[\"alecg\"]\nprint(f\"Alec is a {alec_job}.\")  # Alec is a Curriculum Instructor.\n\ndima_job = staff[\"dimas\"]\nprint(f\"Dima is a {dima_job}.\")  # Dima is a Designer.\n</code></pre> <p>If you need to pull a value from a <code>dict</code> inside an <code>f-string</code>, you must use different quote characters for the key (if it's a <code>str</code>).</p> <pre><code>students = {\n    \"Vicki\": \"3rd grade\",\n    \"Sam\": \"4th grade\",\n    \"Tammy\": \"4th grade\",\n}\n\nprint(f\"Vicki is in {students['Vicki']}\")\n# Vicki is in 3rd grade\n\nprint(f\"Sam is in {students['Sam']}\")\n# Sam is in 4th grade\n\nprint(f\"Tammy is in {students['Tammy']}\")\n# Tammy is in 4th grade\n</code></pre>"},{"location":"python/python-language/#adding-an-item-to-a-dict","title":"Adding an item to a <code>dict</code>","text":"<p>You can add an item to a <code>dict</code> by providing the key/value pair (it's the same syntax as updating an item):</p> <pre><code>staff = {\n    \"danielj\": \"Curriculum Developer\",\n    \"alecg\": \"Curriculum Instructor\",\n    \"dimas\": \"Designer\",\n}\n\nstaff[\"django\"] = \"Director Of Pug Snorts\"\n\nprint(staff)  # {'danielj': 'Curriculum Developer', 'alecg': 'Curriculum Instructor', 'dimas': 'Designer', 'django': 'Director Of Pug Snorts'}\n</code></pre>"},{"location":"python/python-language/#updating-an-item-in-a-dict","title":"Updating an item in a <code>dict</code>","text":"<p>To update an item in a <code>dict</code>, you must know the key:</p> <pre><code>staff = {\n    \"danielj\": \"Curriculum Developer\",\n    \"alecg\": \"Curriculum Instructor\",\n    \"dimas\": \"Designer\",\n}\n\nstaff[\"danielj\"] = \"Burrito Taste-Tester\"\n\nprint(staff)  # {'danielj': 'Burrito Taste-Tester', 'alecg': 'Curriculum Instructor', 'dimas': 'Designer'}\n</code></pre>"},{"location":"python/python-language/#removing-an-item-from-a-dict","title":"Removing an item from a <code>dict</code>","text":"<p>To remove an item from a <code>dict</code>, use the <code>dict.pop()</code> method:</p> <pre><code>staff = {\n    \"danielj\": \"Curriculum Developer\",\n    \"alecg\": \"Curriculum Instructor\",\n    \"dimas\": \"Designer\",\n}\n\nstaff.pop(\"danielj\")\n\nprint(staff)  # {'alecg': 'Curriculum Instructor', 'dimas': 'Designer'}\n</code></pre>"},{"location":"python/python-language/#looping-through-a-dict","title":"Looping through a <code>dict</code>","text":"<p>To loop through a <code>dict</code>, you generally use the <code>dict.items()</code> method like this:</p> <pre><code>staff = {\n    \"danielj\": \"Curriculum Developer\",\n    \"alecg\": \"Curriculum Instructor\",\n    \"dimas\": \"Designer\",\n}\n\nfor name, job in staff.items():\n    print(f\"{name} is a {job}.\")\n</code></pre> <p>Example Output:</p> <pre><code>danielj is a Curriculum Developer.\nalecg is a Curriculum Instructor.\ndimas is a Designer.\n</code></pre> <p>If you just want to loop over the keys of a <code>dict</code>, you can use a <code>for</code> loop just as you would with a <code>list</code>:</p> <pre><code>staff = {\n    \"danielj\": \"Curriculum Developer\",\n    \"alecg\": \"Curriculum Instructor\",\n    \"dimas\": \"Designer\",\n}\n\nprint(\"CWHQ staff:\")\nfor name in staff:\n    print(name)\n</code></pre> <p>Example Output:</p> <pre><code>danielj\nalecg\ndimas\n</code></pre>"},{"location":"python/python-language/#getting-the-keys-from-a-dict","title":"Getting the keys from a <code>dict</code>","text":"<p>If you need to get all of the keys from a <code>dict</code>, use the <code>dict.keys()</code> method. Note, you'll usually want to cast the result to a <code>list</code>, which is why the <code>list()</code> function is used here:</p> <pre><code>staff = {\n    \"danielj\": \"Curriculum Developer\",\n    \"alecg\": \"Curriculum Instructor\",\n    \"dimas\": \"Designer\",\n}\n\nnames = list(staff.keys())\n\nprint(f\"Here are all the names in the staff dict: {names}\")\n</code></pre> <p>Example Output:</p> <pre><code>Here are all the names in the staff dict: ['danielj', 'alecg', 'dimas']\n</code></pre>"},{"location":"python/python-language/#getting-the-values-from-a-dict","title":"Getting the values from a <code>dict</code>","text":"<p>If you need to get all of the values from a <code>dict</code>, use the <code>dict.values()</code> method. Note, you'll usually want to cast the result to a <code>list</code>, which is why the <code>list()</code> function is used here:</p> <pre><code>staff = {\n    \"danielj\": \"Curriculum Developer\",\n    \"alecg\": \"Curriculum Instructor\",\n    \"dimas\": \"Designer\",\n}\n\njobs = list(staff.values())\n\nprint(f\"Here are all the jobs in the staff dict: {jobs}\")\n</code></pre> <p>Example Output:</p> <pre><code>Here are all the jobs in the staff dict: ['Curriculum Developer', 'Curriculum Instructor', 'Designer']\n</code></pre>"},{"location":"python/python-language/#getting-the-number-of-items-in-a-dict","title":"Getting the number of items in a <code>dict</code>","text":"<p>You can use the <code>len()</code> function to get the number of items in a <code>dict</code>:</p> <pre><code>staff = {\n    \"danielj\": \"Curriculum Developer\",\n    \"alecg\": \"Curriculum Instructor\",\n    \"dimas\": \"Designer\",\n}\n\nnumber_of_staff = len(staff)\n\nprint(f\"We have {number_of_staff} people on our staff.\")  # We have 3 people on our staff.\n</code></pre>"},{"location":"python/python-language/#checking-if-an-item-is-contained-in-a-dict","title":"Checking if an item is contained in a <code>dict</code>","text":"<p>To check if an item is contained in a <code>dict</code>, use the <code>in</code> operator:</p> <pre><code>students = {\n    \"Vicki\": \"3rd grade\",\n    \"Sam\": \"4th grade\",\n    \"Tammy\": \"4th grade\",\n}\n\nif \"Vicki\" in students:\n    print(\"Vicki is a student here\")\n</code></pre> <p>Example Output:</p> <pre><code>Vicki is a student here\n</code></pre> <p>You can use the <code>not</code> operator before the <code>in</code> operator to test if a key is not in a <code>dict</code>:</p> <pre><code>students = {\n    \"Vicki\": \"3rd grade\",\n    \"Sam\": \"4th grade\",\n    \"Tammy\": \"4th grade\",\n}\n\nif \"Daniel\" not in students:\n    print(\"Daniel is NOT a student here\")\n</code></pre> <p>Example Output:</p> <pre><code>Daniel is NOT a student here\n</code></pre>"},{"location":"python/python-language/#using-dictget-to-test-if-an-item-is-in-a-dict","title":"<code>Using dict.get() to test if an item is in a dict</code>","text":"<p>The <code>dict.get()</code> method can be used as an alternative to <code>in</code> and <code>not</code> <code>in</code>. It returns the value of the given key or the special <code>None</code> value, which is used to indicate the absence of any valid value. The <code>is</code> operator is similar to <code>==</code>, but it checks if the two values are the same exact thing in memory:</p> <pre><code>students = {\n    \"Vicki\": \"3rd grade\",\n    \"Sam\": \"4th grade\",\n    \"Tammy\": \"4th grade\",\n}\n\nif students.get(\"Vicki\") is not None:\n    print(\"Vicki is a student here\")\n\n\nif students.get(\"Daniel\") is None:\n    print(\"Daniel is NOT a student here\")\n</code></pre> <p>Example Output:</p> <pre><code>Vicki is a student here\nDaniel is NOT a student here\n</code></pre> <p>Further Reading</p> <ul> <li>Real Python - Dictionaries in Python</li> <li>The Python Library Reference - Mapping Types: <code>dict</code></li> <li>The Python Tutorial - Dictionaries</li> <li>Think Python - Dictionaries</li> </ul>"},{"location":"python/python-language/#functions","title":"Functions","text":"<p>Functions allow you to group related statements together to perform a task. They help to implement the D.R.Y.(Don't Repeat Yourself) principle because they reduce unnecessary repetition.</p>"},{"location":"python/python-language/#built-in-functions","title":"Built-in functions","text":"<p>Python comes with many built-in functions. We'll cover some of the most common that you'll see in CodeWizardsHQ courses below.</p>"},{"location":"python/python-language/#float_1","title":"<code>float()</code>","text":"<p>The <code>float()</code> function converts data to a <code>float</code>:</p> <pre><code>pi = float(\"3.14\")\n\nprint(pi)  # 3.14\ntype(pi)  # &lt;class 'float'&gt;\n\ntwo = float(2)\n\nprint(two)  # 2.0\ntype(two)  # &lt;class 'float'&gt;\n</code></pre>"},{"location":"python/python-language/#input","title":"<code>input()</code>","text":"<p>The <code>input()</code> function allows you to prompt a user. The user's response is returned as a <code>str</code>, which you can store in a variable:</p> <pre><code>name = input(\"What is your name? \")\nprint(f\"Nice to meet you, {name}!\")\n</code></pre> <p>Example Output:</p> <pre><code>What is your name? Daniel\nNice to meet you, Daniel!\n</code></pre>"},{"location":"python/python-language/#int_1","title":"<code>int()</code>","text":"<p>The <code>int()</code> function converts data to an <code>int</code>:</p> <pre><code>int_pi = int(3.14)\n\nprint(int_pi)  # 3\ntype(int_pi)  # &lt;class 'int'&gt;\n\nmeaning_of_life = int(\"42\")\n\nprint(meaning_of_life)  # 42\ntype(meaning_of_life)  # &lt;class 'int'&gt;\n</code></pre>"},{"location":"python/python-language/#len","title":"<code>len()</code>","text":"<p>The <code>len()</code> function returns the length of a sequence such as a <code>list</code> or <code>str</code>:</p> <pre><code>number_of_characters = len(\"How many characters are in this str?\")\nprint(number_of_characters)  # 36\n\nfavorite_foods = [\"tacos\", \"pizza\", \"nachos\", \"burritos\"]\n\nnumber_of_foods = len(favorite_foods)\nprint(number_of_foods)  # 4\n</code></pre>"},{"location":"python/python-language/#list_1","title":"<code>list()</code>","text":"<p>The <code>list()</code> function creates a list from a sequence such as the result of <code>dict.keys()</code>, <code>dict.values()</code>, or a <code>str</code>:</p> <pre><code>character_list = list(\"Hello!\")\nprint(character_list)  # ['H', 'e', 'l', 'l', 'o', '!']\n\nstaff = {\n    \"danielj\": \"Curriculum Developer\",\n    \"alecg\": \"Curriculum Instructor\",\n    \"dimas\": \"Designer\",\n}\n\nnames = list(staff.keys())\nprint(names)  # ['danielj', 'alecg', 'dimas']\n\njobs = list(staff.values())\nprint(jobs)  # ['Curriculum Developer', 'Curriculum Instructor', 'Designer']\n</code></pre>"},{"location":"python/python-language/#open","title":"<code>open()</code>","text":"<p>The <code>open()</code> function opens a file and returns it as a file object. It has two parameters <code>file</code> and <code>mode</code>.</p> <pre><code>#opening \"my_file.txt\" in read mode\nfile = open(\"my_file.txt\", \"r\")\n\ncontents = file.read()\n\nprint(contents)\n\nfile.close()\n</code></pre> Mode Meaning <code>\"r\"</code> Read-only mode <code>\"w\"</code> Write mode. Will overwrite all data in the file or create a new one if it doesn't exist <code>\"a\"</code> Append mode. Will add data to the end of the file, or create a new one if it doesn't exist <p>After you are finished with a file, call the <code>.close()</code> method.</p>"},{"location":"python/python-language/#looping-through-a-file-line-by-line","title":"Looping through a file line by line","text":"<p>To process the file contents line by line, you can use a <code>for</code> loop to go throught the <code>file</code> object</p> <pre><code>file = open(\"recipes.txt\", \"r\")\n\ncounter = 0\nfor line in file:\n    counter += 1\n    if \"taco\" in line:\n       print(f\"found taco on line {counter}\")\n\nprint(f\"there are {counter} lines in the file\")\nfile.close()\n</code></pre>"},{"location":"python/python-language/#print","title":"<code>print()</code>","text":"<p>The <code>print()</code> function displays text on the screen:</p> <pre><code>print(\"Hello, world!\")  # Hello, world!\n</code></pre>"},{"location":"python/python-language/#using-special-characters-with-print","title":"Using special characters with <code>print()</code>","text":"<p>You can use special characters such as <code>\\n</code> and <code>\\t</code> to format the text a bit. The <code>\\n</code> adds a newline (like hitting enter on your keyboard) and the <code>\\t</code> adds a tab:</p> <pre><code>print(\"Line 1\\nLine 2\\nLine 3\\n\")\nprint(\"\\tThis is tabbed over\\n\\tThis too.\")\n</code></pre> <p>Example Output:</p> <pre><code>Line 1\nLine 2\nLine 3\n\n        This is tabbed over\n        This too.\n</code></pre>"},{"location":"python/python-language/#using-the-splat-operator-to-print-a-list","title":"Using the splat (<code>*</code>) operator to print a <code>list</code>","text":"<p>You an use the splat (<code>*</code>) operator to print the items of a <code>list</code>:</p> <pre><code>names = [\"alecg\", \"danielj\", \"dimas\"]\n\nprint(*names)  # alecg danielj dimas\n</code></pre>"},{"location":"python/python-language/#using-the-sep-parameter","title":"Using the <code>sep</code> parameter","text":"<p>The <code>sep</code> parameter of <code>print()</code> let's you specifiy a given separator to add between each item passed to <code>print()</code>. It is commonly used in combination with the splat (<code>*</code>) operator to print the items of a <code>list</code> with a given separator between each item:</p> <pre><code>names = [\"alecg\", \"danielj\", \"dimas\"]\n\nprint(*names, sep=\" -- \")  # alecg -- danielj -- dimas\n</code></pre>"},{"location":"python/python-language/#range","title":"<code>range()</code>","text":"<p>The <code>range()</code> function is mainly used for counter-controlled repetition with a <code>for</code> loop:</p> <pre><code>for num in range(1, 4):\n    print(f\"{num} potato\")\n</code></pre> <p>Example Output:</p> <pre><code>1 potato\n2 potato\n3 potato\n</code></pre> <p>Note that the last number is 3 in the example above, not 4!</p>"},{"location":"python/python-language/#using-the-step-parameter-of-the-range-function","title":"Using the <code>step</code> parameter of the <code>range()</code> function","text":"<p>The <code>range()</code> function takes a third argument, <code>step</code>, which allows you to generate sequences of numbers separated by a given step:</p> <pre><code>for num in range(1, 11, 3):\n    print(num)\n</code></pre> <p>Example Output:</p> <pre><code>1\n4\n7\n10\n</code></pre>"},{"location":"python/python-language/#round","title":"<code>round()</code>","text":"<p>The <code>round()</code> function is used to round a decimal number (<code>float</code>) to an integer or to round a decimal number to a given number of digits after the decimal point:</p> <pre><code>pi = 3.14159\n\npi_integer = round(pi)\nprint(pi_integer)  # 3\n\npi_two_decimal_points = round(pi, 2)\nprint(pi_two_decimal_points)  # 3.14\n</code></pre>"},{"location":"python/python-language/#sorted","title":"<code>sorted()</code>","text":"<p>The <code>sorted()</code> function is used to sort a <code>list</code>:</p> <pre><code>names = [\"danielj\", \"alecg\", \"dimas\"]\nsorted_names = sorted(names)\n\nprint(sorted_names)  # ['alecg', 'danielj', 'dimas']\n</code></pre> <p>You can pass keyword arguments to the <code>sorted()</code> function to customize the way the <code>list</code> is sorted.</p> <p>For example, the <code>key</code> argument can be a function to run on each item of the <code>list</code> before sorting:</p> <pre><code>names = [\"Danielj\", \"alecg\", \"Dimas\"]\nsorted_names = sorted(names)\n\n# Notice how these aren't sorted correctly? Uppercase letters are \"smaller\"\n# than lowercase letters in the sorting algorithm that `sort()` uses!\nprint(sorted_names)  # ['Danielj', 'Dimas', 'alecg']\n\nsorted_names = sorted(names, key=str.lower)\n\n# Now, everything is sorted correctly, and the original values haven't been\n# changed. `sort()` only uses the `key` function during the sorting process.\nprint(sorted_names)  # ['alecg', 'Danielj', 'Dimas']\n</code></pre> <p>The <code>reverse</code> keyword argument of <code>sort()</code> is used to sort from high-to-low instead of low-to-high. It expects a <code>bool</code> value:</p> <pre><code>names = [\"danielj\", \"alecg\", \"dimas\"]\nreverse_sorted_names = sorted(names, reverse=True)\n\nprint(reverse_sorted_names)  # ['dimas', 'danielj', 'alecg']\n</code></pre>"},{"location":"python/python-language/#str_1","title":"<code>str()</code>","text":"<p>The <code>str()</code> function turns its argument into a <code>str</code> data type. This comes in handy if you have a number but want to treat it like a <code>str</code>:</p> <pre><code>meaning_of_life = 42\nprint(\"The meaning of life is \" + str(meaning_of_life))\n</code></pre> <p>Example Output:</p> <pre><code>The meaning of life is 42\n</code></pre> <p>If you use <code>f-strings</code>, you don't have to worry about converting numbers to <code>str</code> when working with <code>str</code> data:</p> <pre><code>meaning_of_life = 42\nprint(f\"The meaning of life is {meaning_of_life}\")\n</code></pre> <p>Example Output:</p> <pre><code>The meaning of life is 42\n</code></pre> <p>Further Reading</p> <ul> <li>The Python Library Reference - Built-in Functions</li> </ul>"},{"location":"python/python-language/#user-defined-functions","title":"User-defined functions","text":"<p>You define a function using the <code>def</code> keyword, and function definitions go at the TOP of your file:</p> <pre><code>def say_hello():\n    print(\"Hello!\")\n</code></pre>"},{"location":"python/python-language/#calling-a-function","title":"Calling a function","text":"<p>Defining a function does not run the statements in the body of the function. To run a function, you call it like this:</p> <pre><code>def say_hello():\n    print(\"Hello!\")\n\n\nsay_hello()  # Hello!\n</code></pre>"},{"location":"python/python-language/#adding-parameters-to-a-function","title":"Adding parameters to a function","text":"<p>When you define a function, you can add parameters that the function caller should pass in. Parameters are like variables, but the value of the variable is set by the function caller, not the function definer:</p> <pre><code>def say_hello(name):\n    print(f\"Hello, {name}!\")\n</code></pre>"},{"location":"python/python-language/#passing-arguments-to-a-function","title":"Passing arguments to a function","text":"<p>If a function accepts parameters, you need to pass them in when you call the function. The values you pass to the function are called the arguments to the function:</p> <pre><code>def say_hello(name):\n    print(f\"Hello, {name}!\")\n\n\nsay_hello(\"Daniel\")  # Hello, Daniel!\n</code></pre>"},{"location":"python/python-language/#returning-a-value-from-a-function","title":"Returning a value from a function","text":"<p>You can return a value from a function by using the <code>return</code> keyword:</p> <pre><code>def add(number_1, number_2):\n    total = number_1 + number_2\n    return total\n</code></pre>"},{"location":"python/python-language/#capturing-a-functions-return-value","title":"Capturing a function's return value","text":"<p>If a function returns a value, you can capture it in a varible:</p> <pre><code>def add(number_1, number_2):\n    total = number_1 + number_2\n    return total\n\n\ntotal = add(2, 3)\nprint(total)  # 5\n</code></pre> <p>You can also use the value immediately in another function, like <code>print()</code>:</p> <pre><code>def add(number_1, number_2):\n    total = number_1 + number_2\n    return total\n\n\nprint(add(2, 3))  # 5\nprint(f\"2 + 3 = {add(2, 3)}\")  # 2 + 3 = 5\n</code></pre>"},{"location":"python/python-language/#indentation-in-functions","title":"Indentation in functions","text":"<p>The base-level of indentation in a function is 4 spaces. If you have another statement inside your function that also requires indentation (like a conditional statement or loop), you need to indent the body of that statement by 4 more spaces:</p> <pre><code>def say_hello(name):\n    print(f\"Hello, {name}!\")\n    if name == \"Daniel\":\n        print(\"That's a cool name!\")\n    else:\n        print(\"Nice to meet you!\")\n\n\nsay_hello(\"Daniel\")\nsay_hello(\"Alec\")\n</code></pre> <p>Example Output:</p> <pre><code>Hello, Daniel!\nThat's a cool name!\n\nHello, Alec!\nNice to meet you!\n</code></pre>"},{"location":"python/python-language/#using-an-early-return-statement-to-exit-a-function","title":"Using an early <code>return</code> statement to exit a function","text":"<p>A <code>return</code> statement can be used to exit a function. This is normally used when you want to verify (with a conditional statement) that some preconditions are valid before continuing to execute a function body:</p> <pre><code>def greet_codewizard(name):\n    if name not in [\"danielj\", \"alecg\", \"dimas\"]:\n        print(\"I don't know you!\")\n        return\n\n    print(f\"Hello, {name}!\")\n\n\ngreet_codewizard(\"danielj\")  # Hello, danielj!\ngreet_codewizard(\"django\")   # I don't know you!\n</code></pre> <p>Further Reading</p> <ul> <li>Real Python - Defining Your Own Python Function</li> <li>The Python Tutorial - Defining Functions</li> <li>Think Python - Functions</li> <li>Think Python - Fruitful Functions</li> </ul>"},{"location":"python/python-language/#loops","title":"Loops","text":"<p>If you need to repeat something in your programs, you'll need to use one of Python's looping mechanisms.</p>"},{"location":"python/python-language/#for","title":"<code>for</code>","text":"<p>A <code>for</code> loop is generally used to loop over a sequence, such as a <code>list</code>:</p> <pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\n\nfor fruit in fruits:\n    print(fruit)\n</code></pre> <p>Example Output:</p> <pre><code>apple\nbanana\ncherry\n</code></pre> <p>You can also use a <code>for</code> loop to loop over the characters in a <code>str</code>:</p> <pre><code>name = \"Daniel\"\n\nfor letter in name:\n    print(letter)\n</code></pre> <p>Example Output:</p> <pre><code>D\na\nn\ni\ne\nl\n</code></pre>"},{"location":"python/python-language/#counter-controlled-repetition","title":"Counter-controlled repetition","text":"<p>You can combine the <code>range()</code> function and the <code>for</code> loop to create a counter-controlled loop:</p> <pre><code>for num in range(1, 4):\n    print(f\"{num} potato\")\n</code></pre> <p>Example Output:</p> <pre><code>1 potato\n2 potato\n3 potato\n</code></pre>"},{"location":"python/python-language/#searching-for-a-value-in-a-for-loop","title":"Searching for a value in a <code>for</code> loop","text":"<p>You can use a conditional statement inside a <code>for</code> loop to search for a particular item in a <code>list</code> and then do something. Note the indentation:</p> <pre><code>fruits = [\"orange\", \"banana\", \"cherry\", \"apple\"]\n\nfor fruit in fruits:\n    if fruit == \"orange\":\n        print(f\"{fruit} is the best fruit\")\n</code></pre> <p>Example Output:</p> <pre><code>orange is the best fruit\n</code></pre>"},{"location":"python/python-language/#finding-a-value-in-a-for-loop-to-use-after-the-loop-finishes","title":"Finding a value in a <code>for</code> loop to use after the loop finishes","text":"<p>You can store an item from the <code>for</code> loop for later use by creating a variable before the <code>for</code> loop with some default value.</p> <pre><code>fruits = [\"orange\", \"banana\", \"cherry\", \"apple\"]\n\n# The best_fruit will be a str, so the empty str is a good default.\nbest_fruit = \"\"\n\nfor fruit in fruits:\n    if fruit == \"orange\":\n        best_fruit = fruit\n\n\n# The best fruit is orange.\nprint(f\"The best fruit is {best_fruit}.\")\n</code></pre>"},{"location":"python/python-language/#creating-a-new-list-in-a-for-loop","title":"Creating a new <code>list</code> in a <code>for</code> loop","text":"<p>Often, you'll want to loop through a <code>list</code> and build a new <code>list</code> from the contents of the original <code>list</code>. This technique is called mapping, and it's a common thing to do with <code>lists</code> and <code>for</code> loops:</p> <pre><code>prices = [10, 12, 5, 8]\ndiscounted_prices = []\n\nfor price in prices:\n    discounted_price = price - (price * .10)\n    discounted_prices.append(discounted_price)\n\n\n# Here are your discounted prices:[9, 10.8, 4.5, 7.2]\nprint(f\"Here are your discounted prices: {discounted_prices}\")\n</code></pre>"},{"location":"python/python-language/#creating-a-list-of-a-pre-determined-size-with-a-for-loop","title":"Creating a <code>list</code> of a pre-determined size with a <code>for</code> loop","text":"<p>Using a <code>for</code> loop and the <code>range()</code> function, you can fill a <code>list</code> to a pre-determined size:</p> <pre><code>fruits = []\n\nfor num in range(1,5):\n    fruit = input(f\"Enter fruit number {num}: \")\n    fruits.append(fruit)\n</code></pre> <p>Example Output:</p> <pre><code>Enter fruit number 1: apples\nEnter fruit number 2: bananas\nEnter fruit number 3: oranges\nEnter fruit number 4: kiwi\n</code></pre>"},{"location":"python/python-language/#nested-loops","title":"Nested loops","text":"<p>You can nest <code>for</code> loops inside of each other to perform and action once for each time in the outer <code>for</code> loop:</p> <pre><code>fruits = [\"pizza\", \"taco\"]\n\nfor fruit in fruits:\n    for num in range(1, 4):\n        print(f\"{num} {fruit}\")\n</code></pre> <p>Example Output:</p> <pre><code>1 pizza\n2 pizza\n3 pizza\n1 taco\n2 taco\n3 taco\n</code></pre> <p>Further Reading</p> <ul> <li>Real Python - Python <code>for</code> Loops</li> <li>The Python Tutorial - <code>for</code> Statements</li> <li>The Python Tutorial - The <code>range()</code> function</li> <li>Think Python - Traversal with a <code>for</code> loop</li> </ul>"},{"location":"python/python-language/#while","title":"<code>while</code>","text":"<p>A <code>while</code> loop is generally used to perform indefinite repetition (when you don't know how many times you want to loop).</p> <p>For example, you can use a <code>while</code> loop to ask a user something until they answer correctly:</p> <pre><code>keep_looping = True  # This variable controls whether we loop or not.\n\nwhile keep_looping:\n    user_guess = input(\"What is the meaning of life? \")\n\n    if user_guess == \"42\":\n        print(\"That's correct!\")\n        keep_looping = False  # Stops the loop.\n    else:\n        print(\"That's incorrect! Please try again.\")\n</code></pre> <p>Example Output:</p> <pre><code>What is the meaning of life? To make money\nThat's incorrect! Please try again.\nWhat is the meaning of life? To eat tacos\nThat's incorrect! Please try again.\nWhat is the meaning of life? 42\nThat's correct!\n</code></pre>"},{"location":"python/python-language/#using-break-to-exit-a-loop","title":"Using <code>break</code> to exit a loop","text":"<p>You can also use a <code>break</code> statement instead of using a variable to control how many times an indefinite <code>while</code> loop runs:</p> <pre><code>while True:\n    user_guess = input(\"What is the meaning of life? \")\n\n    if user_guess == \"42\":\n        print(\"That's correct!\")\n        break  # Stops the loop.\n    else:\n        print(\"That's incorrect! Please try again.\")\n</code></pre> <p>Example Output:</p> <pre><code>What is the meaning of life? To make money\nThat's incorrect! Please try again.\nWhat is the meaning of life? To eat tacos\nThat's incorrect! Please try again.\nWhat is the meaning of life? 42\nThat's correct!\n</code></pre>"},{"location":"python/python-language/#counter-controlled-repetition_1","title":"Counter-controlled repetition","text":"<p>You can use a <code>while</code> loop to perform counter-controlled repetition as well, but the <code>for</code> loop with the <code>range()</code> function is generally preferred:</p> <pre><code>counter = 0\n\nwhile counter &lt; 5:\n    print(counter)\n    counter += 1  # If you forget this, you'll have an infinite loop!\n</code></pre> <p>Example Output:</p> <pre><code>0\n1\n2\n3\n4\n</code></pre> <p>Further Reading</p> <ul> <li>Real Python - Python <code>while</code> Loops</li> <li>Think Python - The <code>while</code> statement</li> </ul>"},{"location":"python/python-language/#math-operations","title":"Math Operations","text":"<p>Python is used heavily in math-related fields, so there are a large suite of tools for performing mathematical operations built-in to the language.</p>"},{"location":"python/python-language/#arithmetic-operators","title":"Arithmetic Operators","text":"<p>The four basic arithmetic operations (addition, subtraction, multiplication, division) are similar to how you would use them with calculator:</p> <pre><code>total = 8 + 2\ndifference = 8 - 2\nproduct = 8 * 2\nquotient = 8 / 2\n\nprint(f\"8 + 2 = {total}\")       # 8 + 2 = 10\nprint(f\"8 - 2 = {difference}\")  # 8 - 2 = 6\nprint(f\"8 * 2 = {product}\")     # 8 * 2 = 16\nprint(f\"8 / 2 = {quotient}\")    # 8 / 2 = 4.0\n</code></pre> <p>Note that in the example above, division always produces a <code>float</code>.</p>"},{"location":"python/python-language/#arithmetic-only-works-between-numbers","title":"Arithmetic only works between numbers","text":"<p>Both data types must be numeric data types, you cannot perform arithmetic between a <code>str</code> and a number.</p> <pre><code>num_tacos =  2  + \"1\"  # no\nnum_tacos = \"2\" + \"1\"  # no\n\nnum_tacos = \"1\" *  3   # no\nnum_tacos = \"1\" * \"3\"  # no\n</code></pre>"},{"location":"python/python-language/#other-operators","title":"Other Operators","text":"<p>There are a few other common operators that Pythonistas use when performing math in Python.</p>"},{"location":"python/python-language/#modulo","title":"Modulo","text":"<p>The modulo operator (<code>%</code>) returns the remainder after division:</p> <pre><code>10 % 3  # 1\n</code></pre>"},{"location":"python/python-language/#power","title":"Power","text":"<p>The power operator (<code>**</code>) multiplies a number by itself a given number of times:</p> <pre><code>3 ** 2  # 9\n</code></pre>"},{"location":"python/python-language/#floor-division","title":"Floor division","text":"<p>The floor division operator (<code>//</code>) removes any fractional portion after divison:</p> <pre><code>10 // 3  # 3\n</code></pre> <p>Further Reading</p> <ul> <li>The Python Tutorial - Numbers</li> <li>Real Python - Numbers in Python</li> </ul>"},{"location":"python/python-language/#modules","title":"Modules","text":"<p>Python is often called a batteries-included language because of the plethora of built-in modules that the language contains. Modules are just Python files full of functionality that you don't have to write yourself; you merely import the things you want from a module and use them in your programs.</p>"},{"location":"python/python-language/#getting-access-to-functions-in-modules","title":"Getting access to functions in modules","text":"<p>To get a function from a module, you import it. There are several different types of imports, which we'll briefly cover below.</p>"},{"location":"python/python-language/#importing-a-single-function","title":"Importing a single function","text":"<p>To import a single function, just write the function name (without parentheses) after the <code>import</code> keyword:</p> <pre><code>from module_name import function_name\n</code></pre>"},{"location":"python/python-language/#importing-multiple-functions","title":"Importing multiple functions","text":"<p>If you need to import multiple functions from a module, separate them by commas:</p> <pre><code>from module_name import some_function, some_other_function\n</code></pre>"},{"location":"python/python-language/#importing-all-functions","title":"Importing all functions","text":"<p>To import all items from a module (not recommended generally, but we do this in some courses like E24 and M11), use the <code>*</code> import syntax:</p> <pre><code>from module_name import *\n</code></pre>"},{"location":"python/python-language/#renaming-imported-functions","title":"Renaming imported functions","text":"<p>Sometimes, its nice to rename a function you import from a module (like when the function name is really long or confusing). You can do this using the <code>as</code> keyword:</p> <pre><code>from module_name import some_really_long_function_name as short_name\n</code></pre> <p>Further Reading</p> <ul> <li>The Python Library Reference</li> <li>The Python Tutorial - Modules</li> <li>Real Python - Python Modules and Packages</li> </ul>"},{"location":"python/python-language/#built-in-modules","title":"Built-in modules","text":"<p>Python comes with 100s of built-in modules. We'll briefly cover a few that are used often at CWHQ in this section. See the Further Reading section for details on where you can browse all of Python's built-in modules.</p>"},{"location":"python/python-language/#datetime","title":"datetime","text":"<p>The <code>datetime</code> module is used to work with times and dates.</p>"},{"location":"python/python-language/#getting-a-todays-date","title":"<code>Getting a today's date</code>","text":"<p>You use the <code>date.today()</code> method to get today's date in the form YYYY-MM-DD:</p> <pre><code>from datetime import date\n\n# Let's pretend it's February 10, 2023 for this example\ncurrent_date = date.today()\nprint(current_date)  # 2023-02-10\n</code></pre>"},{"location":"python/python-language/#random","title":"random","text":"<p>The <code>random</code> module is used to add randomness to your programs.</p>"},{"location":"python/python-language/#getting-a-random-integer","title":"<code>Getting a random integer</code>","text":"<p>You use the <code>randint()</code> function to get a random integer between two numbers:</p> <pre><code>from random import randint\n\n# Get an integer between 1 and 10\nrandom_integer = randint(1, 10)\nprint(random_integer)  # 3\n</code></pre>"},{"location":"python/python-language/#getting-a-random-value-from-a-sequence","title":"<code>Getting a random value from a sequence</code>","text":"<p>You use the <code>choice()</code> function to get a random value from a sequence (<code>str</code>, <code>list</code>, or <code>tuple</code>):</p> <pre><code>from random import choice\n\nnames = [\"daniel\", \"alec\", \"dima\"]\nrandom_name = choice(names)\n\nprint(random_name)  # dima\n</code></pre>"},{"location":"python/python-language/#shuffling-the-items-in-a-sequence","title":"<code>Shuffling the items in a sequence</code>","text":"<p>The <code>shuffle()</code> function can be used to shuffle the items in a sequence (<code>list</code> or <code>str</code>). The function modifies the original sequence, so there's no return value.</p> <pre><code>from random import shuffle\n\nanswers = [\"Five\", \"Seven\", \"Eight\"]\nshuffle(answers)\n\nprint(answers)  # ['Seven', 'Eight', 'Five']\n</code></pre> <p>Further Reading</p> <ul> <li>The Python Standard Library</li> <li>The Python Standard Library - <code>random</code></li> </ul>"},{"location":"python/python-language/#sqlite3","title":"sqlite3","text":"<p>The <code>sqlite3</code> module is used to interact with SQLite databases from Python. This section will focus on the <code>sqlite3</code> module, and won't go into much detail on the SQL language at all. If you're interested in understanding SQL, check out the SQL Language Docs.</p> <p>The following examples will all reference a SQLite DB called <code>user-info.db</code> with a single table called <code>users</code> in the shape below:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 user_id \u2502 username \u2502  password  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    1    \u2502   djs    \u2502 mypa$$word \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    2    \u2502  django  \u2502    w0ff    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    3    \u2502  alecg   \u2502    c0de    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"python/python-language/#connecting-to-a-sqlite-database-from-python","title":"<code>Connecting to a SQLite database from Python</code>","text":"<p>To use the <code>sqlite3</code> module, you must first import it:</p> <pre><code>import sqlite3\n</code></pre> <p>Once the <code>sqlite3</code> module is imported, you'll want to connect to a SQLite database. SQLite databases are just plain files, and the file extension is irrelevant (some people use <code>.db</code>, others <code>.sqlite3</code>, etc.).</p> <p>The <code>sqlite3.connect()</code> method is how you connect to a SQLite database. Note that it will create the database if it doesn't exist.</p> <pre><code>import sqlite3\n\nconnection = sqlite3.connect(\"user-info.db\")\n</code></pre> <p>Just like with files, you'll need to close the <code>connection</code> to a DB when you're done with it. The <code>connection.close()</code> method should be used for this purpose. Note that no further queries can be run against the DB after that line completes.</p> <pre><code>import sqlite3\n\nconnection = sqlite3.connect(\"user-info.db\")\n\n# Do some stuff with the DB...\n\n# When you're done with the DB connection, close it!\nconnection.close()\n</code></pre>"},{"location":"python/python-language/#executing-sql-statements-from-python","title":"<code>Executing SQL statements from Python</code>","text":"<p>To execute a SQL statement from a Python script, you need to create a <code>cursor</code> from your <code>connection</code> using the <code>connection.cursor()</code> method:</p> <pre><code>import sqlite3\n\nconnection = sqlite3.connect(\"user-info.db\")\ncursor = connection.cursor()\n</code></pre> <p>One you've created the <code>cursor</code> object, you can use the <code>cursor.execute()</code> method to execute a SQL <code>query</code> (in the form of a Python <code>str</code>) against the DB you've connected to:</p> <pre><code>import sqlite3\n\nconnection = sqlite3.connect(\"user-info.db\")\ncursor = connection.cursor()\n\nquery = \"\"\"\n    CREATE TABLE IF NOT EXISTS users (\n        user_id INTEGER PRIMARY KEY AUTOINCREMENT,\n        username TEXT UNIQUE NOT NULL,\n        password TEXT NOT NULL\n    );\n\"\"\"\n\ncursor.execute(query)\n</code></pre> <p>If you need to run multiple statements, you can use the <code>cursor.executescript()</code> method. It takes a <code>str</code> of the different SQL statements as an argument. Note that each statement must end with a semicolon when using <code>cursor.executescript()</code>:</p> <pre><code>import sqlite3\n\nconnection = sqlite3.connect(\"user-info.db\")\ncursor = connection.cursor()\n\nscript = \"\"\"\n    CREATE TABLE IF NOT EXISTS users (\n        user_id INTEGER PRIMARY KEY AUTOINCREMENT,\n        username TEXT UNIQUE NOT NULL,\n        password TEXT NOT NULL\n    );\n\n    INSERT INTO users (username, password) VALUES ('steve', 'm!necr@ft');\n    INSERT INTO users (username, password) VALUES ('mario', 'mu$hr00m@n');\n\"\"\"\n\ncursor.executescript(script)\n</code></pre> <p>When using <code>cursor.executescript()</code>, you can pull the <code>script</code> from a file as well:</p> <p>script.sql</p> <pre><code>CREATE TABLE IF NOT EXISTS users (\n    user_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\nINSERT INTO users (username, password) VALUES ('steve', 'm!necr@ft');\nINSERT INTO users (username, password) VALUES ('mario', 'mu$hr00m@n');\n</code></pre> <p>main.py</p> <pre><code>import sqlite3\n\nconnection = sqlite3.connect(\"user-info.db\")\ncursor = connection.cursor()\n\nfile = open(\"script.sql\", \"r\")\nscript = file.read()\n\ncursor.executescript(script)\n</code></pre> <p>Note</p> <p>The <code>cursor.executescript()</code> method should only be used to do things like create tables, insert values, etc. You can't use it with <code>SELECT</code> statements.</p>"},{"location":"python/python-language/#modifying-sql-dbs-from-python","title":"<code>Modifying SQL DBs from Python</code>","text":"<p>If your query modifies the database (as <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code> queries do) you'll need to use the <code>connection.commit()</code> method to ensure the changes are stored in the DB:</p> <pre><code>import sqlite3\n\nconnection = sqlite3.connect(\"user-info.db\")\ncursor = connection.cursor()\n\nquery = \"\"\"\n    INSERT INTO users (username, password) VALUES (\"alexg\", \"r@wkcl!m3\");\n\"\"\"\n\ncursor.execute(query) # Careful! The changes aren't stored in the DB yet...\nconnection.commit()  # Now, the changes are stored in the DB!\n</code></pre> <p>The DB would look like this after the changes above, note that user <code>alexg</code> has been added:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 user_id \u2502 username \u2502  password  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    1    \u2502   djs    \u2502 mypa$$word \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    2    \u2502  django  \u2502    w0ff    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    3    \u2502  alecg   \u2502    c0de    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    4    \u2502  alexg   \u2502 r@wkcl!m3  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"python/python-language/#reading-data-from-a-sql-db-in-python","title":"<code>Reading data from a SQL DB in Python</code>","text":"<p>If you need to read data from a DB, then you'll have to fetch the results from the <code>cursor</code>.</p> <p>If you expect multiple results, <code>cursor.fetchall()</code> returns a <code>list</code> of <code>tuples</code>, where each <code>tuple</code> represents a row in the DB:</p> <pre><code>import sqlite3\n\nconnection = sqlite3.connect(\"user-info.db\")\ncursor = connection.cursor()\n\nquery = \"\"\"\n    SELECT * FROM users;\n\"\"\"\n\ncursor.execute(query)\nresults = cursor.fetchall()\n</code></pre> <p>The <code>results</code> variable from the example above would have this form:</p> <pre><code>[(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')]\n</code></pre> <p>If you want a single result (usally when using a <code>WHERE</code> clause with an <code>=</code> comparison), you use the <code>cursor.fetchone()</code> method to get a single <code>tuple</code> result representing the selection (one or more columns) from your query:</p> <pre><code>import sqlite3\n\nconnection = sqlite3.connect(\"user-info.db\")\ncursor = connection.cursor()\n\nquery = \"\"\"\n    SELECT * FROM users WHERE username = \"djs\";\n\"\"\"\n\ncursor.execute(query)\nresult = cursor.fetchone()\n</code></pre> <p>The <code>result</code> variable from the example above would have this form:</p> <pre><code>(1, 'djs', 'mypa$$word')\n</code></pre>"},{"location":"python/python-language/#using-row-factories","title":"Using Row Factories","text":"<p>Usually, fetched records from a SQLite DB are returned as a <code>list</code> of <code>tuples</code>, as you can see in the previous section. If you use a row factory, you'll get a <code>list</code> of <code>sqlite3.Row</code> objects instead:</p> <pre><code>import sqlite3\n\nconnection = sqlite3.connect(\"user-info.db\")\n\n# Allows us to get sqlite3.Row objects as results of queries\nconnection.row_factory = sqlite3.Row\n\ncursor = connection.cursor()\n\nquery = \"\"\"\n    SELECT * FROM users;\n\"\"\"\n\ncursor.execute(query)\nresults = cursor.fetchall()\n\nfor result in results:\n    print(result)\n</code></pre> <p>output</p> <pre><code>&lt;sqlite3.Row object at 0x7f82916e3c10&gt;\n&lt;sqlite3.Row object at 0x7f8290367790&gt;\n&lt;sqlite3.Row object at 0x7f8290367760&gt;\n</code></pre> <p>These <code>sqlite3.Row</code> objects behave like <code>dict</code>s, so you can access the each resulting row using the column name instead of the index number:</p> <pre><code>import sqlite3\n\nconnection = sqlite3.connect(\"user-info.db\")\nconnection.row_factory = sqlite3.Row\ncursor = connection.cursor()\n\n\nquery = \"\"\"\n    SELECT * FROM users;\n\"\"\"\n\ncursor.execute(query)\nresults = cursor.fetchall()\n\nfor result in results:\n    print(dict(result))\n\n\nfirst_result = results[0]\n\nprint(f\"user_id: {first_result['user_id']}\")\nprint(f\"username: {first_result['username']}\")\nprint(f\"password: {first_result['password']}\")\n</code></pre> <p>output </p> <pre><code>{'user_id': 1, 'username': 'djs', 'password': 'mypa$$word'}\n{'user_id': 2, 'username': 'django', 'password': 'w0ff'}\n{'user_id': 3, 'username': 'alecg', 'password': 'c0de'}\nuser_id: 1\nusername: djs\npassword: mypa$$word\n</code></pre> <p>The advantage to using a row factory is that you don't need to know the order of the columns in a table to access specific columns. You can instead simply use the column name.</p>"},{"location":"python/python-language/#getting-the-column-names-from-a-table","title":"<code>Getting the column names from a table</code>","text":"<p>SQLite has a <code>PRAGMA</code> statement (often used as as a table-valued function) that allows you to query metadata about a table. Using <code>PRAGMA_TABLE_INFO</code> is a handy way to pull the column names (or other metadata about the columns such as column constraints) from a table using a simple <code>SELECT</code> query, as in the example below:</p> <pre><code>import sqlite3\n\nconnection = sqlite3.connect(\"user-info.db\")\ncursor = connection.cursor()\n\nquery = \"\"\"\n    SELECT name AS column_name FROM PRAGMA_TABLE_INFO(\"users\");\n\"\"\"\n\ncursor.execute(query)\nresult = cursor.fetchall()\n</code></pre> <p>The <code>result</code> variable from the above query would have this form:</p> <pre><code>[('user_id',) ('username',) ('password',)]\n</code></pre>"},{"location":"python/python-language/#getting-the-primary-key-of-last-inserted-row","title":"<code>Getting the primary key of last inserted row</code>","text":"<p>When using an <code>AUTOINCREMENT</code> constraint on a <code>PRIMARY KEY</code> column, you let the SQLite DB create the <code>PRIMARY KEY</code> for each row as they are inserted. This means you won't know the <code>PRIMARY KEY</code> if you need to use it in further statements after a row has been inserted in the DB. </p> <p>Using the <code>cursor.lastrowid</code> property, you can get the <code>PRIMARY KEY</code> of the last row to be inserted in the DB and use it in further statements:</p> <pre><code>import sqlite3\n\nconnection = sqlite3.connect(\"users.sqlite\")\ncursor = connection.cursor()\n\n\ndef select_all_users():\n    query = \"\"\"\n        SELECT * FROM users;\n    \"\"\"\n\n    cursor.execute(query)\n    results = cursor.fetchall()\n    print(results)\n\n\nprint(\"Results before INSERT\")\nselect_all_users()\n\n\nquery = \"\"\"\n    INSERT INTO users (username, password) VALUES ('steve', 'm!n3cr@ft');\n\"\"\"\n\ncursor.execute(query)\nconnection.commit()\n\nprint(\"Results after INSERT\")\nselect_all_users()\n\n# Will give us the `user_id` of the last inserted user\nlast_user_id = cursor.lastrowid\n\nprint(f\"The ID of the last row inserted is: {last_user_id}\")\n</code></pre> <pre><code>Results before INSERT\n[(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')]\nResults after INSERT\n[(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de'), (4, 'steve', 'm!n3cr@ft')]\nThe ID of the last row inserted is: 4\n</code></pre> <p>Further Reading</p> <ul> <li>The Python Standard Library - <code>sqlite3</code></li> </ul>"},{"location":"python/python-language/#the-pass-statement","title":"The <code>pass</code> statement","text":"<p>You use the pass statement to act as a placeholder in a conditional statement or function definition. Programmers refer to this as \"stubbing-out\" the code block. No logic will run in the block a <code>pass</code> statement appears in. Python needs the <code>pass</code> statement because you can't have empty function or conditional blocks.</p>"},{"location":"python/python-language/#using-pass-in-a-function","title":"Using <code>pass</code> in a function","text":"<p>The <code>pass</code> statement can be used in a function definition as a placeholder before you write the main logic. This ensures your program still works but gives you a convenient way to see that you still need to implement some logic:</p> <pre><code>def order_pizza():\n    pass\n</code></pre>"},{"location":"python/python-language/#using-pass-in-a-conditional-statement","title":"Using <code>pass</code> in a conditional statement","text":"<p>The <code>pass</code> statement can also be used in a conditioal statement. This comes in handy if you know that you need a conditional statement but you don't have any of the logic ready yet:</p> <pre><code>action = input(\"What do you want to do? \")\n\nif action == \"Order Pizza\":\n    order_pizza()\nelif action == \"Order Tacos\":\n    pass\n</code></pre>"},{"location":"python/python-language/#variables","title":"Variables","text":"<p>Variables assign a name to a value. The naming convention in Python is to use snake_case for variable names, and UPPER_SNAKE_CASE for named constants.</p>"},{"location":"python/python-language/#creating-a-variable","title":"Creating a variable","text":"<p>You create a variable by assigning a name to a value using the assignment operator (<code>=</code>):</p> <pre><code>my_name = \"Daniel\"\nmy_age = 35\n</code></pre>"},{"location":"python/python-language/#creating-a-named-constant","title":"Creating a named constant","text":"<p>Named constants can replace magic numbers in your program.</p> <p>For example, what does <code>1</code> and <code>2</code> represent here?</p> <pre><code>if user_choice == 1:\n    # Do something cool...\nelif user_choice == 2:\n    # Do another cool thing...\n</code></pre> <p><code>1</code> and <code>2</code> in the example above are magic numbers because we would have to hunt down their meaning by reading more of the program. If we instead create a named constant for each, the meaning is clearer:</p> <pre><code>ORDER_TACOS = 1\nORDER_PIZZA = 2\n\nif user_choice == ORDER_TACOS:\n    # Order tacos...\nelif user_choice == ORDER_PIZZA:\n    # Order pizza\n</code></pre>"},{"location":"python/python-language/#updating-the-value-of-a-variable","title":"Updating the value of a variable","text":"<p>You can update the value stored in a variable like this:</p> <pre><code>score = 0\nscore = score + 1   # 0 + 1\n\nprint(score)        # 1\n\nscore = score + 1   # 1 + 1\n\nprint(score)        # 2\n</code></pre> <p>The same works for decreasing the value of a variable:</p> <pre><code>score = 3\nscore = score - 1   # 3 - 1\n\nprint(score)        # 2\n\nscore = score - 1   # 2 - 1\n\nprint(score)        # 1\n</code></pre> <p>There's also a shorthand notation:</p> <pre><code>score = 0\nscore += 1    # 0 + 1\n\nprint(score)  # 1\n\nscore += 1    # 1 + 1\n\nprint(score)  # 2\n\nscore -= 1    # 2 - 1\n\nprint(score)  # 1\n\nscore -= 1    # 1 - 1\n\nprint(score)  # 0\n</code></pre>"},{"location":"python/python-language/#global-variables","title":"Global variables","text":"<p>Any variable created outside of function definition is considered a <code>global</code> variable. If you want to modify a <code>global</code> variable from inside a function definition, you need to use the <code>global</code> keyword:</p> <pre><code># This is a global variable\nscore = 0\n\ndef update_score():\n    # Must do this to modify the variable\n    global score\n    # Now this is OK\n    score = score + 1   # 1\n</code></pre>"},{"location":"python/python-language/#using-literals-instead-of-variables","title":"Using literals instead of variables","text":"<p>You don't always need a variable to hold a value. If you're only going to use a value in a single place, it may make more sense to use the bare value (called a literal value) instead.</p> <p>For example, in this program, a random item is chosen from the <code>favorite_foods</code> <code>list</code>:</p> <pre><code>from random import choice\n\nfavorite_foods = [\"taco\", \"pizza\", \"fries\"]\nrandom_food = choice(favorite_foods)\n</code></pre> <p>If we're not going to use the <code>favorite_foods</code> <code>list</code> anywhere else in our program, we could write the same logic like this:</p> <pre><code>from random import choice\n\nrandom_food = choice([\"taco\", \"pizza\", \"fries\"])\n</code></pre> <p>Note</p> <p>This example exists to show you that you can use a value in place of a variable. It is almost always more appropriate to give a good variable name to a value instead of using the literal value.</p> <p>Further Reading</p> <ul> <li>Real Python - Variables in Python</li> <li>Think Python - Variables, expressions and statements</li> </ul>"},{"location":"python/wizardlib/","title":"Wizardlib","text":"<p>Here, you'll find the documentation for CodeWizardHQ's Wizardlib Python library. We use this library in the following courses:</p> Elementary Middle School High School Programming Fundamentals with Python Introduction to Programming with Python Intro to Python Logic with Python Wizard Level 1 Capstone Modular Programming with Python Wizard Level 2 Capstone Python Game Development"},{"location":"python/wizardlib/#add_audio","title":"<code>add_audio()</code>","text":"<p>Adds an audio file.</p> <p>Function signature:</p> <pre><code>add_audio(filename)\n</code></pre> <p>Parameters:</p> <ul> <li><code>filename</code> (<code>str</code>) : The filename.</li> </ul> <p>Returns:</p> <ul> <li>The audio element.</li> </ul> <p>Example usage:</p> <pre><code>audio_element = add_audio(\"never-gonna-give-you-up.mp3\")\n</code></pre>"},{"location":"python/wizardlib/#add_background","title":"<code>add_background()</code>","text":"<p>Adds a background image.</p> <p>Function signature:</p> <pre><code>add_background(filename)\n</code></pre> <p>Parameters:</p> <ul> <li><code>filename</code> (<code>str</code>): The filename.</li> </ul> <p>Example usage:</p> <pre><code>add_background(\"flying-cats.png\")\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#add_background_audio","title":"<code>add_background_audio()</code>","text":"<p>Adds background audio which plays when you click the Start button.</p> <p>Function signature:</p> <pre><code>add_background_audio(filename)\n</code></pre> <p>Parameters:</p> <ul> <li><code>filename</code> (<code>str</code>): The filename.</li> </ul> <p>Example usage:</p> <pre><code>add_background_audio(\"never-gonna-give-you-up.mp3\")\n</code></pre>"},{"location":"python/wizardlib/#add_button","title":"<code>add_button()</code>","text":"<p>Adds a button.</p> <p>Function signature:</p> <pre><code>add_button(text)\n</code></pre> <p>Parameters:</p> <ul> <li><code>text</code> (<code>str</code>): The text on the button.</li> </ul> <p>Returns:</p> <ul> <li>The button element.</li> </ul> <p>Example usage:</p> <pre><code>button = add_button(\"Click Me\")\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#add_image","title":"<code>add_image()</code>","text":"<p>Adds an image to the page.</p> <p>Function signature:</p> <pre><code>add_image(filename, size)\n</code></pre> <p>Parameters:</p> <ul> <li><code>filename</code> (<code>str</code>): The filename.</li> <li><code>size</code> (<code>int</code>): The size, in pixels (optional).</li> </ul> <p>Returns:</p> <ul> <li>The image element.</li> </ul> <p>Example usage:</p> <pre><code>taco_image = add_image(\"taco.png\")\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#add_text","title":"<code>add_text()</code>","text":"<p>Adds text to the page.</p> <p>Function signature:</p> <pre><code>add_text(text, size)\n</code></pre> <p>Parameters:</p> <ul> <li><code>text</code> (<code>str</code>): The text to add to the page.</li> <li><code>size</code> (<code>int</code>): The size, in pixels (optional, defaults to 18).</li> </ul> <p>Returns:</p> <ul> <li>The text element.</li> </ul> <p>Example usage:</p> <pre><code>wizardlib_text = add_text(\"Wizardlib is cool!\")\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#add_text_input","title":"<code>add_text_input()</code>","text":"<p>Adds a text input to the page.</p> <p>Function signature:</p> <pre><code>add_text_input(placeholder)\n</code></pre> <p>Parameters:</p> <ul> <li><code>placeholder</code> (<code>str</code>): The text to display in the input box.</li> </ul> <p>Returns:</p> <ul> <li>The text input element.</li> </ul> <p>Example usage:</p> <pre><code>text_input = add_text_input(\"Enter your password:\")\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#animate_down","title":"<code>animate_down()</code>","text":"<p>Animates the <code>element</code> down by the given <code>distance</code>. Can optionally change the amount of time the animation takes and whether the <code>element</code> animates down and up repeatedly.</p> <p>Function signature:</p> <pre><code>animate_down(element, distance, time, loop)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element</code> (<code>element</code>): An element to animate.</li> <li><code>distance</code> (<code>int</code>): The distance the element should travel (in pixels).</li> <li><code>time</code> (<code>int</code>): The amount of seconds the animation should take (optional, defaults to 8).</li> <li><code>loop</code> (<code>bool</code>): Whether to repeatedly animate down and up (optional, defaults to <code>False</code>).</li> </ul> <p>Example usage:</p> <pre><code>taco_image = add_image(\"taco.jpg\")\nanimate_down(taco_image, 100)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#animate_left","title":"<code>animate_left()</code>","text":"<p>Animates the <code>element</code> left by the given <code>distance</code>. Can optionally change the amount of time the animation takes and whether the <code>element</code> animates left and right repeatedly.</p> <p>Function signature:</p> <pre><code>animate_left(element, distance, time, loop)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element</code> (<code>element</code>): An element to animate.</li> <li><code>distance</code> (<code>int</code>): The distance the element should travel (in pixels).</li> <li><code>time</code> (<code>int</code>): The amount of seconds the animation should take (optional, defaults to 8).</li> <li><code>loop</code> (<code>bool</code>): Whether to repeatedly animate left and right (optional, defaults to <code>False</code>).</li> </ul> <p>Example usage:</p> <pre><code>taco_image = add_image(\"taco.jpg\")\nanimate_left(taco_image, 100)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#animate_right","title":"<code>animate_right()</code>","text":"<p>Animates the <code>element</code> right by the given <code>distance</code>. Can optionally change the amount of time the animation takes and whether the <code>element</code> animates right and left repeatedly.</p> <p>Function signature:</p> <pre><code>animate_right(element, distance, time, loop)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element</code> (<code>element</code>): An element to animate.</li> <li><code>distance</code> (<code>int</code>): The distance the element should travel (in pixels).</li> <li><code>time</code> (<code>int</code>): The amount of seconds the animation should take (optional, defaults to 8).</li> <li><code>loop</code> (<code>bool</code>): Whether to repeatedly animate right and left (optional, defaults to <code>False</code>).</li> </ul> <p>Example usage:</p> <pre><code>taco_image = add_image(\"taco.jpg\")\nanimate_right(taco_image, 100)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#animate_up","title":"<code>animate_up()</code>","text":"<p>Animates the <code>element</code> up by the given <code>distance</code>. Can optionally change the amount of time the animation takes and whether the <code>element</code> animates up and down repeatedly.</p> <p>Function signature:</p> <pre><code>animate_up(element, distance, time, loop)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element</code> (<code>element</code>): An element to animate.</li> <li><code>distance</code> (<code>int</code>): The distance the element should travel (in pixels).</li> <li><code>time</code> (<code>int</code>): The amount of seconds the animation should take (optional, defaults to 8).</li> <li><code>loop</code> (<code>bool</code>): Whether to repeatedly animate up and down (optional, defaults to <code>False</code>).</li> </ul> <p>Example usage:</p> <pre><code>taco_image = add_image(\"taco.jpg\")\nanimate_up(taco_image, 100)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#bound_element","title":"<code>bound_element()</code>","text":"<p><code>bound_element()</code> allows you to keep an element, such as a piece of text or an image, inside of the screen while using animations or keyboard input.</p> <p>Function signature:</p> <pre><code>bound_element(element)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element</code> (<code>element</code>) : A text or image element you want to keep in the screen.</li> </ul> <p>Example usage:</p> <pre><code>wizard = add_image(\"images/wizard.png\", 100)\nposition_element(wizard, start_x, start_y)\nbound_element(wizard)\n</code></pre> <p>Example output:</p> <p></p> <p>Note</p> <p><code>bound_element()</code> only works in lessons 1 thru 4 of the M14 Capstone course!</p>"},{"location":"python/wizardlib/#check_collision","title":"<code>check_collision()</code>","text":"<p>If <code>element1</code> and <code>element2</code> collide, <code>function_to_run</code> is called.</p> <p>Function signature:</p> <pre><code>check_collision(element1, element2, function_to_run)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element1</code> (<code>element</code>): An element to check for collisions with.</li> <li><code>element2</code> (<code>element</code>): An element to check for collisions with.</li> <li><code>function_to_run</code> (<code>function</code>): The function to run if <code>element1</code> hits <code>element2</code>.</li> </ul> <p>Example usage:</p> <pre><code>def cat_caught_taco():\n    clear()\n    text = add_text(\"The kitty caught the taco!\")\n    position_element(text, \"center\", \"center\")\n\n\ndef move(key):\n    if key == \"w\":\n        move_up(cat_image, 10)\n    elif key == \"a\":\n        move_left(cat_image, 10)\n    elif key == \"s\":\n        move_down(cat_image, 10)\n    elif key == \"d\":\n        move_right(cat_image, 10)\n\n\ntaco_image = add_image(\"taco.jpg\", 100)\nposition_element(taco_image, \"center\", \"center\")\n\ncat_image = add_image(\"flying-cats.jpg\", 100)\nposition_element(cat_image, 700, 300)\n\nkeydown(move)\n\ncheck_collision(taco_image, cat_image, cat_caught_taco)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#clear","title":"<code>clear()</code>","text":"<p>Clear the page of all elements.</p> <p>Function signature:</p> <pre><code>clear()\n</code></pre> <p>Example usage:</p> <pre><code>def clear_page():\n    clear()\n    after_clear_text = add_text(\"Page was cleared\", 32)\n    position_element(after_clear_text, \"center\", \"center\")\n\n\nbefore_clear_text = add_text(\"This is on the page before clearing\", 32)\nposition_element(before_clear_text, \"center\", \"center\")\n\nclear_page_button = add_button(\"Clear Page\")\nposition_element(clear_page_button, \"center\", 400)\n\nclick(clear_page_button, clear_page)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#click","title":"<code>click()</code>","text":"<p>Call <code>function_to_run</code> when <code>element</code> is clicked.</p> <p>Function signature:</p> <pre><code>click(element, function_to_run)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element</code> (<code>element</code>): The element to click.</li> <li><code>function_to_run</code> (<code>function</code>): The function to run if <code>element</code> is clicked.</li> </ul> <p>Example usage:</p> <pre><code>def show_text():\n    text = add_text(\"Button was clicked!\", 32)\n    position_element(text, \"center\", \"center\")\n\n\nbutton = add_button(\"Click Me\")\nposition_element(button, \"center\", 400)\n\nclick(button, show_text)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#fade_in","title":"<code>fade_in()</code>","text":"<p>Fades the <code>element</code> from invisible to visible.</p> <p>Function signature:</p> <pre><code>fade_in(element)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element</code> (<code>element</code>): The element to fade in.</li> </ul> <p>Example usage:</p> <pre><code>def fade_text_in():\n    fade_in(hidden_text)\n\n\nhidden_text = add_text(\"Hidden Text\", 32)\nposition_element(hidden_text, \"center\", 400)\nfade_out(hidden_text)\n\nfade_in_button = add_button(\"Fade In\")\nposition_element(fade_in_button, \"center\", \"center\")\nclick(fade_in_button, fade_text_in)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#fade_out","title":"<code>fade_out()</code>","text":"<p>Fades the <code>element</code> from visible to invisible.</p> <p>Function signature:</p> <pre><code>fade_out(element)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element</code> (<code>element</code>): The element to fade out.</li> </ul> <p>Example usage:</p> <pre><code>def fade_text_out():\n    fade_out(text_to_hide)\n\n\ntext_to_hide = add_text(\"Text To Hide\", 32)\nposition_element(text_to_hide, \"center\", 400)\n\nfade_out_button = add_button(\"Fade Out\")\nposition_element(fade_out_button, \"center\", \"center\")\nclick(fade_out_button, fade_text_out)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#get_input_value","title":"<code>get_input_value()</code>","text":"<p>Gets the value of the input <code>element</code>.</p> <p>Function signature:</p> <pre><code>get_input_value(element)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element</code> (<code>element</code>): The element to get the value from.</li> </ul> <p>Example usage:</p> <pre><code>def login():\n    password = get_input_value(password_input)\n    clear()\n    if password == \"secretpassword\":\n        logged_in_text = add_text(\"You've logged in!\", 32)\n        position_element(logged_in_text, \"center\", 400)\n\n\npassword_input = add_text_input(\"Enter your password\")\nposition_element(password_input, \"center\", 400)\n\nlogin_button = add_button(\"Login\")\nposition_element(login_button, \"center\", \"center\")\nclick(login_button, login)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#jump","title":"<code>jump()</code>","text":"<p>Makes an image or text element move up and down (in a jumping motion).</p> <p>Function signature:</p> <pre><code>jump(element, jump_height, time)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element</code> (<code>element</code>): The element to make jump.</li> <li><code>jump_height</code> (<code>int</code>): The height the element should jump.</li> <li><code>time</code> (<code>int)</code>: The time (in seconds) that the element will be in the air during the jump (optional, default is 2 seconds).</li> </ul> <p>Example usage:</p> <pre><code>def make_jump(key):\n    if key == \" \":\n        jump(robot, 100, 1)\n\nrobot = add_image(\"images/robot.png\", 100)\nposition_element(robot, 600, 200)\nkeydown(make_jump)\n</code></pre> <p>Example output:</p> <p></p> <p>Note</p> <p><code>jump()</code> only works in E22: Logic with Python.</p>"},{"location":"python/wizardlib/#keydown","title":"<code>keydown()</code>","text":"<p>Runs <code>function_to_run</code> when a key is pressed. The key that is pressed will be passed as the first argument to <code>function_to_run</code> and will always be lowercase.</p> <p>Function signature:</p> <pre><code>keydown(function_to_run, fast=False)\n</code></pre> <p>Parameters:</p> <ul> <li><code>function_to_run</code> (<code>function</code>): The function to run when a key is pressed.</li> <li><code>fast</code> (<code>bool</code>): Use this flag whenever you expect the user to quickly press and release keys for movement if you want smooth movement.</li> </ul> <p>Note</p> <p>The <code>fast</code> flag is only available in courses that use <code>program.py</code> as their main application file.</p> <p>Example usage:</p> <pre><code>def key_logger(pressed_key):\n    update_text(last_key_pressed_text, f\"Last key pressed: {pressed_key}\")\n\n\nlast_key_pressed_text = add_text(\"Last key pressed: \", 32)\nposition_element(last_key_pressed_text, \"center\", 400)\n\nkeydown(key_logger)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#move_down","title":"<code>move_down()</code>","text":"<p>Moves the <code>element</code> down by the given <code>distance</code>.</p> <p>Function signature:</p> <pre><code>move_down(element, distance)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element</code> (<code>element</code>): The element to move down.</li> <li><code>distance</code> (<code>int</code>): The distance the <code>element</code> should travel (in pixels).</li> </ul> <p>Example usage:</p> <pre><code>def move_taco(pressed_key):\n    if pressed_key == \"w\":\n        move_up(taco_image, 10)\n    elif pressed_key == \"a\":\n        move_left(taco_image, 10)\n    elif pressed_key == \"s\":\n        move_down(taco_image, 10)\n    elif pressed_key == \"d\":\n        move_right(taco_image, 10)\n\n\ntaco_image = add_image(\"taco.jpg\", 100)\nposition_element(taco_image, \"center\", \"center\")\n\nkeydown(move_taco)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#move_left","title":"<code>move_left()</code>","text":"<p>Moves the <code>element</code> left by the given <code>distance</code>.</p> <p>Function signature:</p> <pre><code>move_left(element, distance)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element</code> (<code>element</code>): The element to move left.</li> <li><code>distance</code> (<code>int</code>): The distance the <code>element</code> should travel (in pixels).</li> </ul> <p>Example usage:</p> <pre><code>def move_taco(pressed_key):\n    if pressed_key == \"w\":\n        move_up(taco_image, 10)\n    elif pressed_key == \"a\":\n        move_left(taco_image, 10)\n    elif pressed_key == \"s\":\n        move_down(taco_image, 10)\n    elif pressed_key == \"d\":\n        move_right(taco_image, 10)\n\n\ntaco_image = add_image(\"taco.jpg\", 100)\nposition_element(taco_image, \"center\", \"center\")\n\nkeydown(move_taco)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#move_right","title":"<code>move_right()</code>","text":"<p>Moves the <code>element</code> right by the given <code>distance</code>.</p> <p>Function signature:</p> <pre><code>move_right(element, distance)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element</code> (<code>element</code>): The element to move right.</li> <li><code>distance</code> (<code>int</code>): The distance the <code>element</code> should travel (in pixels).</li> </ul> <p>Example usage:</p> <pre><code>def move_taco(pressed_key):\n    if pressed_key == \"w\":\n        move_up(taco_image, 10)\n    elif pressed_key == \"a\":\n        move_left(taco_image, 10)\n    elif pressed_key == \"s\":\n        move_down(taco_image, 10)\n    elif pressed_key == \"d\":\n        move_right(taco_image, 10)\n\n\ntaco_image = add_image(\"taco.jpg\", 100)\nposition_element(taco_image, \"center\", \"center\")\n\nkeydown(move_taco)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#move_up","title":"<code>move_up()</code>","text":"<p>Moves the <code>element</code> up by the given <code>distance</code>.</p> <p>Function signature:</p> <pre><code>move_up(element, distance)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element</code> (<code>element</code>): The element to move up.</li> <li><code>distance</code> (<code>int</code>): The distance the <code>element</code> should travel (in pixels).</li> </ul> <p>Example usage:</p> <pre><code>def move_taco(pressed_key):\n    if pressed_key == \"w\":\n        move_up(taco_image, 10)\n    elif pressed_key == \"a\":\n        move_left(taco_image, 10)\n    elif pressed_key == \"s\":\n        move_down(taco_image, 10)\n    elif pressed_key == \"d\":\n        move_right(taco_image, 10)\n\n\ntaco_image = add_image(\"taco.jpg\", 100)\nposition_element(taco_image, \"center\", \"center\")\n\nkeydown(move_taco)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#play_audio","title":"<code>play_audio()</code>","text":"<p>Plays the audio that <code>element</code> represents.</p> <p>Function signature:</p> <pre><code>play_audio(element)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element</code> (<code>element</code>): The audio element to play.</li> </ul> <p>Example usage:</p> <pre><code>laugh_audio = add_audio(\"laugh.mp3\")\nplay_audio(laugh_audio)\n</code></pre>"},{"location":"python/wizardlib/#position_element","title":"<code>position_element()</code>","text":"<p>Position the <code>element</code> at the given <code>x</code> and <code>y</code> position. The <code>x</code> and <code>y</code> arguments can be any <code>int</code>, or one of the position helpers:</p> Position Helper1 Helper2 Helper3 <code>x</code> <code>\"left\"</code> <code>\"center\"</code> <code>\"right\"</code> <code>y</code> <code>\"top\"</code> <code>\"center\"</code> <code>\"bottom\"</code> <p>Function signature:</p> <pre><code>position_element(element, x, y)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element</code> (<code>element</code>): The element to position.</li> <li><code>x</code> (<code>int</code>|<code>str</code>): The desired x-position of the <code>element</code>.</li> <li><code>y</code> (<code>int</code>|<code>str</code>): The desired y-position of the <code>element</code>.</li> </ul> <p>Example usage:</p> <pre><code>taco_image = add_image(\"taco.jpg\")\nposition_element(taco_image, \"center\", 400)\n</code></pre>"},{"location":"python/wizardlib/#set_background_color","title":"<code>set_background_color()</code>","text":"<p>Sets the background color of the page to <code>color</code>.</p> <p>Function signature:</p> <pre><code>set_background_color(color)\n</code></pre> <p>Parameters:</p> <ul> <li><code>color</code> (<code>str</code>): The desired background color.</li> </ul> <p>Example usage:</p> <pre><code>set_background_color(\"darksalmon\")\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#set_element_width","title":"<code>set_element_width()</code>","text":"<p>Sets the <code>element</code> to the given <code>width</code>.</p> <p>Function signature:</p> <pre><code>set_element_width(element, width)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element</code> (<code>element</code>): The element to adjust.</li> <li><code>width</code> (<code>int</code>): The desired width of the <code>element</code>.</li> </ul> <p>Example usage:</p> <pre><code>def shrink_taco():\n    set_element_width(taco_image, 100)\n\n\nshrink_taco_button = add_button(\"Shrink Taco\")\nposition_element(shrink_taco_button, \"center\", \"center\")\n\ntaco_image = add_image(\"taco.jpg\", 300)\nposition_element(taco_image, \"center\", 200)\n\nclick(shrink_taco_button, shrink_taco)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#set_font_size","title":"<code>set_font_size()</code>","text":"<p>Sets the font size of the <code>element</code> to the given <code>font_size</code>.</p> <p>Function signature:</p> <pre><code>set_font_size(element, font_size)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element</code> (<code>element</code>): The element to adjust.</li> <li><code>font_size</code> (<code>int</code>): The desired font_size of the <code>element</code>.</li> </ul> <p>Example usage:</p> <pre><code>def shrink_text():\n    set_font_size(text_element, 25)\n\n\nshrink_text_button = add_button(\"Shrink Font\")\nposition_element(shrink_text_button, \"center\", \"center\")\n\ntext_element = add_text(\"Shrink this text!\", 100)\nposition_element(text_element, \"center\", 300)\n\nclick(shrink_text_button, shrink_text)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#set_interval","title":"<code>set_interval()</code>","text":"<p>Runs <code>function_to_run</code> every <code>time</code> seconds.</p> <p>Function signature:</p> <pre><code>set_interval(function_to_run, time)\n</code></pre> <p>Parameters:</p> <ul> <li><code>function_to_run</code> (<code>function</code>): The function to run.</li> <li><code>time</code> (<code>int</code>): The time (in seconds) to wait before running the <code>function_to_run</code>.</li> </ul> <p>Example usage:</p> <pre><code>def create_ship():\n    ship = add_image(\"ship.png\", 100)\n    position_element(ship, 200, 100)\n    animate_right(ship, 2500, 10)\n\n\nset_interval(create_ship, 3)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#set_text_color","title":"<code>set_text_color()</code>","text":"<p>Sets the <code>color</code> of the <code>text_element</code>.</p> <p>Function signature:</p> <pre><code>set_text_color(text_element, color)\n</code></pre> <p>Parameters:</p> <ul> <li><code>text_element</code> (<code>element</code>): The text element to adjust.</li> <li><code>color</code> (<code>str</code>): The desired color of the <code>text_element</code>.</li> </ul> <p>Example usage:</p> <pre><code>red_text = add_text(\"This text is red\", 32)\nset_text_color(red_text, \"red\")\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#set_text_decoration","title":"<code>set_text_decoration()</code>","text":"<p>Sets the text decoration of the given <code>text_element</code>.</p> <p>Function signature:</p> <pre><code>set_text_decoration(text_element, decoration_string)\n</code></pre> <p>Parameters:</p> <ul> <li><code>text_element</code> (<code>element</code>): The text element to adjust.</li> <li><code>decoration_string</code> (<code>str</code>): The decoration string for the CSS property.</li> </ul> <p>Example usage:</p> <pre><code>text_element = add_text(\"Never Gonna Give You Up\", 42)\nset_text_decoration(text_element, \"underline dotted blue\")\n</code></pre> <p>Example output:</p> <p></p> <p>Read about different options for the decoration_string here</p>"},{"location":"python/wizardlib/#set_text_font","title":"<code>set_text_font()</code>","text":"<p>This function allows you to change the font of a text element in your program.</p> <p>Function signature:</p> <pre><code>set_text_font(text_element, font_name)\n</code></pre> <p>Parameters:</p> <ul> <li><code>text_element</code> (<code>element</code>): The text element to adjust.</li> <li><code>font_name</code> (<code>str</code>): The font to use for the <code>text_element</code>.</li> </ul> <p>Example usage:</p> <pre><code>game_over = add_text(\"GAME OVER\", 20)\nposition_element(game_over, \"center\", \"center\")\nset_text_font(game_over, \"game\")\n</code></pre> Available Fonts game lora quicksand roboto nabla <p>Note</p> <p><code>set_text_font()</code> only works in E22: Logic with Python</p>"},{"location":"python/wizardlib/#set_timeout","title":"<code>set_timeout()</code>","text":"<p>Runs <code>function_to_run</code> after <code>time</code> seconds.</p> <p>Function signature:</p> <pre><code>set_timeout(function_to_run, time)\n</code></pre> <p>Parameters:</p> <ul> <li><code>function_to_run</code> (<code>function</code>): The function to run.</li> <li><code>time</code> (<code>int</code>): The time (in seconds) to wait before running the <code>function_to_run</code>.</li> </ul> <p>Example usage:</p> <pre><code>def show_boo_text():\n    boo_text = add_text(\"BOO!!!\", 100)\n    position_element(boo_text, \"center\", 300)\n\n\nset_timeout(show_boo_text, 3)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#update_text","title":"<code>update_text()</code>","text":"<p>Changes the text in <code>text_element</code> to the <code>new_text</code>.</p> <p>Function signature:</p> <pre><code>update_text(text_element, new_text)\n</code></pre> <p>Parameters:</p> <ul> <li><code>text_element</code> (<code>element</code>): The element to adjust.</li> <li><code>new_text</code> (<code>str</code>): The new text for the <code>text_element</code>.</li> </ul> <p>Example usage:</p> <pre><code>def update_text_element():\n    update_text(text_element, \"Updated text\")\n\n\ntext_element = add_text(\"Original text\", 32)\nposition_element(text_element, \"center\", 400)\n\nupdate_text_button = add_button(\"Update Text\")\nposition_element(update_text_button, \"center\", \"center\")\n\nclick(update_text_button, update_text_element)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#remove_element","title":"<code>remove_element()</code>","text":"<p>Removes the <code>element</code> from the page.</p> <p>Function signature:</p> <pre><code>remove_element(element)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element</code> (<code>element</code>): The element to remove.</li> </ul> <p>Example usage:</p> <pre><code>def remove_taco():\n    remove_element(taco_image)\n\n\ntaco_image = add_image(\"taco.jpg\", 200)\nposition_element(taco_image, \"center\", 300)\n\nremove_taco_button = add_button(\"Remove Taco\")\nposition_element(remove_taco_button, \"center\", \"center\")\n\nclick(remove_taco_button, remove_taco)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#rotate_element","title":"<code>rotate_element()</code>","text":"<p>Rotates the <code>element</code> by the given number of <code>degrees</code>.</p> <p>Function signature:</p> <pre><code>rotate_element(element, degrees)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element</code> (<code>element</code>): The element to rotate.</li> <li><code>degrees</code> (<code>int</code>): The number of degrees to rotate the <code>element</code>.</li> </ul> <p>Example usage:</p> <pre><code>def rotate_taco():\n    rotate_element(taco_image, 180)\n\n\ntaco_image = add_image(\"taco.jpg\", 200)\nposition_element(taco_image, \"center\", 300)\n\nrotate_taco_button = add_button(\"Rotate Taco\")\nposition_element(rotate_taco_button, \"center\", \"center\")\n\nclick(rotate_taco_button, rotate_taco)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"python/wizardlib/#vanish","title":"<code>vanish()</code>","text":"<p>Removes the <code>element</code> from the page over a 1 second interval.</p> <p>Function signature:</p> <pre><code>vanish(element)\n</code></pre> <p>Parameters:</p> <ul> <li><code>element</code> (<code>element</code>): The element to remove.</li> </ul> <p>Example usage:</p> <pre><code>def vanish_taco():\n    vanish(taco_image)\n\n\ntaco_image = add_image(\"taco.jpg\", 200)\nposition_element(taco_image, \"center\", 300)\n\nvanish_taco_button = add_button(\"Vanish Taco\")\nposition_element(vanish_taco_button, \"center\", \"center\")\n\nclick(vanish_taco_button, vanish_taco)\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"sql/sql-language/","title":"SQL Language","text":"<p>SQL (Structured Query Language) is a language used to interact with databases. We use SQL in the following courses at CodeWizardsHQ:</p> Middle School High School Intro to Databases APIs and Databases Mastering APIs Professional Web App Development Mastering Databases Capstone 2 Capstone 3 Mastering MVC Framework Object Relational Mapping Capstone 3 <p>In this section of our documentation, you'll find references to most of the core SQL language features that we use in our CodeWizardsHQ courses. All of our courses interact with databases using Python + SQL, so we'll show the core SQL syntax first and then give a working example in Python.</p> <p>You'll also find many Further reading sections, which pull from these excellent SQL/Python resources:</p> <ul> <li>SQLBolt</li> <li>SQLite Tutorial</li> <li>Python.org Documentation</li> <li>Mode SQL Tutorial</li> </ul>"},{"location":"sql/sql-language/#what-is-a-relational-database","title":"What Is A Relational Database?","text":"<p>In a relational database, you structure your data in tables made up of rows and columns, kind of like an Excel spreadsheet. You can combine data from multiple tables using <code>JOIN</code>s or just pull data from a single table.</p> <p>For example, consider the two tables below:</p> <p>users table</p> user_id username password 1 djs mypa$$word 2 django w0ff 3 alecg c0de <p>teachers table</p> teacher_id user_id username is_admin 1 1 djs 1 2 3 alecg 0 <p>We could get the username and password of all users that are teachers and admins like this:</p> <pre><code>SELECT\n    users.username, users.password\nFROM\n    users\nJOIN\n    teachers\nUSING\n    (user_id)\nWHERE\n    teachers.is_admin = 1;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 username \u2502  password  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 djs      \u2502 mypa$$word \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>There are many different relational database implementations (MySQL, Postgres, etc.) but we use SQLite at CodeWizardsHQ because it is easy to work with and supports most of the common SQL features.</p>"},{"location":"sql/sql-language/#why-do-we-need-sql","title":"Why Do We Need SQL?","text":"<p>When working with a database, you need a way to talk to the database and get data into/out of it. SQL is the language we use to do this in a SQLite database. SQL allows you to express relationships in a database in a structured way.</p>"},{"location":"sql/sql-language/#why-do-we-use-python-and-sql-together","title":"Why Do We Use Python And SQL Together?","text":"<p>Although you can use raw SQL commands to talk to a SQL database, we use Python at CodeWizardsHQ because often you'll interact with databases this way in the real world. Think about apps you've used that store data about you between visits. That's using a database and a programming language (like Python) to interact with the database!</p> <p>The SQL portions of a Python DB query will be a Python <code>str</code>. Consider this <code>INSERT</code> statement in raw SQL:</p> <pre><code>INSERT INTO users (username, password) VALUES (\"djs\", \"mypa$$word\");\n</code></pre> <p>To run that from Python, we would do this:</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"users-database.db\")\nsql = con.cursor()\n\nquery = \"\"\"\n    INSERT INTO users (username, password) VALUES (\"djs\", \"mypa$$word\");\n\"\"\"\n\nsql.execute(query)\ncon.commit()\n</code></pre> <p>The important thing to remember is that the <code>query</code> is just a <code>str</code> that you pass to <code>sql.execute()</code>. If you make a change to a table in the database (as we did above) then you use the <code>con.commit()</code> method to save the change (although in some CWHQ courses you merely view the results without changing the database). The semi-colon (<code>;</code>) isn't required when using a query from Python, but we'll keep it for consistency between the raw SQL examples.</p>"},{"location":"sql/sql-language/#bounded-parameters","title":"Bounded Parameters","text":"<p>When accepting user input in a Python program that modifies a SQL database, you'll use <code>?</code> as placeholders for any user-entered data and then pass the data to <code>sql.execute()</code> as a <code>list</code> like this:</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"users-database.db\")\nsql = con.cursor()\n\nusername = input(\"Enter your username: \")\npassword = input(\"Enter your password: \")\n\n# Use `?` for any user-entered data\nquery = \"\"\"\n    INSERT INTO users (username, password) VALUES (?, ?);\n\"\"\"\n\n# The `username` and `password` are bound to the `?` in the `query`\nsql.execute(query, [username, password])\ncon.commit()\n</code></pre> <p>Further Reading</p> <ul> <li>Python Documentation - sqlite3</li> </ul>"},{"location":"sql/sql-language/#aggregate-functions","title":"Aggregate Functions","text":"<p>Just like programming languages such as Python and JavaScript, SQL has functions to perform common tasks on result set called Aggregate Functions. The example below shows the different Aggregate Functions we use in CWHQ courses.</p> <p>Raw SQL</p> <pre><code>SELECT * FROM products;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1          \u2502 Dell XPS 17              \u2502 1599.99       \u2502 Computers        \u2502\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 3          \u2502 System76 Thelio B1       \u2502 1255.55       \u2502 Computers        \u2502\n\u2502 4          \u2502 Logitech M1              \u2502 34.99         \u2502 Accessories      \u2502\n\u2502 5          \u2502 Seagate S1 SSD           \u2502 88.75         \u2502 Accessories      \u2502\n\u2502 6          \u2502 MacBook Pro 16           \u2502 2100.5        \u2502 Computers        \u2502\n\u2502 7          \u2502 Rode Z28                 \u2502 275.99        \u2502 Microphones      \u2502\n\u2502 8          \u2502 Lenovo ThinkPad          \u2502 950.75        \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Get the average price of all products\nSELECT AVG(product_price) AS average_product_price FROM products;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 average_product_price \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 800.7525              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Count the number of products\nSELECT COUNT(*) AS total_products FROM products;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 total_products \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 8              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Get the most expensive product\nSELECT product_name || \" $\" || MAX(product_price) AS most_expensive_product\nFROM products;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 most_expensive_product \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 MacBook Pro 16 $2100.5 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Get the least expensive product\nSELECT product_name || \" $\" || MIN(product_price) AS least_expensive_product\nFROM products;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 least_expensive_product \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Logitech M1 $34.99      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Get the total cost of all products combined\nSELECT SUM(product_price) AS total_cost_all_products FROM products;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 total_cost_all_products \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 6406.02                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"products-database.db\")\nsql = con.cursor()\n\ndef execute_query_and_display_rows(query):\n    result = sql.execute(query)\n    rows = result.fetchall()\n\n    for row in rows:\n        print(row)\n\n\nquery = \"\"\"\n    SELECT * FROM products;\n\"\"\"\n\nprint(\"All products:\")\nexecute_query_and_display_rows(query)\n\nquery = \"\"\"\n    SELECT AVG(product_price) AS average_product_price FROM products;\n\"\"\"\n\nprint(\"\\nAverage cost of all products:\")\nexecute_query_and_display_rows(query)\n\nquery = \"\"\"\n    SELECT COUNT(*) AS total_products FROM products;\n\"\"\"\n\nprint(\"\\nTotal number of products:\")\nexecute_query_and_display_rows(query)\n\nquery = \"\"\"\n    SELECT product_name || \" $\" || MAX(product_price) AS most_expensive_product\n    FROM products;\n\"\"\"\n\nprint(\"\\nMost expensive product:\")\nexecute_query_and_display_rows(query)\n\nquery = \"\"\"\n    SELECT product_name || \" $\" || MIN(product_price) AS least_expensive_product\n    FROM products;\n\"\"\"\n\nprint(\"\\nLeast expensive product:\")\nexecute_query_and_display_rows(query)\n\nquery = \"\"\"\n    SELECT SUM(product_price) AS total_cost_all_products FROM products;\n\"\"\"\n\nprint(\"\\nTotal cost of all products:\")\nexecute_query_and_display_rows(query)\n</code></pre> <p>Output</p> <pre><code>All products:\n(1, 'Dell XPS 17', 1599.99, 'Computers')\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n(3, 'System76 Thelio B1', 1255.55, 'Computers')\n(4, 'Logitech M1', 34.99, 'Accessories')\n(5, 'Seagate S1 SSD', 88.75, 'Accessories')\n(6, 'MacBook Pro 16', 2100.5, 'Computers')\n(7, 'Rode Z28', 275.99, 'Microphones')\n(8, 'Lenovo ThinkPad', 950.75, 'Computers')\n\nAverage cost of all products:\n(800.7524999999999,)\n\nTotal number of products:\n(8,)\n\nMost expensive product:\n('MacBook Pro 16 $2100.5',)\n\nLeast expensive product:\n('Logitech M1 $34.99',)\n\nTotal cost of all products:\n(6406.0199999999995,)\n</code></pre> <p>Further Reading</p> <ul> <li>SQLBolt - Queries with aggregates - Pt. 1</li> <li>SQLite Tutorial - SQLite Aggregate Functions</li> </ul>"},{"location":"sql/sql-language/#arithmetic-operators","title":"Arithmetic Operators","text":"<p>When writing queries, you may find that the table does not have a column for a certain value but has columns which could be used to calculate it. SQL supports arithmetic operations in selections and <code>WHERE</code> clauses. In a selection, this will add a column to the result which calculates the expression for each result.</p> <p>Raw SQL</p> <pre><code>SELECT name, price, price * 0.07 FROM products;\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 name      \u2502 price    \u2502  price * 0.07   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 cookies   \u2502 10.00    \u2502 10.70           \u2502\n\u2502 ice cream \u2502 5.00     \u2502 5.35            \u2502\n\u2502 donuts    \u2502 7.00     \u2502 7.49            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>You can alias the calculated column using <code>AS</code> for a clearer output.</p> <p>Raw SQL <pre><code>SELECT name, price, price * 0.07 AS sales_tax FROM products;\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 name      \u2502 price    \u2502  sales_tax      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 cookies   \u2502 10.00    \u2502 0.70            \u2502\n\u2502 ice cream \u2502 5.00     \u2502 0.35            \u2502\n\u2502 donuts    \u2502 7.00     \u2502 0.49            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>The operations are also supported in <code>WHERE</code> clauses.</p> <pre><code>-- select all rows where tax is greater than 10 dollars\nSELECT * FROM products WHERE price * 0.07 &gt; 10.00\n</code></pre>"},{"location":"sql/sql-language/#subqueries","title":"Subqueries","text":"<p>A subquery, also known as a nested query or inner query, is a query that is embedded within another SQL query. Subqueries allow you to retrieve data from one or more tables and use that result within another query. They are an essential feature of SQL for performing complex queries and data manipulation.</p> <p>There are two primary types of subqueries:</p> <ol> <li> <p>Scalar Subquery: A scalar subquery is a subquery that returns a single value. This type of subquery is typically used within a <code>SELECT</code> or <code>WHERE</code> clause to compare a single value with the result of the subquery. <pre><code>-- Find the average salary of employees\nSELECT AVG(salary) FROM employees;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| AVG(salary)    \u2502 \n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 85000          |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Use the above query in a subquery\nSELECT name, salary FROM employees \n    WHERE salary &gt; (SELECT AVG(salary) FROM employees);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 name     \u2502 salary      \u2502 \n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Alice    \u2502 100000      \u2502\n\u2502 Bob      \u2502 90000       \u2502\n\u2502 Charlie  \u2502 85001       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> The subquery <code>SELECT AVG(salary) FROM employees</code> is a single, or scalar, value. When used in the <code>WHERE</code> clause, the full query finds all employees whose salary is greater than the average salary.</p> </li> <li> <p>Table Subquery: A table subquery, also known as a derived table or inline view, returns a result set (a table) that can be used in a <code>FROM</code> clause or joined with other tables in the main query. <pre><code>-- Count the number of courses by the programming language they use\nSELECT language, COUNT(*) as num_courses \n    FROM programming_courses GROUP BY language;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 language \u2502 num_courses \u2502 \n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Python   \u2502 10          \u2502\n\u2502 HTML/CSS \u2502 6           \u2502\n\u2502 SQL      \u2502 3           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n-- Using the above query in a subquery, we can use the MAX() function on the count column\nSELECT language, MAX(num_courses) FROM \n    (SELECT language, COUNT(*) as num_courses \n        FROM programming_courses GROUP BY language\n    ); \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 language \u2502 MAX(num_courses) \u2502 \n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Python   \u2502 10               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> </li> </ol> <p>Further Reading</p> <ul> <li>SQL Subqueries - w3resource</li> <li>SQL - Sub Queries - TutorialsPoint</li> </ul>"},{"location":"sql/sql-language/#alter-table","title":"ALTER TABLE","text":"<p>After creating a table, you may need to add or rename a column. The <code>ALTER TABLE</code> command allows you to do this.</p> <p>Raw SQL</p> <pre><code>SELECT * FROM users;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 user_id \u2502 username \u2502  password  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1       \u2502 djs      \u2502 mypa$$word \u2502\n\u2502 2       \u2502 django   \u2502 w0ff       \u2502\n\u2502 3       \u2502 alecg    \u2502 c0de       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Renaming a column\nALTER TABLE users RENAME username TO teacher_name;\n\nSELECT * FROM users;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 user_id \u2502 teacher_name \u2502  password  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1       \u2502 djs          \u2502 mypa$$word \u2502\n\u2502 2       \u2502 django       \u2502 w0ff       \u2502\n\u2502 3       \u2502 alecg        \u2502 c0de       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Adding a new column with a default value for each row\nALTER TABLE users ADD is_admin INTEGER DEFAULT 0;\n\nSELECT * FROM users;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 user_id \u2502 teacher_name \u2502  password  \u2502 is_admin \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1       \u2502 djs          \u2502 mypa$$word \u2502 0        \u2502\n\u2502 2       \u2502 django       \u2502 w0ff       \u2502 0        \u2502\n\u2502 3       \u2502 alecg        \u2502 c0de       \u2502 0        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"users-database.db\")\nsql = con.cursor()\n\ndef display_all_users_and_column_names():\n    # Don't worry about this, it just shows us the column names\n    query = \"\"\"\n        SELECT name FROM PRAGMA_TABLE_INFO('users');\n    \"\"\"\n\n    result = sql.execute(query)\n    print(\"\\nColumn names:\")\n    print(*result.fetchall())\n\n    query = \"\"\"\n        SELECT * FROM users;\n    \"\"\"\n\n    result = sql.execute(query)\n    rows = result.fetchall()\n\n    print(\"\\nRows:\")\n    print(rows)\n\n\ndisplay_all_users_and_column_names()\n\nquery = \"\"\"\n    ALTER TABLE users RENAME username TO teacher_name;\n\"\"\"\n\nsql.execute(query)\ndisplay_all_users_and_column_names()\n\nquery = \"\"\"\n    ALTER TABLE users ADD is_admin INTEGER DEFAULT 0;\n\"\"\"\n\nsql.execute(query)\ndisplay_all_users_and_column_names()\n\n# Make sure to commit the changes to the DB\ncon.commit()\n</code></pre> <p>Output</p> <pre><code>Column names:\n('user_id',) ('username',) ('password',)\n\nRows:\n[(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')]\n\nColumn names:\n('user_id',) ('teacher_name',) ('password',)\n\nRows:\n[(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')]\n\nColumn names:\n('user_id',) ('teacher_name',) ('password',) ('is_admin',)\n\nRows:\n[(1, 'djs', 'mypa$$word', 0), (2, 'django', 'w0ff', 0), (3, 'alecg', 'c0de', 0)]\n</code></pre> <p>Further Reading</p> <ul> <li>SQLBolt - Altering Tables</li> <li>SQLite Tutorial - SQLite Alter Table</li> </ul>"},{"location":"sql/sql-language/#as","title":"AS","text":"<p>The <code>AS</code> clause is used to alias a column or table name. We only use it at CWHQ for column aliases though, so that's all that is covered here.</p>"},{"location":"sql/sql-language/#aliasing-column-names","title":"Aliasing Column Names","text":"<p>When aliasing column names, the <code>AS</code> clause comes in handy when you are using the concatenation operator (<code>||</code>) to combine multiple columns or when using Aggregate Functions to perform some calculation on a group of rows.</p> <p>Raw SQL</p> <pre><code>SELECT * FROM products;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1          \u2502 Dell XPS 17              \u2502 1599.99       \u2502 Computers        \u2502\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 3          \u2502 System76 Thelio B1       \u2502 1255.55       \u2502 Computers        \u2502\n\u2502 4          \u2502 Logitech M1              \u2502 34.99         \u2502 Accessories      \u2502\n\u2502 5          \u2502 Seagate S1 SSD           \u2502 88.75         \u2502 Accessories      \u2502\n\u2502 6          \u2502 MacBook Pro 16           \u2502 2100.5        \u2502 Computers        \u2502\n\u2502 7          \u2502 Rode Z28                 \u2502 275.99        \u2502 Microphones      \u2502\n\u2502 8          \u2502 Lenovo ThinkPad          \u2502 950.75        \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n/*\n*   Build a result set that combines `product_name` and `product_price`\n*   into a single column\n*/\nSELECT product_name || \" : $\" || product_price AS product_description\nFROM products;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        product_description        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Dell XPS 17 : $1599.99            \u2502\n\u2502 Blue Snowball Microphone : $99.5  \u2502\n\u2502 System76 Thelio B1 : $1255.55     \u2502\n\u2502 Logitech M1 : $34.99              \u2502\n\u2502 Seagate S1 SSD : $88.75           \u2502\n\u2502 MacBook Pro 16 : $2100.5          \u2502\n\u2502 Rode Z28 : $275.99                \u2502\n\u2502 Lenovo ThinkPad : $950.75         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Get the total cost of all the computers in the `products` table\nSELECT SUM(product_price) AS total_price_computers\nFROM products\nWHERE product_category = \"Computers\";\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 total_price_computers \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 5906.79               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"products-database.db\")\nsql = con.cursor()\n\ndef execute_query_and_display_rows(query):\n    result = sql.execute(query)\n    rows = result.fetchall()\n\n    for row in rows:\n        print(row)\n\n\nquery = \"\"\"\n    SELECT * FROM products;\n\"\"\"\n\nprint(\"All products:\")\nexecute_query_and_display_rows(query)\n\nquery = \"\"\"\n    SELECT product_name || \" : $\" || product_price AS product_description\n    FROM products;\n\"\"\"\n\nprint(\"\\nFormatted product descriptions:\")\nexecute_query_and_display_rows(query)\n\nquery = \"\"\"\n    SELECT SUM(product_price) AS total_price_computers\n    FROM products\n    WHERE product_category = \"Computers\";\n\"\"\"\n\nprint(\"\\nThe total price of all computers in the `products` table:\")\nexecute_query_and_display_rows(query)\n</code></pre> <p>Output</p> <pre><code>All products:\n(1, 'Dell XPS 17', 1599.99, 'Computers')\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n(3, 'System76 Thelio B1', 1255.55, 'Computers')\n(4, 'Logitech M1', 34.99, 'Accessories')\n(5, 'Seagate S1 SSD', 88.75, 'Accessories')\n(6, 'MacBook Pro 16', 2100.5, 'Computers')\n(7, 'Rode Z28', 275.99, 'Microphones')\n(8, 'Lenovo ThinkPad', 950.75, 'Computers')\n\nFormatted product descriptions:\n('Dell XPS 17 : $1599.99',)\n('Blue Snowball Microphone : $99.5',)\n('System76 Thelio B1 : $1255.55',)\n('Logitech M1 : $34.99',)\n('Seagate S1 SSD : $88.75',)\n('MacBook Pro 16 : $2100.5',)\n('Rode Z28 : $275.99',)\n('Lenovo ThinkPad : $950.75',)\n\nThe total price of all computers in the `products` table:\n(5906.79,)\n</code></pre> <p>Further Reading</p> <ul> <li>SQLBolt - Queries with expressions</li> </ul>"},{"location":"sql/sql-language/#case","title":"CASE","text":"<p>The <code>CASE</code> statement is similar to a chain of conditional statements in a language like Python or JavaScript. You use it to generate different values based on some condition. At CWHQ, we use the <code>CASE</code> statement to generate an additional column with a range of values generated from our other columns.</p> <p>Consider a shopping app where we want to rank products by their affordability. Any product that costs $100 or less is considered \"Cheap\", any product between $100 and $1000 is considered \"Affordable\", and anything else is \"Expensive\".</p> <p>Our <code>products</code> table has the following structure:</p> <pre><code>SELECT * FROM products;\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1          \u2502 Dell XPS 17              \u2502 1599.99       \u2502 Computers        \u2502\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 3          \u2502 System76 Thelio B1       \u2502 1255.55       \u2502 Computers        \u2502\n\u2502 4          \u2502 Logitech M1              \u2502 34.99         \u2502 Accessories      \u2502\n\u2502 5          \u2502 Seagate S1 SSD           \u2502 88.75         \u2502 Accessories      \u2502\n\u2502 6          \u2502 MacBook Pro 16           \u2502 2100.5        \u2502 Computers        \u2502\n\u2502 7          \u2502 Rode Z28                 \u2502 275.99        \u2502 Microphones      \u2502\n\u2502 8          \u2502 Lenovo ThinkPad          \u2502 950.75        \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Notice that there is no <code>affordability</code> column? We can create one and populate it with values based on the <code>product_price</code> by using the <code>CASE</code> statement and using <code>AS</code> to ensure the result is placed in a column called <code>affordability</code>.</p> <p>The <code>THEN</code> keyword is what populates the values in whatever column name we created with <code>END AS</code>. If you have an <code>ELSE</code> clause, it doesn't need a <code>THEN</code> clause.</p> <p>Raw SQL</p> <pre><code>SELECT product_name, product_price,\nCASE\n    WHEN product_price &lt;= 100\n        THEN 'Cheap'\n    WHEN product_price &gt; 100 AND product_price &lt;= 1000\n        THEN 'Affordable'\n    ELSE\n        'Expensive'\nEND AS affordability\nFROM products\nORDER BY product_price;\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       product_name       \u2502 product_price \u2502 affordability \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Logitech M1              \u2502 34.99         \u2502 Cheap         \u2502\n\u2502 Seagate S1 SSD           \u2502 88.75         \u2502 Cheap         \u2502\n\u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Cheap         \u2502\n\u2502 Rode Z28                 \u2502 275.99        \u2502 Affordable    \u2502\n\u2502 Lenovo ThinkPad          \u2502 950.75        \u2502 Affordable    \u2502\n\u2502 System76 Thelio B1       \u2502 1255.55       \u2502 Expensive     \u2502\n\u2502 Dell XPS 17              \u2502 1599.99       \u2502 Expensive     \u2502\n\u2502 MacBook Pro 16           \u2502 2100.5        \u2502 Expensive     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"products.db\")\nsql = con.cursor()\n\nquery = \"\"\"\n    SELECT product_name, product_price,\n    CASE\n        WHEN product_price &lt;= 100\n            THEN 'Cheap'\n        WHEN product_price &gt; 100 AND product_price &lt;= 1000\n            THEN 'Affordable'\n        ELSE\n            'Expensive'\n    END AS affordability\n    FROM products\n    ORDER BY product_price;\n\"\"\"\n\nresult = sql.execute(query)\nrows = result.fetchall()\n\nfor row in rows:\n    print(row)\n</code></pre> <p>Output</p> <pre><code>('Logitech M1', 34.99, 'Cheap')\n('Seagate S1 SSD', 88.75, 'Cheap')\n('Blue Snowball Microphone', 99.5, 'Cheap')\n('Rode Z28', 275.99, 'Affordable')\n('Lenovo ThinkPad', 950.75, 'Affordable')\n('System76 Thelio B1', 1255.55, 'Expensive')\n('Dell XPS 17', 1599.99, 'Expensive')\n('MacBook Pro 16', 2100.5, 'Expensive')\n</code></pre> <p>Further Reading</p> <ul> <li>Mode SQL Tutorial - SQL CASE</li> </ul>"},{"location":"sql/sql-language/#concatenation","title":"Concatenation","text":"<p>SQLite uses the <code>||</code> operator for string concatenation. This is used at CWHQ to combine column names together (possibly with other string data) to merge the data from multiple columns into a single column. This is often used in conjunction with the <code>AS</code> clause to rename the combined columns.</p> <p>Raw SQL</p> <pre><code>SELECT * FROM products;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1          \u2502 Dell XPS 17              \u2502 1599.99       \u2502 Computers        \u2502\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 3          \u2502 System76 Thelio B1       \u2502 1255.55       \u2502 Computers        \u2502\n\u2502 4          \u2502 Logitech M1              \u2502 34.99         \u2502 Accessories      \u2502\n\u2502 5          \u2502 Seagate S1 SSD           \u2502 88.75         \u2502 Accessories      \u2502\n\u2502 6          \u2502 MacBook Pro 16           \u2502 2100.5        \u2502 Computers        \u2502\n\u2502 7          \u2502 Rode Z28                 \u2502 275.99        \u2502 Microphones      \u2502\n\u2502 8          \u2502 Lenovo ThinkPad          \u2502 950.75        \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n/*\n*   Build a result set that combines `product_name` and `product_price`\n*   into a single column using `||` and `AS`\n*/\nSELECT product_name || \" : $\" || product_price AS product_description\nFROM products;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        product_description        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Dell XPS 17 : $1599.99            \u2502\n\u2502 Blue Snowball Microphone : $99.5  \u2502\n\u2502 System76 Thelio B1 : $1255.55     \u2502\n\u2502 Logitech M1 : $34.99              \u2502\n\u2502 Seagate S1 SSD : $88.75           \u2502\n\u2502 MacBook Pro 16 : $2100.5          \u2502\n\u2502 Rode Z28 : $275.99                \u2502\n\u2502 Lenovo ThinkPad : $950.75         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"products-database.db\")\nsql = con.cursor()\n\ndef execute_query_and_display_rows(query):\n    result = sql.execute(query)\n    rows = result.fetchall()\n\n    for row in rows:\n        print(row)\n\n\nquery = \"\"\"\n    SELECT * FROM products;\n\"\"\"\n\nprint(\"All products:\")\nexecute_query_and_display_rows(query)\n\nquery = \"\"\"\n    SELECT product_name || \" : $\" || product_price AS product_description\n    FROM products;\n\"\"\"\n</code></pre> <p>Output</p> <pre><code>All products:\n(1, 'Dell XPS 17', 1599.99, 'Computers')\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n(3, 'System76 Thelio B1', 1255.55, 'Computers')\n(4, 'Logitech M1', 34.99, 'Accessories')\n(5, 'Seagate S1 SSD', 88.75, 'Accessories')\n(6, 'MacBook Pro 16', 2100.5, 'Computers')\n(7, 'Rode Z28', 275.99, 'Microphones')\n(8, 'Lenovo ThinkPad', 950.75, 'Computers')\n\nFormatted product descriptions:\n('Dell XPS 17 : $1599.99',)\n('Blue Snowball Microphone : $99.5',)\n('System76 Thelio B1 : $1255.55',)\n('Logitech M1 : $34.99',)\n('Seagate S1 SSD : $88.75',)\n('MacBook Pro 16 : $2100.5',)\n('Rode Z28 : $275.99',)\n('Lenovo ThinkPad : $950.75',)\n</code></pre>"},{"location":"sql/sql-language/#create-table","title":"CREATE TABLE","text":"<p>Relational databases are made up of tables, and you'll need to create tables to hold your data if we don't provide one for you. We often use <code>IF NOT EXISTS</code> in CWHQ courses when creating a table because we'll run the statement every time our Python script runs, and an error would occur if you tried to create a table that already existed. Most tables should also have a <code>PRIMARY KEY</code> integer to uniquely identify each row of data.</p> <p>The general format of a <code>CREATE TABLE</code> statement is:</p> <pre><code>CREATE TABLE IF NOT EXISTS table_name (\n    column_one DATATYPE OPTIONAL_CONSTRAINTS...,\n    column_two DATATYPE OPTIONAL_CONSTRAINTS...,\n    column_three DATATYPE OPTIONAL_CONSTRAINTS...\n    -- etc...\n);\n</code></pre> <p>Note that each column definition is separated by a comma (<code>,</code>) but the final column definition should not have a comma.</p> <p>Here's an example of a <code>CREATE TABLE</code> statement for the <code>users</code> table from the What Is A Relational Database? section earlier in these docs:</p> <p>Raw SQL</p> <pre><code>CREATE TABLE IF NOT EXISTS users (\n    user_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"users-database.db\")\nsql = con.cursor()\n\nquery = \"\"\"\n    CREATE TABLE IF NOT EXISTS users (\n        user_id INTEGER PRIMARY KEY AUTOINCREMENT,\n        username TEXT UNIQUE NOT NULL,\n        password TEXT NOT NULL\n    );\n\"\"\"\n\nsql.execute(query)\n</code></pre>"},{"location":"sql/sql-language/#column-datatypes","title":"Column Datatypes","text":"<p>When writing column definitions, your column can be one of 5 storage classes (which are a generic datatype) in SQLite:</p> <ul> <li><code>NULL</code>: Represents \"nothingness\"</li> <li><code>INTEGER</code>: Whole numbers</li> <li><code>REAL</code>: Decimal numbers</li> <li><code>TEXT</code>: Text data</li> <li><code>BLOB</code>: Binary data (like images, music, etc.)</li> </ul> <p>You'll mainly use <code>INTEGER</code> and <code>TEXT</code> for CWHQ projects.</p>"},{"location":"sql/sql-language/#column-constraints","title":"Column Constraints","text":"<p>Besides the datatype, you can also put additional constraints on a column definition to enforce that a column is <code>UNIQUE</code>, or <code>NOT NULL</code>, or even a <code>PRIMARY KEY</code>. You can see all of those at work in this example:</p> <pre><code>CREATE TABLE IF NOT EXISTS users (\n    user_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n</code></pre> <p>Further Reading</p> <ul> <li>SQLBolt - Creating tables</li> <li>SQLite Tutorial - SQLite Create Table</li> </ul>"},{"location":"sql/sql-language/#delete","title":"DELETE","text":"<p>To remove data in a SQL table, use the <code>DELETE</code> statement. Make sure to use a <code>WHERE</code> clause so that you only delete the rows you intend to.</p> <p>Raw SQL</p> <pre><code>SELECT * FROM users;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 user_id \u2502 username \u2502  password  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1       \u2502 djs      \u2502 mypa$$word \u2502\n\u2502 2       \u2502 django   \u2502 w0ff       \u2502\n\u2502 3       \u2502 alecg    \u2502 c0de       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nDELETE FROM users WHERE user_id = 3;\n\nSELECT * FROM users;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 user_id \u2502 username \u2502  password  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1       \u2502 djs      \u2502 mypa$$word \u2502\n\u2502 2       \u2502 django   \u2502 w0ff       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"users-database.db\")\nsql = con.cursor()\n\n# We'll use this twice, so it makes sense to be a function\ndef display_all_users():\n    query = \"\"\"\n        SELECT * FROM users;\n    \"\"\"\n\n    result = sql.execute(query)\n    rows = result.fetchall()\n\n    print(rows)\n\n\ndisplay_all_users()\n\nquery = \"\"\"\n    DELETE FROM users WHERE id = 3;\n\"\"\"\n\nsql.execute(query)\n\n# Make sure to commit the changes to the DB\ncon.commit()\n\ndisplay_all_users()\n</code></pre> <p>Output</p> <pre><code>[(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')]\n[(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff')]\n</code></pre>"},{"location":"sql/sql-language/#deleting-all-rows-from-a-table","title":"Deleting all rows from a table","text":"<p>If you leave out the <code>WHERE</code> clause in a <code>DELETE</code> statement, you remove all rows from the table. This is a handy way to clear out all the rows if you need to start with a fresh table:</p> <p>Raw SQL</p> <pre><code>SELECT * FROM users;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 user_id \u2502 username \u2502  password  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1       \u2502 djs      \u2502 mypa$$word \u2502\n\u2502 2       \u2502 django   \u2502 w0ff       \u2502\n\u2502 3       \u2502 alecg    \u2502 c0de       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nDELETE FROM users;\n\nSELECT * FROM users;\n-- nothing returned because the table is empty\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"users-database.db\")\nsql = con.cursor()\n\n# We'll use this twice, so it makes sense to be a function\ndef display_all_users():\n    query = \"\"\"\n        SELECT * FROM users;\n    \"\"\"\n\n    result = sql.execute(query)\n    rows = result.fetchall()\n\n    print(rows)\n\n\ndisplay_all_users()\n\nquery = \"\"\"\n    DELETE FROM users;\n\"\"\"\n\nsql.execute(query)\n\n# Make sure to commit the changes to the DB\ncon.commit()\n\ndisplay_all_users()\n</code></pre> <p>Output</p> <pre><code>[(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')]\n[]\n</code></pre> <p>Further Reading</p> <ul> <li>SQLBolt - Deleting rows</li> <li>SQLite Tutorial - SQLite Delete</li> </ul>"},{"location":"sql/sql-language/#distinct","title":"DISTINCT","text":"<p>If you want to get unique column values for a set of rows, use the <code>DISTINCT</code> clause of a <code>SELECT</code> query</p> <p>For example, in the <code>products</code> table below, it may be hard at a glance to see what categories are present, but with <code>DISTINCT</code> it's easy to see we only have three!</p> <p>Raw SQL</p> <pre><code>SELECT * FROM products;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1          \u2502 Dell XPS 17              \u2502 1599.99       \u2502 Computers        \u2502\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 3          \u2502 System76 Thelio B1       \u2502 1255.55       \u2502 Computers        \u2502\n\u2502 4          \u2502 Logitech M1              \u2502 34.99         \u2502 Accessories      \u2502\n\u2502 5          \u2502 Seagate S1 SSD           \u2502 88.75         \u2502 Accessories      \u2502\n\u2502 6          \u2502 MacBook Pro 16           \u2502 2100.5        \u2502 Computers        \u2502\n\u2502 7          \u2502 Rode Z28                 \u2502 275.99        \u2502 Microphones      \u2502\n\u2502 8          \u2502 Lenovo ThinkPad          \u2502 950.75        \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Get only the unique categories for our products.\nSELECT DISTINCT product_category FROM products;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Computers        \u2502\n\u2502 Microphones      \u2502\n\u2502 Accessories      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"products-database.db\")\nsql = con.cursor()\n\nquery = \"\"\"\n    SELECT * FROM products;\n\"\"\"\n\nresult = sql.execute(query)\nrows = result.fetchall()\n\n# Easier to read if we loop then print each row since there are 8 rows.\nfor row in rows:\n    print(row)\n\nquery = \"\"\"\n    SELECT DISTINCT product_category FROM products;\n\"\"\"\n\nresult = sql.execute(query)\nrows = result.fetchall()\n\nprint(\"\\nDistinct categories:\")\nprint(rows)\n</code></pre> <p>Output</p> <pre><code>(1, 'Dell XPS 17', 1599.99, 'Computers')\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n(3, 'System76 Thelio B1', 1255.55, 'Computers')\n(4, 'Logitech M1', 34.99, 'Accessories')\n(5, 'Seagate S1 SSD', 88.75, 'Accessories')\n(6, 'MacBook Pro 16', 2100.5, 'Computers')\n(7, 'Rode Z28', 275.99, 'Microphones')\n(8, 'Lenovo ThinkPad', 950.75, 'Computers')\n\nDistinct categories:\n[('Computers',), ('Microphones',), ('Accessories',)]\n</code></pre> <p>Further Reading</p> <ul> <li>SQLBolt - Filtering and sorting Query results</li> <li>SQLite Tutorial - SQLite Select Distinct</li> </ul>"},{"location":"sql/sql-language/#drop-table","title":"DROP TABLE","text":"<p>The <code>DROP TABLE</code> query deletes an entire table and it's definition from the database. You should usually use the <code>IF EXISTS</code> clause with this query to ensure an error isn't thrown if the table you're trying to drop doesn't exist.</p> <p>Raw SQL</p> <pre><code>SELECT * FROM users;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 user_id \u2502 username \u2502  password  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1       \u2502 djs      \u2502 mypa$$word \u2502\n\u2502 2       \u2502 django   \u2502 w0ff       \u2502\n\u2502 3       \u2502 alecg    \u2502 c0de       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nDROP TABLE IF EXISTS users;\n\nSELECT * FROM users;\n-- Error: no such table: users\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"users-database.db\")\nsql = con.cursor()\n\n# We'll use this twice, so it makes sense to be a function\ndef display_all_users():\n    query = \"\"\"\n        SELECT * FROM users;\n    \"\"\"\n\n    result = sql.execute(query)\n    rows = result.fetchall()\n\n    print(rows)\n\n\ndisplay_all_users()\n\nquery = \"\"\"\n    DROP TABLE IF EXISTS users;\n\"\"\"\n\nsql.execute(query)\n\n# This will throw an error since the `users` table doesn't exist.\ndisplay_all_users()\n</code></pre> <p>Output</p> <pre><code>[(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')]\nTraceback (most recent call last):\n  File \"/home/daniel/documentation-examples/main.py\", line 27, in &lt;module&gt;\n    display_all_users()\n  File \"/home/daniel/documentation-examples/main.py\", line 12, in display_all_users\n    result = sql.execute(query)\nsqlite3.OperationalError: no such table: users\n</code></pre> <p>Further Reading</p> <ul> <li>SQLBolt - Dropping tables</li> <li>SQLite Tutorial - SQLite Drop Table</li> </ul>"},{"location":"sql/sql-language/#group-by","title":"GROUP BY","text":"<p>If you need to \"flatten\" the results of a <code>SELECT</code> query, the <code>GROUP BY</code> clause is helpful. It let's you group the resulting rows by a particular column, effectively filtering out duplicate rows that have the same column value. You almost always use <code>GROUP BY</code> with an Aggregate Function to perform some sort of calculation on a group of rows with similar column values, but you can also use it to filter a column by unique values (as we do to get the unique product categories below):</p> <p>Raw SQL</p> <pre><code>SELECT * FROM products;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1          \u2502 Dell XPS 17              \u2502 1599.99       \u2502 Computers        \u2502\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 3          \u2502 System76 Thelio B1       \u2502 1255.55       \u2502 Computers        \u2502\n\u2502 4          \u2502 Logitech M1              \u2502 34.99         \u2502 Accessories      \u2502\n\u2502 5          \u2502 Seagate S1 SSD           \u2502 88.75         \u2502 Accessories      \u2502\n\u2502 6          \u2502 MacBook Pro 16           \u2502 2100.5        \u2502 Computers        \u2502\n\u2502 7          \u2502 Rode Z28                 \u2502 275.99        \u2502 Microphones      \u2502\n\u2502 8          \u2502 Lenovo ThinkPad          \u2502 950.75        \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Get the unique product categories\nSELECT product_category FROM products GROUP BY product_category;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Accessories      \u2502\n\u2502 Computers        \u2502\n\u2502 Microphones      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Get the number of products in each `product_category`\nSELECT product_category, COUNT(*) AS num_products_per_category\nFROM products\nGROUP BY product_category;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_category \u2502 num_products_per_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Accessories      \u2502 2                         \u2502\n\u2502 Computers        \u2502 4                         \u2502\n\u2502 Microphones      \u2502 2                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"products-database.db\")\nsql = con.cursor()\n\ndef execute_query_and_display_rows(query):\n    result = sql.execute(query)\n    rows = result.fetchall()\n\n    for row in rows:\n        print(row)\n\nquery = \"\"\"\n    SELECT * FROM products;\n\"\"\"\n\nprint(\"All products:\")\nexecute_query_and_display_rows(query)\n\nquery = \"\"\"\n    SELECT product_category FROM products GROUP BY product_category;\n\"\"\"\n\nprint(\"\\nUnique `product_categories`:\")\nexecute_query_and_display_rows(query)\n\nquery = \"\"\"\n    SELECT product_category, COUNT(*) AS num_products_per_category\n    FROM products\n    GROUP BY product_category;\n\"\"\"\n\nprint(\"\\nNumber of products per category:\")\nexecute_query_and_display_rows(query)\n</code></pre> <p>Output</p> <pre><code>All products:\n(1, 'Dell XPS 17', 1599.99, 'Computers')\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n(3, 'System76 Thelio B1', 1255.55, 'Computers')\n(4, 'Logitech M1', 34.99, 'Accessories')\n(5, 'Seagate S1 SSD', 88.75, 'Accessories')\n(6, 'MacBook Pro 16', 2100.5, 'Computers')\n(7, 'Rode Z28', 275.99, 'Microphones')\n(8, 'Lenovo ThinkPad', 950.75, 'Computers')\n\nUnique `product_categories`:\n('Accessories',)\n('Computers',)\n('Microphones',)\n\nNumber of products per category:\n('Accessories', 2)\n('Computers', 4)\n('Microphones', 2)\n</code></pre> <p>Further Reading</p> <ul> <li>SQLBolt - Queries with aggregates - Pt. 1</li> <li>SQLite Tutorial - SQLite Group By</li> </ul>"},{"location":"sql/sql-language/#insert","title":"INSERT","text":"<p>Once you've created a table, you'll want to put data in it. The <code>INSERT</code> statement is used to add data to a SQL table. You list the column names in the <code>()</code> after the table name.</p> <p>Consider this <code>users</code> table definition:</p> <pre><code>CREATE TABLE IF NOT EXISTS users (\n    user_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n</code></pre> <p>If we wanted to fill this table with a few users, we would leave out the <code>user_id</code> in the <code>()</code> as this table has the <code>user_id</code> set to <code>AUTOINCREMENT</code>. We would need to add the other two column names in whatever order we wished, though.</p> <p>Raw SQL</p> <pre><code>INSERT INTO users (username, password) VALUES (\"djs\", \"mypa$$word\");\nINSERT INTO users (username, password) VALUES (\"django\", \"w0ff\");\nINSERT INTO users (username, password) VALUES (\"alecg\", \"c0de\");\n\nSELECT * FROM users;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 user_id \u2502 username \u2502  password  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1       \u2502 djs      \u2502 mypa$$word \u2502\n\u2502 2       \u2502 django   \u2502 w0ff       \u2502\n\u2502 3       \u2502 alecg    \u2502 c0de       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"users-database.db\")\nsql = con.cursor()\n\nquery = \"\"\"\n    INSERT INTO users (username, password) VALUES (\"djs\", \"mypa$$word\");\n\"\"\"\nsql.execute(query)\n\nquery = \"\"\"\n    INSERT INTO users (username, password) VALUES (\"django\", \"w0ff\");\n\"\"\"\nsql.execute(query)\n\nquery = \"\"\"\n    INSERT INTO users (username, password) VALUES (\"alecg\", \"c0de\");\n\"\"\"\nsql.execute(query)\n\n# Make sure the changes are saved to the DB.\ncon.commit()\n\nquery = \"\"\"\n    SELECT * FROM users;\n\"\"\"\n\nresult = sql.execute(query)\nrows = result.fetchall()\n\nprint(rows)\n</code></pre> <p>Output</p> <pre><code>[(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')]\n</code></pre>"},{"location":"sql/sql-language/#inserting-multiple-rows-into-a-table","title":"Inserting multiple rows into a table","text":"<p>If you want to insert multiple rows into a database table, you can use a single <code>INSERT</code> statement and group each row in <code>()</code>.</p> <p>Raw SQL</p> <pre><code>INSERT INTO users (username, password)\nVALUES\n    (\"djs\", \"mypa$$word\"),\n    (\"django\", \"w0ff\"),\n    (\"alecg\", \"c0de\");\n\n\nSELECT * FROM users;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 user_id \u2502 username \u2502  password  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1       \u2502 djs      \u2502 mypa$$word \u2502\n\u2502 2       \u2502 django   \u2502 w0ff       \u2502\n\u2502 3       \u2502 alecg    \u2502 c0de       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"users-database.db\")\nsql = con.cursor()\n\nquery = \"\"\"\n    INSERT INTO users (username, password)\n    VALUES\n        (\"djs\", \"mypa$$word\"),\n        (\"django\", \"w0ff\"),\n        (\"alecg\", \"c0de\");\n\"\"\"\n\nsql.execute(query)\ncon.commit()\n\nquery = \"\"\"\n    SELECT * FROM users;\n\"\"\"\n\nresult = sql.execute(query)\nrows = result.fetchall()\n\nprint(rows)\n</code></pre> <p>Output</p> <pre><code>[(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')]\n</code></pre> <p>Further Reading</p> <ul> <li>SQLBolt - Inserting rows</li> <li>SQLite Tutorial - SQLite Insert</li> </ul>"},{"location":"sql/sql-language/#join","title":"JOIN","text":"<p>Being able to combine data from related tables is one of the things that makes a relational database like SQLite so powerful.</p>"},{"location":"sql/sql-language/#defining-table-relationships","title":"Defining Table Relationships","text":"<p>Before you can <code>JOIN</code> two tables, they must share a common key. Consider the following two table schemas, which represent data about authors and books:</p> <pre><code>CREATE TABLE authors (\n    author_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    author_name TEXT NOT NULL\n);\n\nCREATE TABLE books (\n    book_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    author_id INTEGER NOT NULL REFERENCES authors (author_id), -- the Foreign Key relationship\n    book_title TEXT UNIQUE NOT NULL\n);\n</code></pre> <p>We can relate the two tables with the <code>REFERENCES</code> keyword. The <code>author_id</code> is known as a Foreign Key in the <code>books</code> table because it's merely pointing to the <code>PRIMARY KEY</code> of the <code>authors</code> table. It's the <code>author_id</code> shared between the <code>authors</code> and <code>books</code> tables that allows us to <code>JOIN</code> them together.</p>"},{"location":"sql/sql-language/#joining-tables-together","title":"JOINING Tables Together","text":"<p>Now that we have an established relationship between our <code>authors</code> and <code>books</code> tables, we can <code>JOIN</code> them together. We'll preface each column name with the table it references since we'll be referring to multiple tables like this <code>table_name.column_name</code>. This isn't always strictly required, but it makes it easier to understand which table each column references in the query.</p> <p>Raw SQL</p> <pre><code>SELECT * FROM authors;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 author_id \u2502  author_name  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1         \u2502 J.D. Salinger \u2502\n\u2502 2         \u2502 Harper Lee    \u2502\n\u2502 3         \u2502 Truman Capote \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSELECT * FROM books;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 book_id \u2502 author_id \u2502       book_title       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1       \u2502 2         \u2502 To Kill a Mockingbird  \u2502\n\u2502 2       \u2502 3         \u2502 In Cold Blood          \u2502\n\u2502 3       \u2502 1         \u2502 The Catcher in the Rye \u2502\n\u2502 4       \u2502 3         \u2502 Breakfast at Tiffanys  \u2502\n\u2502 5       \u2502 1         \u2502 Franny and Zooey       \u2502\n\u2502 6       \u2502 3         \u2502 Summer Crossing        \u2502\n\u2502 7       \u2502 2         \u2502 Go Set a Watchman      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Join the `authors` and `books` tables together\nSELECT authors.author_name, books.book_title\nFROM authors\nJOIN books ON authors.author_id = books.author_id;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  author_name  \u2502       book_title       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Harper Lee    \u2502 To Kill a Mockingbird  \u2502\n\u2502 Truman Capote \u2502 In Cold Blood          \u2502\n\u2502 J.D. Salinger \u2502 The Catcher in the Rye \u2502\n\u2502 Truman Capote \u2502 Breakfast at Tiffanys \u2502\n\u2502 J.D. Salinger \u2502 Franny and Zooey       \u2502\n\u2502 Truman Capote \u2502 Summer Crossing        \u2502\n\u2502 Harper Lee    \u2502 Go Set a Watchman      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Getting a bit fancier by ordering by `author_name`\nSELECT authors.author_name, books.book_title\nFROM authors\nJOIN books ON authors.author_id = books.author_id\nORDER BY authors.author_name;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  author_name  \u2502       book_title       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Harper Lee    \u2502 To Kill a Mockingbird  \u2502\n\u2502 Harper Lee    \u2502 Go Set a Watchman      \u2502\n\u2502 J.D. Salinger \u2502 The Catcher in the Rye \u2502\n\u2502 J.D. Salinger \u2502 Franny and Zooey       \u2502\n\u2502 Truman Capote \u2502 In Cold Blood          \u2502\n\u2502 Truman Capote \u2502 Breakfast at Tiffanys \u2502\n\u2502 Truman Capote \u2502 Summer Crossing        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"library-database.db\")\nsql = con.cursor()\n\ndef execute_query_and_display_rows(query):\n    result = sql.execute(query)\n    rows = result.fetchall()\n\n    for row in rows:\n        print(row)\n\n\nquery = \"\"\"\n    SELECT * FROM authors;\n\"\"\"\n\nprint(\"All rows in the `authors` table:\")\nexecute_query_and_display_rows(query)\n\nquery = \"\"\"\n    SELECT * FROM books;\n\"\"\"\n\nprint(\"\\nAll rows in the `books` table:\")\nexecute_query_and_display_rows(query)\n\n\nquery = \"\"\"\n    SELECT authors.author_name, books.book_title\n    FROM authors\n    JOIN books ON authors.author_id = books.author_id;\n\"\"\"\n\nprint(\"\\nJoining the `authors` and `books` tables:\")\nexecute_query_and_display_rows(query)\n\nquery = \"\"\"\n    SELECT authors.author_name, books.book_title\n    FROM authors\n    JOIN books ON authors.author_id = books.author_id\n    ORDER BY authors.author_name;\n\"\"\"\n\nprint(\"\\nJoining and sorting the `authors` and `books` tables:\")\nexecute_query_and_display_rows(query)\n</code></pre> <p>Output</p> <pre><code>All rows in the `authors` table:\n(1, 'J.D. Salinger')\n(2, 'Harper Lee')\n(3, 'Truman Capote')\n\nAll rows in the `books` table:\n(1, 2, 'To Kill a Mockingbird')\n(2, 3, 'In Cold Blood')\n(3, 1, 'The Catcher in the Rye')\n(4, 3, \"Breakfast at Tiffany's\")\n(5, 1, 'Franny and Zooey')\n(6, 3, 'Summer Crossing')\n(7, 2, 'Go Set a Watchman')\n\nJoining the `authors` and `books` tables:\n('Harper Lee', 'To Kill a Mockingbird')\n('Truman Capote', 'In Cold Blood')\n('J.D. Salinger', 'The Catcher in the Rye')\n('Truman Capote', \"Breakfast at Tiffany's\")\n('J.D. Salinger', 'Franny and Zooey')\n('Truman Capote', 'Summer Crossing')\n('Harper Lee', 'Go Set a Watchman')\n\nJoining and sorting the `authors` and `books` tables:\n('Harper Lee', 'To Kill a Mockingbird')\n('Harper Lee', 'Go Set a Watchman')\n('J.D. Salinger', 'The Catcher in the Rye')\n('J.D. Salinger', 'Franny and Zooey')\n('Truman Capote', 'In Cold Blood')\n('Truman Capote', \"Breakfast at Tiffany's\")\n('Truman Capote', 'Summer Crossing')\n</code></pre>"},{"location":"sql/sql-language/#the-using-shorthand","title":"The <code>USING()</code> shorthand","text":"<p>When using a <code>JOIN</code>, you don't have to use the <code>ON table.column_name = other_table.column_name</code> syntax if the column names are the same in both tables. We could rewrite the last <code>JOIN</code> from the previous example in a shorter way with <code>USING()</code> like so:</p> <pre><code>SELECT authors.author_name, books.book_title\nFROM authors\nJOIN books USING (author_id)  -- This is a nice shorthand\nORDER BY authors.author_name;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  author_name  \u2502       book_title       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Harper Lee    \u2502 To Kill a Mockingbird  \u2502\n\u2502 Harper Lee    \u2502 Go Set a Watchman      \u2502\n\u2502 J.D. Salinger \u2502 The Catcher in the Rye \u2502\n\u2502 J.D. Salinger \u2502 Franny and Zooey       \u2502\n\u2502 Truman Capote \u2502 In Cold Blood          \u2502\n\u2502 Truman Capote \u2502 Breakfast at Tiffanys \u2502\n\u2502 Truman Capote \u2502 Summer Crossing        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Further Reading</p> <ul> <li>SQLBolt - Multi-table queries with JOINs</li> <li>SQLite Tutorial - SQLite Join</li> </ul>"},{"location":"sql/sql-language/#limit","title":"LIMIT","text":"<p>Sometimes, you may want to get a limited number of rows back from a <code>SELECT</code> query. The <code>LIMIT</code> clause allows you to do this:</p> <p>Raw SQL</p> <pre><code>SELECT * FROM products;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1          \u2502 Dell XPS 17              \u2502 1599.99       \u2502 Computers        \u2502\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 3          \u2502 System76 Thelio B1       \u2502 1255.55       \u2502 Computers        \u2502\n\u2502 4          \u2502 Logitech M1              \u2502 34.99         \u2502 Accessories      \u2502\n\u2502 5          \u2502 Seagate S1 SSD           \u2502 88.75         \u2502 Accessories      \u2502\n\u2502 6          \u2502 MacBook Pro 16           \u2502 2100.5        \u2502 Computers        \u2502\n\u2502 7          \u2502 Rode Z28                 \u2502 275.99        \u2502 Microphones      \u2502\n\u2502 8          \u2502 Lenovo ThinkPad          \u2502 950.75        \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Only get the first 3 products in the table (by `product_id`)\nSELECT * FROM products LIMIT 3;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1          \u2502 Dell XPS 17              \u2502 1599.99       \u2502 Computers        \u2502\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 3          \u2502 System76 Thelio B1       \u2502 1255.55       \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"products-database.db\")\nsql = con.cursor()\n\n# We'll use this a few times so it makes sense for it to be a function\ndef fetch_and_display_rows(query):\n    result = sql.execute(query)\n    rows = result.fetchall()\n\n    for row in rows:\n        print(row)\n\n\nquery = \"\"\"\n    SELECT * FROM products;\n\"\"\"\n\nfetch_and_display_rows(query)\n\nquery = \"\"\"\n    SELECT * FROM products LIMIT 3;\n\"\"\"\n\nprint(\"\\nThe first three products in the table:\")\nfetch_and_display_rows(query)\n</code></pre> <p>Output</p> <pre><code>(1, 'Dell XPS 17', 1599.99, 'Computers')\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n(3, 'System76 Thelio B1', 1255.55, 'Computers')\n(4, 'Logitech M1', 34.99, 'Accessories')\n(5, 'Seagate S1 SSD', 88.75, 'Accessories')\n(6, 'MacBook Pro 16', 2100.5, 'Computers')\n(7, 'Rode Z28', 275.99, 'Microphones')\n(8, 'Lenovo ThinkPad', 950.75, 'Computers')\n\nThe first three products in the table:\n(1, 'Dell XPS 17', 1599.99, 'Computers')\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n(3, 'System76 Thelio B1', 1255.55, 'Computers')\n</code></pre> <p>Further Reading</p> <ul> <li>SQLBolt - Filtering and sorting Query results</li> <li>SQLite Tutorial - SQLite Limit</li> </ul>"},{"location":"sql/sql-language/#null","title":"NULL","text":"<p>The <code>NULL</code> datatype allows you to express a missing or unknown value.</p>"},{"location":"sql/sql-language/#avoiding-null-values-in-create-table-statements","title":"Avoiding NULL Values In CREATE TABLE Statements","text":"<p>Generally, <code>NULL</code> values should be avoided by adding a <code>NOT NULL</code> constraint to your <code>CREATE TABLE</code> definitions like so:</p> <pre><code>CREATE TABLE products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    product_name TEXT UNIQUE NOT NULL,\n    product_price REAL NOT NULL,\n    product_category TEXT NOT NULL\n);\n</code></pre> <p>If a column has a <code>NOT NULL</code> constraint and you try to enter a <code>NULL</code> value for that column, you'll get an error:</p> <p>Raw SQL</p> <pre><code>SELECT * FROM products;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1          \u2502 Dell XPS 17              \u2502 1599.99       \u2502 Computers        \u2502\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 3          \u2502 System76 Thelio B1       \u2502 1255.55       \u2502 Computers        \u2502\n\u2502 4          \u2502 Logitech M1              \u2502 34.99         \u2502 Accessories      \u2502\n\u2502 5          \u2502 Seagate S1 SSD           \u2502 88.75         \u2502 Accessories      \u2502\n\u2502 6          \u2502 MacBook Pro 16           \u2502 2100.5        \u2502 Computers        \u2502\n\u2502 7          \u2502 Rode Z28                 \u2502 275.99        \u2502 Microphones      \u2502\n\u2502 8          \u2502 Lenovo ThinkPad          \u2502 950.75        \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nINSERT INTO products (product_name, product_price, product_category)\nVALUES (\"mousepad\", NULL, \"Accessories\");\n-- Error: NOT NULL constraint failed: products.product_price\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"products-database.db\")\nsql = con.cursor()\n\nquery = \"\"\"\n    SELECT * FROM products;\n\"\"\"\n\nprint(\"All products:\")\nresult = sql.execute(query)\nrows = result.fetchall()\n\nfor row in rows:\n    print(row)\n\n\nquery = \"\"\"\n    INSERT INTO products (product_name, product_price, product_category)\n    VALUES (\"mousepad\", NULL, \"Accessories\");\n\"\"\"\n\n# This will throw an error\nsql.execute(query)\ncon.commit()\n</code></pre> <p>Output</p> <pre><code>All products:\n(1, 'Dell XPS 17', 1599.99, 'Computers')\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n(3, 'System76 Thelio B1', 1255.55, 'Computers')\n(4, 'Logitech M1', 34.99, 'Accessories')\n(5, 'Seagate S1 SSD', 88.75, 'Accessories')\n(6, 'MacBook Pro 16', 2100.5, 'Computers')\n(7, 'Rode Z28', 275.99, 'Microphones')\n(8, 'Lenovo ThinkPad', 950.75, 'Computers')\nTraceback (most recent call last):\n  File \"/home/daniel/documentation-examples/main.py\", line 24, in &lt;module&gt;\n    sql.execute(query)\nsqlite3.IntegrityError: NOT NULL constraint failed: products.product_price\n</code></pre>"},{"location":"sql/sql-language/#filtering-null-values-in-select-statements","title":"Filtering NULL Values In SELECT Statements","text":"<p>You can use <code>IS NULL</code> and <code>IS NOT NULL</code> to filter <code>SELECT</code> statements by columns with or without <code>NULL</code> values. This can be valuable to find rows with missing information or to only display rows with no missing information.</p> <p>Note that in Python, <code>NULL</code> translates to the <code>None</code> datatype.</p> <p>Raw SQL</p> <pre><code>/*\n*   We can see that the \"Lenovo ThinkPad\" doesn't have a `product_price`.\n*   That's because it's `NULL`!\n*/\nSELECT * FROM products;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1          \u2502 Dell XPS 17              \u2502 1599.99       \u2502 Computers        \u2502\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 3          \u2502 System76 Thelio B1       \u2502 1255.55       \u2502 Computers        \u2502\n\u2502 4          \u2502 Logitech M1              \u2502 34.99         \u2502 Accessories      \u2502\n\u2502 5          \u2502 Seagate S1 SSD           \u2502 88.75         \u2502 Accessories      \u2502\n\u2502 6          \u2502 MacBook Pro 16           \u2502 2100.5        \u2502 Computers        \u2502\n\u2502 7          \u2502 Rode Z28                 \u2502 275.99        \u2502 Microphones      \u2502\n\u2502 8          \u2502 Lenovo ThinkPad          \u2502               \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n/*\n*   We can filter our results to find products with missing\n*   `product_price` data.\n*/\nSELECT * FROM products WHERE product_price IS NULL;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502  product_name   \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 8          \u2502 Lenovo ThinkPad \u2502               \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n/*\n*   We can also filter out rows that have a `NULL` value for\n*   `product_price`.\n*/\nSELECT * FROM products WHERE product_price IS NOT NULL;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1          \u2502 Dell XPS 17              \u2502 1599.99       \u2502 Computers        \u2502\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 3          \u2502 System76 Thelio B1       \u2502 1255.55       \u2502 Computers        \u2502\n\u2502 4          \u2502 Logitech M1              \u2502 34.99         \u2502 Accessories      \u2502\n\u2502 5          \u2502 Seagate S1 SSD           \u2502 88.75         \u2502 Accessories      \u2502\n\u2502 6          \u2502 MacBook Pro 16           \u2502 2100.5        \u2502 Computers        \u2502\n\u2502 7          \u2502 Rode Z28                 \u2502 275.99        \u2502 Microphones      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"products-database.db\")\nsql = con.cursor()\n\ndef execute_query_and_display_rows(query):\n    result = sql.execute(query)\n    rows = result.fetchall()\n\n    for row in rows:\n        print(row)\n\n\nquery = \"\"\"\n    SELECT * FROM products;\n\"\"\"\n\nprint(\"All products:\")\nexecute_query_and_display_rows(query)\n\nquery = \"\"\"\n    SELECT * FROM products WHERE product_price IS NULL;\n\"\"\"\n\nprint(\"\\nProducts with `NULL` values for their price:\")\nexecute_query_and_display_rows(query)\n\nquery = \"\"\"\n    SELECT * FROM products WHERE product_price IS NOT NULL;\n\"\"\"\n\nprint(\"\\nProducts __without__ `NULL` values for their price:\")\nexecute_query_and_display_rows(query)\n</code></pre> <p>Output</p> <pre><code>All products:\n(1, 'Dell XPS 17', 1599.99, 'Computers')\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n(3, 'System76 Thelio B1', 1255.55, 'Computers')\n(4, 'Logitech M1', 34.99, 'Accessories')\n(5, 'Seagate S1 SSD', 88.75, 'Accessories')\n(6, 'MacBook Pro 16', 2100.5, 'Computers')\n(7, 'Rode Z28', 275.99, 'Microphones')\n(8, 'Lenovo ThinkPad', None, 'Computers')\n\nProducts with `NULL` values for their price:\n(8, 'Lenovo ThinkPad', None, 'Computers')\n\nProducts __without__ `NULL` values for their price:\n(1, 'Dell XPS 17', 1599.99, 'Computers')\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n(3, 'System76 Thelio B1', 1255.55, 'Computers')\n(4, 'Logitech M1', 34.99, 'Accessories')\n(5, 'Seagate S1 SSD', 88.75, 'Accessories')\n(6, 'MacBook Pro 16', 2100.5, 'Computers')\n(7, 'Rode Z28', 275.99, 'Microphones')\n</code></pre> <p>Further Reading</p> <ul> <li>SQLBolt - A short note on NULLs</li> <li>SQLite Tutorial - SQLite IS NULL</li> </ul>"},{"location":"sql/sql-language/#offset","title":"OFFSET","text":"<p>If you've ever visited a website like Amazon.com, you know that when you search for a particular product, there are multiple pages of results. The <code>OFFSET</code> clause allows you to move the starting point of the returned rows from a query. It's usually used in conjunction with a <code>LIMIT</code> clause for things like pagination (as in the Amazon example).</p> <p>Raw SQL</p> <pre><code>SELECT * FROM products;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1          \u2502 Dell XPS 17              \u2502 1599.99       \u2502 Computers        \u2502\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 3          \u2502 System76 Thelio B1       \u2502 1255.55       \u2502 Computers        \u2502\n\u2502 4          \u2502 Logitech M1              \u2502 34.99         \u2502 Accessories      \u2502\n\u2502 5          \u2502 Seagate S1 SSD           \u2502 88.75         \u2502 Accessories      \u2502\n\u2502 6          \u2502 MacBook Pro 16           \u2502 2100.5        \u2502 Computers        \u2502\n\u2502 7          \u2502 Rode Z28                 \u2502 275.99        \u2502 Microphones      \u2502\n\u2502 8          \u2502 Lenovo ThinkPad          \u2502 950.75        \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Only get the first 3 products in the table (by `product_id`)\nSELECT * FROM products LIMIT 3;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1          \u2502 Dell XPS 17              \u2502 1599.99       \u2502 Computers        \u2502\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 3          \u2502 System76 Thelio B1       \u2502 1255.55       \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Get the next 3 products in the table\nSELECT * FROM products LIMIT 3 OFFSET 3;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502  product_name  \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 4          \u2502 Logitech M1    \u2502 34.99         \u2502 Accessories      \u2502\n\u2502 5          \u2502 Seagate S1 SSD \u2502 88.75         \u2502 Accessories      \u2502\n\u2502 6          \u2502 MacBook Pro 16 \u2502 2100.5        \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"products-database.db\")\nsql = con.cursor()\n\n# We'll use this a few times so it makes sense for it to be a function\ndef fetch_and_display_rows(query):\n    result = sql.execute(query)\n    rows = result.fetchall()\n\n    for row in rows:\n        print(row)\n\n\nquery = \"\"\"\n    SELECT * FROM products;\n\"\"\"\n\nfetch_and_display_rows(query)\n\nquery = \"\"\"\n    SELECT * FROM products LIMIT 3;\n\"\"\"\n\nprint(\"\\nThe first three products in the table:\")\nfetch_and_display_rows(query)\n\nquery = \"\"\"\n    SELECT * FROM products LIMIT 3 OFFSET 3;\n\"\"\"\n\nprint(\"\\nThe second group of three products in the table:\")\nfetch_and_display_rows(query)\n</code></pre> <p>Output</p> <pre><code>(1, 'Dell XPS 17', 1599.99, 'Computers')\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n(3, 'System76 Thelio B1', 1255.55, 'Computers')\n(4, 'Logitech M1', 34.99, 'Accessories')\n(5, 'Seagate S1 SSD', 88.75, 'Accessories')\n(6, 'MacBook Pro 16', 2100.5, 'Computers')\n(7, 'Rode Z28', 275.99, 'Microphones')\n(8, 'Lenovo ThinkPad', 950.75, 'Computers')\n\nThe first three products in the table:\n(1, 'Dell XPS 17', 1599.99, 'Computers')\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n(3, 'System76 Thelio B1', 1255.55, 'Computers')\n\nThe second group of three products in the table:\n(4, 'Logitech M1', 34.99, 'Accessories')\n(5, 'Seagate S1 SSD', 88.75, 'Accessories')\n(6, 'MacBook Pro 16', 2100.5, 'Computers')\n</code></pre> <p>Further Reading</p> <ul> <li>SQLBolt - Filtering and sorting Query results</li> <li>SQLite Tutorial - SQLite Limit</li> </ul>"},{"location":"sql/sql-language/#order-by","title":"ORDER BY","text":"<p>The <code>ORDER BY</code> clause allows you to order rows in ascending (<code>ASC</code>) or descending (<code>DESC</code>) order alphanumerically. You use it with a <code>SELECT</code> query to order the output.</p> <p>Raw SQL</p> <pre><code>SELECT * FROM products;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1          \u2502 Dell XPS 17              \u2502 1599.99       \u2502 Computers        \u2502\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 3          \u2502 System76 Thelio B1       \u2502 1255.55       \u2502 Computers        \u2502\n\u2502 4          \u2502 Logitech M1              \u2502 34.99         \u2502 Accessories      \u2502\n\u2502 5          \u2502 Seagate S1 SSD           \u2502 88.75         \u2502 Accessories      \u2502\n\u2502 6          \u2502 MacBook Pro 16           \u2502 2100.5        \u2502 Computers        \u2502\n\u2502 7          \u2502 Rode Z28                 \u2502 275.99        \u2502 Microphones      \u2502\n\u2502 8          \u2502 Lenovo ThinkPad          \u2502 950.75        \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Ordering products from lowest price to highest price\nSELECT * FROM products ORDER BY product_price;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 4          \u2502 Logitech M1              \u2502 34.99         \u2502 Accessories      \u2502\n\u2502 5          \u2502 Seagate S1 SSD           \u2502 88.75         \u2502 Accessories      \u2502\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 7          \u2502 Rode Z28                 \u2502 275.99        \u2502 Microphones      \u2502\n\u2502 8          \u2502 Lenovo ThinkPad          \u2502 950.75        \u2502 Computers        \u2502\n\u2502 3          \u2502 System76 Thelio B1       \u2502 1255.55       \u2502 Computers        \u2502\n\u2502 1          \u2502 Dell XPS 17              \u2502 1599.99       \u2502 Computers        \u2502\n\u2502 6          \u2502 MacBook Pro 16           \u2502 2100.5        \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- ASC is the default, so it's the the same as doing nothing after ORDER BY\nSELECT * FROM products ORDER BY product_price ASC;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 4          \u2502 Logitech M1              \u2502 34.99         \u2502 Accessories      \u2502\n\u2502 5          \u2502 Seagate S1 SSD           \u2502 88.75         \u2502 Accessories      \u2502\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 7          \u2502 Rode Z28                 \u2502 275.99        \u2502 Microphones      \u2502\n\u2502 8          \u2502 Lenovo ThinkPad          \u2502 950.75        \u2502 Computers        \u2502\n\u2502 3          \u2502 System76 Thelio B1       \u2502 1255.55       \u2502 Computers        \u2502\n\u2502 1          \u2502 Dell XPS 17              \u2502 1599.99       \u2502 Computers        \u2502\n\u2502 6          \u2502 MacBook Pro 16           \u2502 2100.5        \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Ordering products from highest price to lowest price\nSELECT * FROM products ORDER BY product_price DESC;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 6          \u2502 MacBook Pro 16           \u2502 2100.5        \u2502 Computers        \u2502\n\u2502 1          \u2502 Dell XPS 17              \u2502 1599.99       \u2502 Computers        \u2502\n\u2502 3          \u2502 System76 Thelio B1       \u2502 1255.55       \u2502 Computers        \u2502\n\u2502 8          \u2502 Lenovo ThinkPad          \u2502 950.75        \u2502 Computers        \u2502\n\u2502 7          \u2502 Rode Z28                 \u2502 275.99        \u2502 Microphones      \u2502\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 5          \u2502 Seagate S1 SSD           \u2502 88.75         \u2502 Accessories      \u2502\n\u2502 4          \u2502 Logitech M1              \u2502 34.99         \u2502 Accessories      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"products-database.db\")\nsql = con.cursor()\n\n# We'll use this a few times so it makes sense for it to be a function\ndef fetch_and_display_all_rows(query):\n    result = sql.execute(query)\n    rows = result.fetchall()\n\n    for row in rows:\n        print(row)\n\n\nquery = \"\"\"\n    SELECT * FROM products;\n\"\"\"\n\nfetch_and_display_all_rows(query)\n\nquery = \"\"\"\n    SELECT * FROM products ORDER BY product_price;\n\"\"\"\n\nprint(\"\\nProducts ordered from price lowest to highest price:\")\nfetch_and_display_all_rows(query)\n\nquery = \"\"\"\n    SELECT * FROM products ORDER BY product_price DESC;\n\"\"\"\n\nprint(\"\\nProducts ordered from price highest to lowest price:\")\nfetch_and_display_all_rows(query)\n</code></pre> <p>Output</p> <pre><code>(1, 'Dell XPS 17', 1599.99, 'Computers')\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n(3, 'System76 Thelio B1', 1255.55, 'Computers')\n(4, 'Logitech M1', 34.99, 'Accessories')\n(5, 'Seagate S1 SSD', 88.75, 'Accessories')\n(6, 'MacBook Pro 16', 2100.5, 'Computers')\n(7, 'Rode Z28', 275.99, 'Microphones')\n(8, 'Lenovo ThinkPad', 950.75, 'Computers')\n\nProducts ordered from price lowest to highest price:\n(4, 'Logitech M1', 34.99, 'Accessories')\n(5, 'Seagate S1 SSD', 88.75, 'Accessories')\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n(7, 'Rode Z28', 275.99, 'Microphones')\n(8, 'Lenovo ThinkPad', 950.75, 'Computers')\n(3, 'System76 Thelio B1', 1255.55, 'Computers')\n(1, 'Dell XPS 17', 1599.99, 'Computers')\n(6, 'MacBook Pro 16', 2100.5, 'Computers')\n\nProducts ordered from price highest to lowest price:\n(6, 'MacBook Pro 16', 2100.5, 'Computers')\n(1, 'Dell XPS 17', 1599.99, 'Computers')\n(3, 'System76 Thelio B1', 1255.55, 'Computers')\n(8, 'Lenovo ThinkPad', 950.75, 'Computers')\n(7, 'Rode Z28', 275.99, 'Microphones')\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n(5, 'Seagate S1 SSD', 88.75, 'Accessories')\n(4, 'Logitech M1', 34.99, 'Accessories')\n</code></pre> <p>Further Reading</p> <ul> <li>SQLBolt - Filtering and sorting Query results</li> <li>SQLite Tutorial - SQLite Order By</li> </ul>"},{"location":"sql/sql-language/#select","title":"SELECT","text":"<p>To see what data is in a SQL table, you use the <code>SELECT</code> statement.</p>"},{"location":"sql/sql-language/#selecting-all-of-the-rows-and-columns-from-a-table","title":"Selecting all of the rows and columns from a table","text":"<p>You can <code>SELECT *</code> from a table and that'll give you all of the rows in that table along with all the columns. Be aware that the <code>*</code> means \"Give me all the columns\" not \"Give me all the rows\". All rows are returned from a <code>SELECT</code> query unless you begin using filters like <code>WHERE</code>, <code>LIMIT</code>, or <code>DISTINCT</code>.</p> <p>Raw SQL</p> <pre><code>SELECT * FROM users;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 user_id \u2502 username \u2502  password  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1       \u2502 djs      \u2502 mypa$$word \u2502\n\u2502 2       \u2502 django   \u2502 w0ff       \u2502\n\u2502 3       \u2502 alecg    \u2502 c0de       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>When selecting data from Python, you can fetch all of the rows by using the <code>fetchall()</code> method of the query result. Note that <code>fetchall()</code> returns a <code>list</code> of <code>tuples</code>, so you would need to do further processing from Python to get the individual rows from this <code>list</code>, such as looping through the rows.</p> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"users-database.db\")\nsql = con.cursor()\n\nquery = \"\"\"\n    SELECT * FROM users;\n\"\"\"\n\nresult = sql.execute(query)\nrows = result.fetchall()\n\nprint(rows)\n\nfor row in rows:\n    # Using multiple assignment to get the values from each row\n    user_id, username, password = row\n    print(f\"User ID: {user_id}\")\n    print(f\"Username: {username}\")\n    print(f\"Password: {password}\")\n</code></pre> <p>Output</p> <pre><code>[(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')]\nUser ID: 1\nUsername: djs\nPassword: mypa$$word\nUser ID: 2\nUsername: django\nPassword: w0ff\nUser ID: 3\nUsername: alecg\nPassword: c0de\n</code></pre>"},{"location":"sql/sql-language/#selecting-specific-columns-from-a-table","title":"Selecting specific columns from a table","text":"<p>If you only want certain columns returned, you can list them separated by commas after the <code>SELECT</code> keyword. Notice how the <code>user_id</code> column is not present in the result set in the query below.</p> <p>Raw SQL</p> <pre><code>SELECT username, password FROM users;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 username \u2502  password  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 djs      \u2502 mypa$$word \u2502\n\u2502 django   \u2502 w0ff       \u2502\n\u2502 alecg    \u2502 c0de       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"users-database.db\")\nsql = con.cursor()\n\nquery = \"\"\"\n    SELECT username, password FROM users;\n\"\"\"\n\nresult = sql.execute(query)\nrows = result.fetchall()\n\nprint(rows)\n</code></pre> <p>Output</p> <pre><code>[('djs', 'mypa$$word'), ('django', 'w0ff'), ('alecg', 'c0de')]\n</code></pre> <p>Further Reading</p> <ul> <li>SQLBolt - SELECT queries 101</li> <li>SQLite Tutorial - SQLite Select</li> </ul>"},{"location":"sql/sql-language/#update","title":"UPDATE","text":"<p>If you need to change data in a SQL table, the <code>UPDATE</code> statement is used. Make sure to use a <code>WHERE</code> clause so that you only update the rows you intend to change.</p> <p>Raw SQL</p> <pre><code>SELECT * FROM users;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 user_id \u2502 username \u2502  password  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1       \u2502 djs      \u2502 mypa$$word \u2502\n\u2502 2       \u2502 django   \u2502 w0ff       \u2502\n\u2502 3       \u2502 alecg    \u2502 c0de       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- The `djs` user will now have `danielj` as their username.\nUPDATE users SET username = \"danielj\" WHERE user_id = 1;\n\nSELECT * FROM users;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 user_id \u2502 username \u2502  password  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1       \u2502 danielj  \u2502 mypa$$word \u2502\n\u2502 2       \u2502 django   \u2502 w0ff       \u2502\n\u2502 3       \u2502 alecg    \u2502 c0de       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"users-database.db\")\nsql = con.cursor()\n\n# We'll use this twice, so it makes sense to be a function\ndef display_all_users():\n    query = \"\"\"\n        SELECT * FROM users;\n    \"\"\"\n\n    result = sql.execute(query)\n    rows = result.fetchall()\n\n    print(rows)\n\n\ndisplay_all_users()\n\nquery = \"\"\"\n    UPDATE users SET username = \"danielj\" WHERE id = 1;\n\"\"\"\n\nsql.execute(query)\n\n# Make sure to commit the changes to the DB\ncon.commit()\n\ndisplay_all_users()\n</code></pre> <p>Output</p> <pre><code>[(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')]\n[(1, 'danielj', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')]\n</code></pre>"},{"location":"sql/sql-language/#updating-multiple-columns","title":"Updating multiple columns","text":"<p>If you need to update multiple columns, you can separate the <code>SET</code> clauses with commas. We've also put each new SQL command on a new line and added some indentation to make this longer query easier to read.</p> <p>Raw SQL</p> <pre><code>SELECT * FROM users;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 user_id \u2502 username \u2502  password  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1       \u2502 djs      \u2502 mypa$$word \u2502\n\u2502 2       \u2502 django   \u2502 w0ff       \u2502\n\u2502 3       \u2502 alecg    \u2502 c0de       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nUPDATE users\nSET\n    username = \"danielj\", -- note the comma here\n    password = \"b3tTerpa$$w0rd\"\nWHERE user_id = 1;\n\nSELECT * FROM users;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 user_id \u2502 username \u2502    password    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1       \u2502 danielj  \u2502 b3tTerpa$$w0rd \u2502\n\u2502 2       \u2502 django   \u2502 w0ff           \u2502\n\u2502 3       \u2502 alecg    \u2502 c0de           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"users-database.db\")\nsql = con.cursor()\n\n# We'll use this twice, so it makes sense to be a function\ndef display_all_users():\n    query = \"\"\"\n        SELECT * FROM users;\n    \"\"\"\n\n    result = sql.execute(query)\n    rows = result.fetchall()\n\n    print(rows)\n\n\ndisplay_all_users()\n\nquery = \"\"\"\n    UPDATE users\n    SET\n        username = \"danielj\",\n        password = \"b3tTerpa$$w0rd\"\n    WHERE user_id = 1;\n\"\"\"\n\nsql.execute(query)\n\n# Make sure to commit the changes to the DB\ncon.commit()\n\ndisplay_all_users()\n</code></pre> <p>Output</p> <pre><code>[(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')]\n[(1, 'danielj', 'b3tTerpa$$w0rd'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')]\n</code></pre> <p>Further Reading</p> <ul> <li>SQLBolt - Updating rows</li> <li>SQLite Tutorial - SQLite Update</li> </ul>"},{"location":"sql/sql-language/#where","title":"WHERE","text":"<p>To filter the results from a SQL query, use the <code>WHERE</code> clause.</p> <p>Raw SQL</p> <pre><code>SELECT * FROM users;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 user_id \u2502 username \u2502  password  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1       \u2502 djs      \u2502 mypa$$word \u2502\n\u2502 2       \u2502 django   \u2502 w0ff       \u2502\n\u2502 3       \u2502 alecg    \u2502 c0de       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\nSELECT * FROM users WHERE username = \"djs\";\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 user_id \u2502 username \u2502  password  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1       \u2502 djs      \u2502 mypa$$word \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"users-database.db\")\nsql = con.cursor()\n\ndef run_query_and_display_results(query):\n    result = sql.execute(query)\n    rows = result.fetchall()\n\n    print(rows)\n\n\nquery = \"\"\"\n    SELECT * FROM users;\n\"\"\"\n\nrun_query_and_display_results(query)\n\nquery = \"\"\"\n    SELECT * FROM users WHERE username = \"djs\";\n\"\"\"\n\nrun_query_and_display_results(query)\n</code></pre> <p>Output</p> <pre><code>[(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')]\n[(1, 'djs', 'mypa$$word')]\n</code></pre>"},{"location":"sql/sql-language/#getting-a-single-row-from-python-when-using-where","title":"Getting a single row from Python when using <code>WHERE</code>","text":"<p>If you only need a single row from a <code>SELECT</code> statement using a <code>WHERE</code> clause in your Python programs, use <code>fetchone()</code>. This returns a <code>tuple</code> of the data in each column, and you can use techniques like tuple unpacking or indexing to pull the individual values from the <code>tuple</code>.</p> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"users-database.db\")\nsql = con.cursor()\n\nquery = \"\"\"\n    SELECT * FROM users WHERE username = \"djs\";\n\"\"\"\n\nresult = sql.execute(query)\nrow = result.fetchone()\n\n# This will be a tuple\nprint(row)\n\n# Getting the values from the row with tuple unpacking\nuser_id, username, password = row\n\nprint(f\"User ID: {user_id}\")\nprint(f\"Username: {username}\")\nprint(f\"Password: {password}\")\n</code></pre> <p>Output</p> <pre><code>(1, 'djs', 'mypa$$word')\nUser ID: 1\nUsername: djs\nPassword: mypa$$word\n</code></pre>"},{"location":"sql/sql-language/#using-conditional-logic-with-where-clauses","title":"Using conditional logic with <code>WHERE</code> clauses","text":"<p>There are many operators available to use in a <code>WHERE</code> clause. The ones that you can use with numerical data are shown below (<code>=</code>, <code>IN</code>, and <code>NOT IN</code> can also be used with <code>TEXT</code> data):</p> Operator Description = Equality (works for numbers and TEXT) &gt; Greater-than &lt; Less-than &gt;= Greater-than or equal-to &lt;= Less-than or equal-to BETWEEN...AND Number is between two values NOT BETWEEN...AND Number is not between two values IN (...) Number/Text exists in a list NOT IN (...) Number/Text does not exist in a list <p>Here are examples of a few of the operators on a table of <code>products</code>:</p> <p>Raw SQL</p> <pre><code>SELECT * FROM products;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1          \u2502 Dell XPS 17              \u2502 1599.99       \u2502 Computers        \u2502\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 3          \u2502 System76 Thelio B1       \u2502 1255.55       \u2502 Computers        \u2502\n\u2502 4          \u2502 Logitech M1              \u2502 34.99         \u2502 Accessories      \u2502\n\u2502 5          \u2502 Seagate S1 SSD           \u2502 88.75         \u2502 Accessories      \u2502\n\u2502 6          \u2502 MacBook Pro 16           \u2502 2100.5        \u2502 Computers        \u2502\n\u2502 7          \u2502 Rode Z28                 \u2502 275.99        \u2502 Microphones      \u2502\n\u2502 8          \u2502 Lenovo ThinkPad          \u2502 950.75        \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Get the product where the `product_name` is \"Lenovo ThinkPad\".\nSELECT * FROM products WHERE product_name = \"Lenovo ThinkPad\";\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502  product_name   \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 8          \u2502 Lenovo ThinkPad \u2502 950.75        \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Get the products that cost less than $1000.\nSELECT * FROM products WHERE product_price &lt; 1000;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 4          \u2502 Logitech M1              \u2502 34.99         \u2502 Accessories      \u2502\n\u2502 5          \u2502 Seagate S1 SSD           \u2502 88.75         \u2502 Accessories      \u2502\n\u2502 7          \u2502 Rode Z28                 \u2502 275.99        \u2502 Microphones      \u2502\n\u2502 8          \u2502 Lenovo ThinkPad          \u2502 950.75        \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Get the products that cost more than $1000.\nSELECT * FROM products WHERE product_price &gt; 1000;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502    product_name    \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1          \u2502 Dell XPS 17        \u2502 1599.99       \u2502 Computers        \u2502\n\u2502 3          \u2502 System76 Thelio B1 \u2502 1255.55       \u2502 Computers        \u2502\n\u2502 6          \u2502 MacBook Pro 16     \u2502 2100.5        \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Get the products whose prices are between $50 and $300 (inclusive).\nSELECT * FROM products WHERE product_price BETWEEN 50 AND 300;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 5          \u2502 Seagate S1 SSD           \u2502 88.75         \u2502 Accessories      \u2502\n\u2502 7          \u2502 Rode Z28                 \u2502 275.99        \u2502 Microphones      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Get the products that are in the \"Microphones\" and \"Computers\" categories.\nSELECT * FROM products WHERE product_category IN (\"Microphones\", \"Computers\");\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1          \u2502 Dell XPS 17              \u2502 1599.99       \u2502 Computers        \u2502\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 3          \u2502 System76 Thelio B1       \u2502 1255.55       \u2502 Computers        \u2502\n\u2502 6          \u2502 MacBook Pro 16           \u2502 2100.5        \u2502 Computers        \u2502\n\u2502 7          \u2502 Rode Z28                 \u2502 275.99        \u2502 Microphones      \u2502\n\u2502 8          \u2502 Lenovo ThinkPad          \u2502 950.75        \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"products-database.db\")\nsql = con.cursor()\n\n# We'll use this a few times so it makes sense for it to be a function\ndef fetch_and_display_all_rows(query):\n    result = sql.execute(query)\n    rows = result.fetchall()\n\n    for row in rows:\n        print(row)\n\n\nquery = \"\"\"\n    SELECT * FROM products;\n\"\"\"\n\nfetch_and_display_all_rows(query)\n\nquery = \"\"\"\n    SELECT * FROM products WHERE product_name = \"Lenovo ThinkPad\";\n\"\"\"\n\nprint(\"\\nLooking for the 'Lenovo ThinkPad':\")\nfetch_and_display_all_rows(query)\n\nquery = \"\"\"\n    SELECT * FROM products WHERE product_price &lt; 1000;\n\"\"\"\n\nprint(\"\\nProducts cheaper than $1000:\")\nfetch_and_display_all_rows(query)\n\nquery = \"\"\"\n    SELECT * FROM products WHERE product_price &gt; 1000;\n\"\"\"\n\nprint(\"\\nProducts more expensive than $1000:\")\nfetch_and_display_all_rows(query)\n\nquery = \"\"\"\n    SELECT * FROM products WHERE product_price BETWEEN 50 AND 300;\n\"\"\"\n\nprint(\"\\nProducts between $50 and $300 (inclusive):\")\nfetch_and_display_all_rows(query)\n\nquery = \"\"\"\n    SELECT * FROM products WHERE product_category IN (\"Microphones\", \"Computers\");\n\"\"\"\n\nprint(\"\\nProducts in the 'Microphones' and 'Computers' categories:\")\nfetch_and_display_all_rows(query)\n</code></pre> <p>Output</p> <pre><code>(1, 'Dell XPS 17', 1599.99, 'Computers')\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n(3, 'System76 Thelio B1', 1255.55, 'Computers')\n(4, 'Logitech M1', 34.99, 'Accessories')\n(5, 'Seagate S1 SSD', 88.75, 'Accessories')\n(6, 'MacBook Pro 16', 2100.5, 'Computers')\n(7, 'Rode Z28', 275.99, 'Microphones')\n(8, 'Lenovo ThinkPad', 950.75, 'Computers')\n\nLooking for the 'Lenovo ThinkPad':\n(8, 'Lenovo ThinkPad', 950.75, 'Computers')\n\nProducts cheaper than $1000:\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n(4, 'Logitech M1', 34.99, 'Accessories')\n(5, 'Seagate S1 SSD', 88.75, 'Accessories')\n(7, 'Rode Z28', 275.99, 'Microphones')\n(8, 'Lenovo ThinkPad', 950.75, 'Computers')\n\nProducts more expensive than $1000:\n(1, 'Dell XPS 17', 1599.99, 'Computers')\n(3, 'System76 Thelio B1', 1255.55, 'Computers')\n(6, 'MacBook Pro 16', 2100.5, 'Computers')\n\nProducts between $50 and $300 (inclusive):\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n(5, 'Seagate S1 SSD', 88.75, 'Accessories')\n(7, 'Rode Z28', 275.99, 'Microphones')\n\nProducts in the 'Microphones' and 'Computers' categories:\n(1, 'Dell XPS 17', 1599.99, 'Computers')\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n(3, 'System76 Thelio B1', 1255.55, 'Computers')\n(6, 'MacBook Pro 16', 2100.5, 'Computers')\n(7, 'Rode Z28', 275.99, 'Microphones')\n(8, 'Lenovo ThinkPad', 950.75, 'Computers')\n</code></pre>"},{"location":"sql/sql-language/#complex-conditional-logic-with-where-clauses","title":"Complex conditional logic with <code>WHERE</code> clauses","text":"<p>You can join multiple <code>WHERE</code> clauses with the logical <code>AND</code> and <code>OR</code> operators to make complex conditional statements, just like in a programming language like Python or JavaScript.</p> <p>Raw SQL</p> <pre><code>SELECT * FROM products;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1          \u2502 Dell XPS 17              \u2502 1599.99       \u2502 Computers        \u2502\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 3          \u2502 System76 Thelio B1       \u2502 1255.55       \u2502 Computers        \u2502\n\u2502 4          \u2502 Logitech M1              \u2502 34.99         \u2502 Accessories      \u2502\n\u2502 5          \u2502 Seagate S1 SSD           \u2502 88.75         \u2502 Accessories      \u2502\n\u2502 6          \u2502 MacBook Pro 16           \u2502 2100.5        \u2502 Computers        \u2502\n\u2502 7          \u2502 Rode Z28                 \u2502 275.99        \u2502 Microphones      \u2502\n\u2502 8          \u2502 Lenovo ThinkPad          \u2502 950.75        \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Get all microphones less than $200.\nSELECT * FROM products\nWHERE product_category = \"Microphones\" AND product_price &lt; 200;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- Get any microphones or computers less than $1000.\nSELECT * FROM products\nWHERE product_price &lt; 1000 AND product_category IN (\"Computers\", \"Microphones\");\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2502       product_name       \u2502 product_price \u2502 product_category \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2          \u2502 Blue Snowball Microphone \u2502 99.5          \u2502 Microphones      \u2502\n\u2502 7          \u2502 Rode Z28                 \u2502 275.99        \u2502 Microphones      \u2502\n\u2502 8          \u2502 Lenovo ThinkPad          \u2502 950.75        \u2502 Computers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Python + SQL</p> <pre><code>import sqlite3\n\ncon = sqlite3.connect(\"products-database.db\")\nsql = con.cursor()\n\n# We'll use this a few times so it makes sense for it to be a function\ndef fetch_and_display_all_rows(query):\n    result = sql.execute(query)\n    rows = result.fetchall()\n\n    for row in rows:\n        print(row)\n\n\nquery = \"\"\"\n    SELECT * FROM products;\n\"\"\"\n\nfetch_and_display_all_rows(query)\n\nquery = \"\"\"\n    SELECT * FROM products\n    WHERE product_category = \"Microphones\" AND product_price &lt; 200;\n\"\"\"\n\nprint(\"\\nGetting microphones less than $200:\")\nfetch_and_display_all_rows(query)\n\nquery = \"\"\"\n    SELECT * FROM products\n    WHERE product_price &lt; 1000 AND product_category IN (\"Computers\", \"Microphones\");\n\"\"\"\n\nprint(\"\\nComputers and Microphones cheaper than $1000:\")\nfetch_and_display_all_rows(query)\n</code></pre> <p>Output</p> <pre><code>(1, 'Dell XPS 17', 1599.99, 'Computers')\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n(3, 'System76 Thelio B1', 1255.55, 'Computers')\n(4, 'Logitech M1', 34.99, 'Accessories')\n(5, 'Seagate S1 SSD', 88.75, 'Accessories')\n(6, 'MacBook Pro 16', 2100.5, 'Computers')\n(7, 'Rode Z28', 275.99, 'Microphones')\n(8, 'Lenovo ThinkPad', 950.75, 'Computers')\n\nGetting microphones less than $200:\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n\nComputers and Microphones cheaper than $1000:\n(2, 'Blue Snowball Microphone', 99.5, 'Microphones')\n(7, 'Rode Z28', 275.99, 'Microphones')\n(8, 'Lenovo ThinkPad', 950.75, 'Computers')\n</code></pre> <p>Further Reading</p> <ul> <li>SQLBolt - Queries with constraints - Pt. 1</li> <li>SQLBolt - Queries with constraints - Pt. 2</li> <li>SQLite Tutorial - SQLite Where</li> </ul>"}]}